
/Users/owenschwab/Documents/IoT/smartRoom/smartRoom_v01/target/4.0.2/argon/smartRoom_v01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004b14  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b8b30  000b8b30  00008b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b8b54  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000004ac  2003e044  000b8b58  0001e044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000300  2003e4f0  2003e4f0  0002e4f0  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b9004  000b9004  00029004  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b902c  000b902c  0002902c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00136a33  00000000  00000000  00029030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00016339  00000000  00000000  0015fa63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00040d64  00000000  00000000  00175d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000032b0  00000000  00000000  001b6b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000b010  00000000  00000000  001b9db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ee94  00000000  00000000  001c4dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004b857  00000000  00000000  00203c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013aa72  00000000  00000000  0024f4ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000090c8  00000000  00000000  00389f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f003 fd8f 	bl	b7b50 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f003 fd97 	bl	b7b6c <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e044 	.word	0x2003e044
   b4048:	000b8b58 	.word	0x000b8b58
   b404c:	2003e4f0 	.word	0x2003e4f0
   b4050:	2003e4f0 	.word	0x2003e4f0
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f003 fb0b 	bl	b7678 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b8afc 	.word	0x000b8afc
   b407c:	000b8b24 	.word	0x000b8b24

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 bc40 	b.w	b4904 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 fcef 	bl	b4a68 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f003 baab 	b.w	b75e8 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f002 b91f 	b.w	b62d4 <malloc>

000b4096 <_Znaj>:
   b4096:	f002 b91d 	b.w	b62d4 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f002 b923 	b.w	b62e4 <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f002 f870 	bl	b618c <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b5ddd 	.word	0x000b5ddd
   b40b4:	000b7cec 	.word	0x000b7cec

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <nrf_gpio_pin_read>:
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b40c8:	282f      	cmp	r0, #47	; 0x2f
    }
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
   b40ca:	b510      	push	{r4, lr}
   b40cc:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b40ce:	d90d      	bls.n	b40ec <nrf_gpio_pin_read+0x24>
   b40d0:	4a09      	ldr	r2, [pc, #36]	; (b40f8 <nrf_gpio_pin_read+0x30>)
   b40d2:	490a      	ldr	r1, [pc, #40]	; (b40fc <nrf_gpio_pin_read+0x34>)
   b40d4:	200a      	movs	r0, #10
   b40d6:	f002 f859 	bl	b618c <panic_>
        return NRF_P1;
   b40da:	4b09      	ldr	r3, [pc, #36]	; (b4100 <nrf_gpio_pin_read+0x38>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b40dc:	f004 041f 	and.w	r4, r4, #31
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   b40e0:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   b40e4:	40e0      	lsrs	r0, r4
}
   b40e6:	f000 0001 	and.w	r0, r0, #1
   b40ea:	bd10      	pop	{r4, pc}
    if (*p_pin < P0_PIN_NUM)
   b40ec:	281f      	cmp	r0, #31
   b40ee:	d8f4      	bhi.n	b40da <nrf_gpio_pin_read+0x12>
        return NRF_P0;
   b40f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   b40f4:	e7f4      	b.n	b40e0 <nrf_gpio_pin_read+0x18>
   b40f6:	bf00      	nop
   b40f8:	000b5ddd 	.word	0x000b5ddd
   b40fc:	000b7d01 	.word	0x000b7d01
   b4100:	50000300 	.word	0x50000300

000b4104 <_ZN7Encoder16interruptHandlerEv>:
		state = (s >> 2);
	}
*/

private:
	void interruptHandler() {
   b4104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#ifdef	__cplusplus
extern "C" {
#endif

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4108:	f8df 812c 	ldr.w	r8, [pc, #300]	; b4238 <_ZN7Encoder16interruptHandlerEv+0x134>
		uint8_t p1val = DIRECT_PIN_READ(pin1_register, pin1_bitmask);
   b410c:	6887      	ldr	r7, [r0, #8]
   b410e:	f898 3000 	ldrb.w	r3, [r8]
   b4112:	4d48      	ldr	r5, [pc, #288]	; (b4234 <_ZN7Encoder16interruptHandlerEv+0x130>)
   b4114:	f3bf 8f5b 	dmb	ish
   b4118:	f013 0f01 	tst.w	r3, #1
	void interruptHandler() {
   b411c:	4604      	mov	r4, r0
   b411e:	d109      	bne.n	b4134 <_ZN7Encoder16interruptHandlerEv+0x30>
   b4120:	4640      	mov	r0, r8
   b4122:	f7ff ffc9 	bl	b40b8 <__cxa_guard_acquire>
   b4126:	b128      	cbz	r0, b4134 <_ZN7Encoder16interruptHandlerEv+0x30>
   b4128:	f001 fe70 	bl	b5e0c <HAL_Pin_Map>
   b412c:	6028      	str	r0, [r5, #0]
   b412e:	4640      	mov	r0, r8
   b4130:	f7ff ffc7 	bl	b40c2 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4134:	b2bf      	uxth	r7, r7
   b4136:	682b      	ldr	r3, [r5, #0]
   b4138:	013f      	lsls	r7, r7, #4
   b413a:	5dde      	ldrb	r6, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b413c:	f898 3000 	ldrb.w	r3, [r8]
   b4140:	f3bf 8f5b 	dmb	ish
   b4144:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4146:	ea4f 1946 	mov.w	r9, r6, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b414a:	d409      	bmi.n	b4160 <_ZN7Encoder16interruptHandlerEv+0x5c>
   b414c:	483a      	ldr	r0, [pc, #232]	; (b4238 <_ZN7Encoder16interruptHandlerEv+0x134>)
   b414e:	f7ff ffb3 	bl	b40b8 <__cxa_guard_acquire>
   b4152:	b128      	cbz	r0, b4160 <_ZN7Encoder16interruptHandlerEv+0x5c>
   b4154:	f001 fe5a 	bl	b5e0c <HAL_Pin_Map>
   b4158:	6028      	str	r0, [r5, #0]
   b415a:	4837      	ldr	r0, [pc, #220]	; (b4238 <_ZN7Encoder16interruptHandlerEv+0x134>)
   b415c:	f7ff ffb1 	bl	b40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4160:	682b      	ldr	r3, [r5, #0]
   b4162:	443b      	add	r3, r7
   b4164:	785e      	ldrb	r6, [r3, #1]
   b4166:	f006 061f 	and.w	r6, r6, #31
   b416a:	ea46 0609 	orr.w	r6, r6, r9
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   b416e:	4630      	mov	r0, r6
   b4170:	f7ff ffaa 	bl	b40c8 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   b4174:	4630      	mov	r0, r6
   b4176:	f7ff ffa7 	bl	b40c8 <nrf_gpio_pin_read>
		uint8_t p2val = DIRECT_PIN_READ(pin2_register, pin2_bitmask);
   b417a:	68e7      	ldr	r7, [r4, #12]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b417c:	f898 3000 	ldrb.w	r3, [r8]
   b4180:	f3bf 8f5b 	dmb	ish
   b4184:	07da      	lsls	r2, r3, #31
		uint8_t p1val = DIRECT_PIN_READ(pin1_register, pin1_bitmask);
   b4186:	b2c6      	uxtb	r6, r0
   b4188:	d409      	bmi.n	b419e <_ZN7Encoder16interruptHandlerEv+0x9a>
   b418a:	482b      	ldr	r0, [pc, #172]	; (b4238 <_ZN7Encoder16interruptHandlerEv+0x134>)
   b418c:	f7ff ff94 	bl	b40b8 <__cxa_guard_acquire>
   b4190:	b128      	cbz	r0, b419e <_ZN7Encoder16interruptHandlerEv+0x9a>
   b4192:	f001 fe3b 	bl	b5e0c <HAL_Pin_Map>
   b4196:	6028      	str	r0, [r5, #0]
   b4198:	4827      	ldr	r0, [pc, #156]	; (b4238 <_ZN7Encoder16interruptHandlerEv+0x134>)
   b419a:	f7ff ff92 	bl	b40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b419e:	b2bf      	uxth	r7, r7
   b41a0:	682b      	ldr	r3, [r5, #0]
   b41a2:	013f      	lsls	r7, r7, #4
   b41a4:	f813 9007 	ldrb.w	r9, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b41a8:	f898 3000 	ldrb.w	r3, [r8]
   b41ac:	f3bf 8f5b 	dmb	ish
   b41b0:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b41b2:	ea4f 1949 	mov.w	r9, r9, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b41b6:	d409      	bmi.n	b41cc <_ZN7Encoder16interruptHandlerEv+0xc8>
   b41b8:	481f      	ldr	r0, [pc, #124]	; (b4238 <_ZN7Encoder16interruptHandlerEv+0x134>)
   b41ba:	f7ff ff7d 	bl	b40b8 <__cxa_guard_acquire>
   b41be:	b128      	cbz	r0, b41cc <_ZN7Encoder16interruptHandlerEv+0xc8>
   b41c0:	f001 fe24 	bl	b5e0c <HAL_Pin_Map>
   b41c4:	6028      	str	r0, [r5, #0]
   b41c6:	481c      	ldr	r0, [pc, #112]	; (b4238 <_ZN7Encoder16interruptHandlerEv+0x134>)
   b41c8:	f7ff ff7b 	bl	b40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b41cc:	682b      	ldr	r3, [r5, #0]
   b41ce:	441f      	add	r7, r3
   b41d0:	787d      	ldrb	r5, [r7, #1]
   b41d2:	f005 051f 	and.w	r5, r5, #31
   b41d6:	ea45 0509 	orr.w	r5, r5, r9
    (void)nrf_gpio_pin_read(nrf_pin);
   b41da:	4628      	mov	r0, r5
   b41dc:	f7ff ff74 	bl	b40c8 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   b41e0:	4628      	mov	r0, r5
   b41e2:	f7ff ff71 	bl	b40c8 <nrf_gpio_pin_read>
		uint8_t newState = state & 3;
   b41e6:	7c23      	ldrb	r3, [r4, #16]
		uint8_t p2val = DIRECT_PIN_READ(pin2_register, pin2_bitmask);
   b41e8:	b2c0      	uxtb	r0, r0
		uint8_t newState = state & 3;
   b41ea:	f003 0303 	and.w	r3, r3, #3
		if (p1val) newState |= 4;
   b41ee:	b10e      	cbz	r6, b41f4 <_ZN7Encoder16interruptHandlerEv+0xf0>
   b41f0:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) newState |= 8;
   b41f4:	b108      	cbz	r0, b41fa <_ZN7Encoder16interruptHandlerEv+0xf6>
   b41f6:	f043 0308 	orr.w	r3, r3, #8
		state = (newState >> 2);
   b41fa:	089a      	lsrs	r2, r3, #2
   b41fc:	3b01      	subs	r3, #1
   b41fe:	7422      	strb	r2, [r4, #16]
		switch (newState) {
   b4200:	2b0d      	cmp	r3, #13
   b4202:	d80b      	bhi.n	b421c <_ZN7Encoder16interruptHandlerEv+0x118>
   b4204:	e8df f003 	tbb	[pc, r3]
   b4208:	0c0f0c07 	.word	0x0c0f0c07
   b420c:	0707120a 	.word	0x0707120a
   b4210:	0f0c0a12 	.word	0x0f0c0a12
   b4214:	070c      	.short	0x070c
			case 1: case 7: case 8: case 14:
				position++;
   b4216:	6963      	ldr	r3, [r4, #20]
   b4218:	3301      	adds	r3, #1
				return;
			case 3: case 12:
				position += 2;
				return;
			case 6: case 9:
				position -= 2;
   b421a:	6163      	str	r3, [r4, #20]
				return;
		}
	}
   b421c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				position--;
   b4220:	6963      	ldr	r3, [r4, #20]
   b4222:	3b01      	subs	r3, #1
   b4224:	e7f9      	b.n	b421a <_ZN7Encoder16interruptHandlerEv+0x116>
				position += 2;
   b4226:	6963      	ldr	r3, [r4, #20]
   b4228:	3302      	adds	r3, #2
   b422a:	e7f6      	b.n	b421a <_ZN7Encoder16interruptHandlerEv+0x116>
				position -= 2;
   b422c:	6963      	ldr	r3, [r4, #20]
   b422e:	3b02      	subs	r3, #2
   b4230:	e7f3      	b.n	b421a <_ZN7Encoder16interruptHandlerEv+0x116>
   b4232:	bf00      	nop
   b4234:	2003e4f4 	.word	0x2003e4f4
   b4238:	2003e4f0 	.word	0x2003e4f0

000b423c <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b423c:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b423e:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b4240:	4606      	mov	r6, r0
   b4242:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b4244:	da0b      	bge.n	b425e <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b4246:	2a0a      	cmp	r2, #10
   b4248:	d109      	bne.n	b425e <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b424a:	212d      	movs	r1, #45	; 0x2d
   b424c:	f002 fb16 	bl	b687c <_ZN5Print5printEc>
            val = -n;
   b4250:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4252:	b2ea      	uxtb	r2, r5
   b4254:	4630      	mov	r0, r6
    }
}
   b4256:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b425a:	f002 bb28 	b.w	b68ae <_ZN5Print11printNumberEmh>
            val = n;
   b425e:	4621      	mov	r1, r4
   b4260:	e7f7      	b.n	b4252 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>

000b4262 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4262:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
   b4264:	6803      	ldr	r3, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   b4266:	685a      	ldr	r2, [r3, #4]
   b4268:	6899      	ldr	r1, [r3, #8]
   b426a:	681b      	ldr	r3, [r3, #0]
   b426c:	1054      	asrs	r4, r2, #1
   b426e:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b4272:	07d2      	lsls	r2, r2, #31
   b4274:	bf48      	it	mi
   b4276:	590a      	ldrmi	r2, [r1, r4]
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b4278:	f85d 4b04 	ldr.w	r4, [sp], #4
   b427c:	bf48      	it	mi
   b427e:	58d3      	ldrmi	r3, [r2, r3]
   b4280:	4718      	bx	r3

000b4282 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	switch (__op)
   b4282:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4284:	b538      	push	{r3, r4, r5, lr}
   b4286:	4604      	mov	r4, r0
	switch (__op)
   b4288:	d102      	bne.n	b4290 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b428a:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b428c:	6023      	str	r3, [r4, #0]
	}
   b428e:	e003      	b.n	b4298 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	  switch (__op)
   b4290:	2a02      	cmp	r2, #2
   b4292:	d003      	beq.n	b429c <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
   b4294:	2a03      	cmp	r2, #3
   b4296:	d00d      	beq.n	b42b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
      }
   b4298:	2000      	movs	r0, #0
   b429a:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b429c:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b429e:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b42a0:	f7ff fef7 	bl	b4092 <_Znwj>
   b42a4:	4603      	mov	r3, r0
   b42a6:	2800      	cmp	r0, #0
   b42a8:	d0f0      	beq.n	b428c <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
   b42aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b42ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b42b2:	e7eb      	b.n	b428c <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b42b4:	6800      	ldr	r0, [r0, #0]
   b42b6:	2800      	cmp	r0, #0
   b42b8:	d0ee      	beq.n	b4298 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
   b42ba:	210c      	movs	r1, #12
   b42bc:	f7ff feed 	bl	b409a <_ZdlPvj>
   b42c0:	e7ea      	b.n	b4298 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	...

000b42c4 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0>:
 * GPIO Interrupts
 */
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
   b42c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b42c6:	b08d      	sub	sp, #52	; 0x34
   b42c8:	ad02      	add	r5, sp, #8
   b42ca:	e885 0006 	stmia.w	r5, {r1, r2}
   b42ce:	4606      	mov	r6, r0

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b42d0:	e895 0003 	ldmia.w	r5, {r0, r1}
   b42d4:	ac05      	add	r4, sp, #20
   b42d6:	e884 0005 	stmia.w	r4, {r0, r2}
   b42da:	461f      	mov	r7, r3
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b42dc:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b42de:	2300      	movs	r3, #0
   b42e0:	930a      	str	r3, [sp, #40]	; 0x28
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b42e2:	f7ff fed6 	bl	b4092 <_Znwj>
   b42e6:	4602      	mov	r2, r0
   b42e8:	b120      	cbz	r0, b42f4 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0+0x30>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b42ea:	e894 0003 	ldmia.w	r4, {r0, r1}
   b42ee:	e882 0003 	stmia.w	r2, {r0, r1}
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b42f2:	6097      	str	r7, [r2, #8]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   b42f4:	4b0b      	ldr	r3, [pc, #44]	; (b4324 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0+0x60>)
   b42f6:	930b      	str	r3, [sp, #44]	; 0x2c
	    _M_manager = &_My_handler::_M_manager;
   b42f8:	4b0b      	ldr	r3, [pc, #44]	; (b4328 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0+0x64>)
   b42fa:	930a      	str	r3, [sp, #40]	; 0x28
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
   b42fc:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4300:	9208      	str	r2, [sp, #32]
   b4302:	9300      	str	r3, [sp, #0]
   b4304:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   b4308:	f99d 304c 	ldrsb.w	r3, [sp, #76]	; 0x4c
   b430c:	a908      	add	r1, sp, #32
   b430e:	4630      	mov	r0, r6
   b4310:	f002 f90a 	bl	b6528 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>
      if (_M_manager)
   b4314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b4316:	b11b      	cbz	r3, b4320 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0+0x5c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4318:	a908      	add	r1, sp, #32
   b431a:	2203      	movs	r2, #3
   b431c:	4608      	mov	r0, r1
   b431e:	4798      	blx	r3
}
   b4320:	b00d      	add	sp, #52	; 0x34
   b4322:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4324:	000b4263 	.word	0x000b4263
   b4328:	000b4283 	.word	0x000b4283

000b432c <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b432c:	b40e      	push	{r1, r2, r3}
   b432e:	b503      	push	{r0, r1, lr}
   b4330:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b4332:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4334:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4338:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b433a:	f002 fad6 	bl	b68ea <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b433e:	b002      	add	sp, #8
   b4340:	f85d eb04 	ldr.w	lr, [sp], #4
   b4344:	b003      	add	sp, #12
   b4346:	4770      	bx	lr

000b4348 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b4348:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b434a:	6984      	ldr	r4, [r0, #24]
   b434c:	4b0a      	ldr	r3, [pc, #40]	; (b4378 <_ZN9TCPClientD1Ev+0x30>)
   b434e:	6003      	str	r3, [r0, #0]
   b4350:	4605      	mov	r5, r0
   b4352:	b17c      	cbz	r4, b4374 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b4354:	6863      	ldr	r3, [r4, #4]
   b4356:	3b01      	subs	r3, #1
   b4358:	6063      	str	r3, [r4, #4]
   b435a:	b95b      	cbnz	r3, b4374 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b435c:	6823      	ldr	r3, [r4, #0]
   b435e:	4620      	mov	r0, r4
   b4360:	689b      	ldr	r3, [r3, #8]
   b4362:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4364:	68a3      	ldr	r3, [r4, #8]
   b4366:	3b01      	subs	r3, #1
   b4368:	60a3      	str	r3, [r4, #8]
   b436a:	b91b      	cbnz	r3, b4374 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b436c:	6823      	ldr	r3, [r4, #0]
   b436e:	4620      	mov	r0, r4
   b4370:	68db      	ldr	r3, [r3, #12]
   b4372:	4798      	blx	r3
   b4374:	4628      	mov	r0, r5
   b4376:	bd38      	pop	{r3, r4, r5, pc}
   b4378:	000b8898 	.word	0x000b8898

000b437c <_ZN9TCPClientD0Ev>:
   b437c:	b510      	push	{r4, lr}
   b437e:	4604      	mov	r4, r0
   b4380:	f7ff ffe2 	bl	b4348 <_ZN9TCPClientD1Ev>
   b4384:	4620      	mov	r0, r4
   b4386:	211c      	movs	r1, #28
   b4388:	f7ff fe87 	bl	b409a <_ZdlPvj>
   b438c:	4620      	mov	r0, r4
   b438e:	bd10      	pop	{r4, pc}

000b4390 <_ZN7EncoderC1Ett>:
	Encoder(pin_t pin1, pin_t pin2) {
   b4390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4394:	460f      	mov	r7, r1
   b4396:	4604      	mov	r4, r0
   b4398:	4616      	mov	r6, r2
   b439a:	b089      	sub	sp, #36	; 0x24
		pinMode(pin1, INPUT_PULLUP);
   b439c:	2102      	movs	r1, #2
   b439e:	4638      	mov	r0, r7
   b43a0:	f003 f9da 	bl	b7758 <pinMode>
		pinMode(pin2, INPUT_PULLUP);
   b43a4:	2102      	movs	r1, #2
   b43a6:	4630      	mov	r0, r6
   b43a8:	f003 f9d6 	bl	b7758 <pinMode>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b43ac:	f8df b158 	ldr.w	fp, [pc, #344]	; b4508 <_ZN7EncoderC1Ett+0x178>
		pin2_bitmask = PIN_TO_BITMASK(pin2);
   b43b0:	60e6      	str	r6, [r4, #12]
		pin1_register = PIN_TO_BASEREG(pin1);
   b43b2:	2300      	movs	r3, #0
		pin2_register = PIN_TO_BASEREG(pin2);
   b43b4:	e9c4 3701 	strd	r3, r7, [r4, #4]
		pin1_register = PIN_TO_BASEREG(pin1);
   b43b8:	6023      	str	r3, [r4, #0]
		position = 0;
   b43ba:	6163      	str	r3, [r4, #20]
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b43bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b43c0:	f001 fd0c 	bl	b5ddc <HAL_Delay_Microseconds>
		if (DIRECT_PIN_READ(pin1_register, pin1_bitmask)) s |= 1;
   b43c4:	f8d4 a008 	ldr.w	sl, [r4, #8]
   b43c8:	f89b 3000 	ldrb.w	r3, [fp]
   b43cc:	4d4d      	ldr	r5, [pc, #308]	; (b4504 <_ZN7EncoderC1Ett+0x174>)
   b43ce:	f3bf 8f5b 	dmb	ish
   b43d2:	f013 0f01 	tst.w	r3, #1
   b43d6:	d109      	bne.n	b43ec <_ZN7EncoderC1Ett+0x5c>
   b43d8:	4658      	mov	r0, fp
   b43da:	f7ff fe6d 	bl	b40b8 <__cxa_guard_acquire>
   b43de:	b128      	cbz	r0, b43ec <_ZN7EncoderC1Ett+0x5c>
   b43e0:	f001 fd14 	bl	b5e0c <HAL_Pin_Map>
   b43e4:	6028      	str	r0, [r5, #0]
   b43e6:	4658      	mov	r0, fp
   b43e8:	f7ff fe6b 	bl	b40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b43ec:	fa1f fa8a 	uxth.w	sl, sl
   b43f0:	682b      	ldr	r3, [r5, #0]
   b43f2:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
   b43f6:	f813 800a 	ldrb.w	r8, [r3, sl]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b43fa:	f89b 3000 	ldrb.w	r3, [fp]
   b43fe:	f3bf 8f5b 	dmb	ish
   b4402:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4404:	ea4f 1948 	mov.w	r9, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4408:	d409      	bmi.n	b441e <_ZN7EncoderC1Ett+0x8e>
   b440a:	483f      	ldr	r0, [pc, #252]	; (b4508 <_ZN7EncoderC1Ett+0x178>)
   b440c:	f7ff fe54 	bl	b40b8 <__cxa_guard_acquire>
   b4410:	b128      	cbz	r0, b441e <_ZN7EncoderC1Ett+0x8e>
   b4412:	f001 fcfb 	bl	b5e0c <HAL_Pin_Map>
   b4416:	6028      	str	r0, [r5, #0]
   b4418:	483b      	ldr	r0, [pc, #236]	; (b4508 <_ZN7EncoderC1Ett+0x178>)
   b441a:	f7ff fe52 	bl	b40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b441e:	682b      	ldr	r3, [r5, #0]
   b4420:	4453      	add	r3, sl
   b4422:	f893 8001 	ldrb.w	r8, [r3, #1]
   b4426:	f008 081f 	and.w	r8, r8, #31
   b442a:	ea48 0809 	orr.w	r8, r8, r9
    (void)nrf_gpio_pin_read(nrf_pin);
   b442e:	4640      	mov	r0, r8
   b4430:	f7ff fe4a 	bl	b40c8 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   b4434:	4640      	mov	r0, r8
   b4436:	f7ff fe47 	bl	b40c8 <nrf_gpio_pin_read>
		if (DIRECT_PIN_READ(pin2_register, pin2_bitmask)) s |= 2;
   b443a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b443e:	f89b 3000 	ldrb.w	r3, [fp]
   b4442:	f3bf 8f5b 	dmb	ish
		uint8_t s = 0;
   b4446:	f1b0 0800 	subs.w	r8, r0, #0
   b444a:	bf18      	it	ne
   b444c:	f04f 0801 	movne.w	r8, #1
   b4450:	07da      	lsls	r2, r3, #31
   b4452:	d409      	bmi.n	b4468 <_ZN7EncoderC1Ett+0xd8>
   b4454:	482c      	ldr	r0, [pc, #176]	; (b4508 <_ZN7EncoderC1Ett+0x178>)
   b4456:	f7ff fe2f 	bl	b40b8 <__cxa_guard_acquire>
   b445a:	b128      	cbz	r0, b4468 <_ZN7EncoderC1Ett+0xd8>
   b445c:	f001 fcd6 	bl	b5e0c <HAL_Pin_Map>
   b4460:	6028      	str	r0, [r5, #0]
   b4462:	4829      	ldr	r0, [pc, #164]	; (b4508 <_ZN7EncoderC1Ett+0x178>)
   b4464:	f7ff fe2d 	bl	b40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4468:	fa1f fa8a 	uxth.w	sl, sl
   b446c:	682b      	ldr	r3, [r5, #0]
   b446e:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
   b4472:	f813 900a 	ldrb.w	r9, [r3, sl]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4476:	f89b 3000 	ldrb.w	r3, [fp]
   b447a:	f3bf 8f5b 	dmb	ish
   b447e:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4480:	ea4f 1949 	mov.w	r9, r9, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4484:	d409      	bmi.n	b449a <_ZN7EncoderC1Ett+0x10a>
   b4486:	4820      	ldr	r0, [pc, #128]	; (b4508 <_ZN7EncoderC1Ett+0x178>)
   b4488:	f7ff fe16 	bl	b40b8 <__cxa_guard_acquire>
   b448c:	b128      	cbz	r0, b449a <_ZN7EncoderC1Ett+0x10a>
   b448e:	f001 fcbd 	bl	b5e0c <HAL_Pin_Map>
   b4492:	6028      	str	r0, [r5, #0]
   b4494:	481c      	ldr	r0, [pc, #112]	; (b4508 <_ZN7EncoderC1Ett+0x178>)
   b4496:	f7ff fe14 	bl	b40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b449a:	682b      	ldr	r3, [r5, #0]
   b449c:	449a      	add	sl, r3
   b449e:	f89a 5001 	ldrb.w	r5, [sl, #1]
   b44a2:	f005 051f 	and.w	r5, r5, #31
   b44a6:	ea45 0509 	orr.w	r5, r5, r9
    (void)nrf_gpio_pin_read(nrf_pin);
   b44aa:	4628      	mov	r0, r5
   b44ac:	f7ff fe0c 	bl	b40c8 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   b44b0:	4628      	mov	r0, r5
   b44b2:	f7ff fe09 	bl	b40c8 <nrf_gpio_pin_read>
		if (DIRECT_PIN_READ(pin2_register, pin2_bitmask)) s |= 2;
   b44b6:	b108      	cbz	r0, b44bc <_ZN7EncoderC1Ett+0x12c>
   b44b8:	f048 0802 	orr.w	r8, r8, #2
		attachInterrupt(pin1, &Encoder::interruptHandler, this, CHANGE);
   b44bc:	f8df 904c 	ldr.w	r9, [pc, #76]	; b450c <_ZN7EncoderC1Ett+0x17c>
		state = s;
   b44c0:	f884 8010 	strb.w	r8, [r4, #16]
		attachInterrupt(pin1, &Encoder::interruptHandler, this, CHANGE);
   b44c4:	2500      	movs	r5, #0
   b44c6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   b44ca:	4623      	mov	r3, r4
   b44cc:	462a      	mov	r2, r5
   b44ce:	4649      	mov	r1, r9
   b44d0:	4638      	mov	r0, r7
   b44d2:	e9cd 5800 	strd	r5, r8, [sp]
   b44d6:	9502      	str	r5, [sp, #8]
   b44d8:	f8cd 9010 	str.w	r9, [sp, #16]
   b44dc:	9505      	str	r5, [sp, #20]
   b44de:	f7ff fef1 	bl	b42c4 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0>
		attachInterrupt(pin2, &Encoder::interruptHandler, this, CHANGE);
   b44e2:	e9cd 9506 	strd	r9, r5, [sp, #24]
   b44e6:	e9cd 8501 	strd	r8, r5, [sp, #4]
   b44ea:	9500      	str	r5, [sp, #0]
   b44ec:	aa08      	add	r2, sp, #32
   b44ee:	4630      	mov	r0, r6
   b44f0:	e912 0006 	ldmdb	r2, {r1, r2}
   b44f4:	4623      	mov	r3, r4
   b44f6:	f7ff fee5 	bl	b42c4 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0>
	}
   b44fa:	4620      	mov	r0, r4
   b44fc:	b009      	add	sp, #36	; 0x24
   b44fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4502:	bf00      	nop
   b4504:	2003e4f4 	.word	0x2003e4f4
   b4508:	2003e4f0 	.word	0x2003e4f0
   b450c:	000b4105 	.word	0x000b4105

000b4510 <_Z6setHueibiii>:
TCPClient HueClient;

bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat);
bool getHue(int lightNum);

bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
   b4510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4514:	b08c      	sub	sp, #48	; 0x30
   b4516:	4605      	mov	r5, r0
   b4518:	460f      	mov	r7, r1

  static int PrevLightNum,PrevOn, PrevColor, PrevBright, PrevSat;

  String command = "";  
   b451a:	4668      	mov	r0, sp
   b451c:	4977      	ldr	r1, [pc, #476]	; (b46fc <_Z6setHueibiii+0x1ec>)
bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
   b451e:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   b4522:	4614      	mov	r4, r2
   b4524:	461e      	mov	r6, r3
  String command = "";  
   b4526:	f002 fb4c 	bl	b6bc2 <_ZN6StringC1EPK19__FlashStringHelper>

  if((lightNum==PrevLightNum)&&(HueOn==PrevOn)&&(HueColor==PrevColor)&&(HueBright==PrevBright)&&(HueSat==PrevSat)) {
   b452a:	f8df e228 	ldr.w	lr, [pc, #552]	; b4754 <_Z6setHueibiii+0x244>
   b452e:	4974      	ldr	r1, [pc, #464]	; (b4700 <_Z6setHueibiii+0x1f0>)
   b4530:	f8de 3000 	ldr.w	r3, [lr]
   b4534:	4873      	ldr	r0, [pc, #460]	; (b4704 <_Z6setHueibiii+0x1f4>)
   b4536:	4a74      	ldr	r2, [pc, #464]	; (b4708 <_Z6setHueibiii+0x1f8>)
   b4538:	f8df c21c 	ldr.w	ip, [pc, #540]	; b4758 <_Z6setHueibiii+0x248>
   b453c:	42ab      	cmp	r3, r5
   b453e:	d119      	bne.n	b4574 <_Z6setHueibiii+0x64>
   b4540:	680b      	ldr	r3, [r1, #0]
   b4542:	42bb      	cmp	r3, r7
   b4544:	d116      	bne.n	b4574 <_Z6setHueibiii+0x64>
   b4546:	6803      	ldr	r3, [r0, #0]
   b4548:	42a3      	cmp	r3, r4
   b454a:	d113      	bne.n	b4574 <_Z6setHueibiii+0x64>
   b454c:	6813      	ldr	r3, [r2, #0]
   b454e:	42b3      	cmp	r3, r6
   b4550:	d110      	bne.n	b4574 <_Z6setHueibiii+0x64>
   b4552:	f8dc 3000 	ldr.w	r3, [ip]
   b4556:	4543      	cmp	r3, r8
   b4558:	d10c      	bne.n	b4574 <_Z6setHueibiii+0x64>
    Serial.printf("No Change - Cancelling CMD\n");
   b455a:	f002 ff73 	bl	b7444 <_Z16_fetch_usbserialv>
   b455e:	496b      	ldr	r1, [pc, #428]	; (b470c <_Z6setHueibiii+0x1fc>)
   b4560:	f7ff fee4 	bl	b432c <_ZN5Print6printfEPKcz>
    return false;
   b4564:	2400      	movs	r4, #0
  String command = "";  
   b4566:	4668      	mov	r0, sp
   b4568:	f002 fae0 	bl	b6b2c <_ZN6StringD1Ev>
    HueClient.stop();
    return true;  // command executed
  }
  else
    return false;  // command failed
}
   b456c:	4620      	mov	r0, r4
   b456e:	b00c      	add	sp, #48	; 0x30
   b4570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  PrevLightNum = lightNum;
   b4574:	f8ce 5000 	str.w	r5, [lr]
  PrevOn = HueOn;
   b4578:	600f      	str	r7, [r1, #0]
  PrevColor=HueColor;
   b457a:	6004      	str	r4, [r0, #0]
  PrevBright=HueBright;
   b457c:	6016      	str	r6, [r2, #0]
  PrevSat=HueSat;
   b457e:	f8cc 8000 	str.w	r8, [ip]
  if(HueOn == true) {
   b4582:	2f00      	cmp	r7, #0
   b4584:	f000 80b5 	beq.w	b46f2 <_Z6setHueibiii+0x1e2>
    command = "{\"on\":true,\"sat\":";
   b4588:	4961      	ldr	r1, [pc, #388]	; (b4710 <_Z6setHueibiii+0x200>)
   b458a:	4668      	mov	r0, sp
   b458c:	f002 fb47 	bl	b6c1e <_ZN6StringaSEPKc>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b4590:	4669      	mov	r1, sp
   b4592:	a808      	add	r0, sp, #32
   b4594:	f002 fb38 	bl	b6c08 <_ZN6StringC1ERKS_>
    command = command + String(HueSat) + ",\"bri\":";
   b4598:	220a      	movs	r2, #10
   b459a:	4641      	mov	r1, r8
   b459c:	a804      	add	r0, sp, #16
   b459e:	f002 fb50 	bl	b6c42 <_ZN6StringC1Eih>
   b45a2:	a904      	add	r1, sp, #16
   b45a4:	a808      	add	r0, sp, #32
   b45a6:	f002 fb94 	bl	b6cd2 <_ZplRK15StringSumHelperRK6String>
   b45aa:	495a      	ldr	r1, [pc, #360]	; (b4714 <_Z6setHueibiii+0x204>)
   b45ac:	f002 fb9d 	bl	b6cea <_ZplRK15StringSumHelperPKc>
   b45b0:	4601      	mov	r1, r0
   b45b2:	4668      	mov	r0, sp
   b45b4:	f002 fb19 	bl	b6bea <_ZN6StringaSERKS_>
   b45b8:	a804      	add	r0, sp, #16
   b45ba:	f002 fab7 	bl	b6b2c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b45be:	a808      	add	r0, sp, #32
   b45c0:	f002 fab4 	bl	b6b2c <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b45c4:	4669      	mov	r1, sp
   b45c6:	a808      	add	r0, sp, #32
   b45c8:	f002 fb1e 	bl	b6c08 <_ZN6StringC1ERKS_>
    command = command + String(HueBright) + ",\"hue\":";
   b45cc:	220a      	movs	r2, #10
   b45ce:	4631      	mov	r1, r6
   b45d0:	a804      	add	r0, sp, #16
   b45d2:	f002 fb36 	bl	b6c42 <_ZN6StringC1Eih>
   b45d6:	a904      	add	r1, sp, #16
   b45d8:	a808      	add	r0, sp, #32
   b45da:	f002 fb7a 	bl	b6cd2 <_ZplRK15StringSumHelperRK6String>
   b45de:	494e      	ldr	r1, [pc, #312]	; (b4718 <_Z6setHueibiii+0x208>)
   b45e0:	f002 fb83 	bl	b6cea <_ZplRK15StringSumHelperPKc>
   b45e4:	4601      	mov	r1, r0
   b45e6:	4668      	mov	r0, sp
   b45e8:	f002 faff 	bl	b6bea <_ZN6StringaSERKS_>
   b45ec:	a804      	add	r0, sp, #16
   b45ee:	f002 fa9d 	bl	b6b2c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b45f2:	a808      	add	r0, sp, #32
   b45f4:	f002 fa9a 	bl	b6b2c <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b45f8:	4669      	mov	r1, sp
   b45fa:	a808      	add	r0, sp, #32
   b45fc:	f002 fb04 	bl	b6c08 <_ZN6StringC1ERKS_>
    command = command + String(HueColor) + "}";
   b4600:	220a      	movs	r2, #10
   b4602:	4621      	mov	r1, r4
   b4604:	a804      	add	r0, sp, #16
   b4606:	f002 fb1c 	bl	b6c42 <_ZN6StringC1Eih>
   b460a:	a904      	add	r1, sp, #16
   b460c:	a808      	add	r0, sp, #32
   b460e:	f002 fb60 	bl	b6cd2 <_ZplRK15StringSumHelperRK6String>
   b4612:	4942      	ldr	r1, [pc, #264]	; (b471c <_Z6setHueibiii+0x20c>)
   b4614:	f002 fb69 	bl	b6cea <_ZplRK15StringSumHelperPKc>
   b4618:	4601      	mov	r1, r0
   b461a:	4668      	mov	r0, sp
   b461c:	f002 fae5 	bl	b6bea <_ZN6StringaSERKS_>
   b4620:	a804      	add	r0, sp, #16
   b4622:	f002 fa83 	bl	b6b2c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4626:	a808      	add	r0, sp, #32
   b4628:	f002 fa80 	bl	b6b2c <_ZN6StringD1Ev>
  if (HueClient.connect(hueHubIP, hueHubPort)) {
   b462c:	493c      	ldr	r1, [pc, #240]	; (b4720 <_Z6setHueibiii+0x210>)
   b462e:	483d      	ldr	r0, [pc, #244]	; (b4724 <_Z6setHueibiii+0x214>)
   b4630:	2300      	movs	r3, #0
   b4632:	2250      	movs	r2, #80	; 0x50
   b4634:	f002 fc38 	bl	b6ea8 <_ZN9TCPClient7connectEPKctm>
   b4638:	4604      	mov	r4, r0
   b463a:	2800      	cmp	r0, #0
   b463c:	d093      	beq.n	b4566 <_Z6setHueibiii+0x56>
      Serial.println("Sending Command to Hue");
   b463e:	f002 ff01 	bl	b7444 <_Z16_fetch_usbserialv>
   b4642:	4939      	ldr	r1, [pc, #228]	; (b4728 <_Z6setHueibiii+0x218>)
   b4644:	f002 f929 	bl	b689a <_ZN5Print7printlnEPKc>
      Serial.println(command);
   b4648:	f002 fefc 	bl	b7444 <_Z16_fetch_usbserialv>
   b464c:	9900      	ldr	r1, [sp, #0]
   b464e:	f002 f924 	bl	b689a <_ZN5Print7printlnEPKc>
      HueClient.print("PUT /api/");
   b4652:	4936      	ldr	r1, [pc, #216]	; (b472c <_Z6setHueibiii+0x21c>)
   b4654:	4833      	ldr	r0, [pc, #204]	; (b4724 <_Z6setHueibiii+0x214>)
   b4656:	f002 f90d 	bl	b6874 <_ZN5Print5printEPKc>
      HueClient.print(hueUsername);
   b465a:	4935      	ldr	r1, [pc, #212]	; (b4730 <_Z6setHueibiii+0x220>)
   b465c:	4831      	ldr	r0, [pc, #196]	; (b4724 <_Z6setHueibiii+0x214>)
   b465e:	f002 f909 	bl	b6874 <_ZN5Print5printEPKc>
      HueClient.print("/lights/");
   b4662:	4934      	ldr	r1, [pc, #208]	; (b4734 <_Z6setHueibiii+0x224>)
   b4664:	482f      	ldr	r0, [pc, #188]	; (b4724 <_Z6setHueibiii+0x214>)
   b4666:	f002 f905 	bl	b6874 <_ZN5Print5printEPKc>
size_t Print::print(T n, int base)
   b466a:	220a      	movs	r2, #10
   b466c:	482d      	ldr	r0, [pc, #180]	; (b4724 <_Z6setHueibiii+0x214>)
   b466e:	4629      	mov	r1, r5
   b4670:	f7ff fde4 	bl	b423c <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
      HueClient.println("/state HTTP/1.1");
   b4674:	4930      	ldr	r1, [pc, #192]	; (b4738 <_Z6setHueibiii+0x228>)
   b4676:	482b      	ldr	r0, [pc, #172]	; (b4724 <_Z6setHueibiii+0x214>)
   b4678:	f002 f90f 	bl	b689a <_ZN5Print7printlnEPKc>
      HueClient.println("keep-alive");
   b467c:	492f      	ldr	r1, [pc, #188]	; (b473c <_Z6setHueibiii+0x22c>)
   b467e:	4829      	ldr	r0, [pc, #164]	; (b4724 <_Z6setHueibiii+0x214>)
   b4680:	f002 f90b 	bl	b689a <_ZN5Print7printlnEPKc>
      HueClient.print("Host: ");
   b4684:	492e      	ldr	r1, [pc, #184]	; (b4740 <_Z6setHueibiii+0x230>)
   b4686:	4827      	ldr	r0, [pc, #156]	; (b4724 <_Z6setHueibiii+0x214>)
   b4688:	f002 f8f4 	bl	b6874 <_ZN5Print5printEPKc>
      HueClient.println(hueHubIP);
   b468c:	4924      	ldr	r1, [pc, #144]	; (b4720 <_Z6setHueibiii+0x210>)
   b468e:	4825      	ldr	r0, [pc, #148]	; (b4724 <_Z6setHueibiii+0x214>)
   b4690:	f002 f903 	bl	b689a <_ZN5Print7printlnEPKc>
      HueClient.print("Content-Length: ");
   b4694:	492b      	ldr	r1, [pc, #172]	; (b4744 <_Z6setHueibiii+0x234>)
   b4696:	4823      	ldr	r0, [pc, #140]	; (b4724 <_Z6setHueibiii+0x214>)
   b4698:	f002 f8ec 	bl	b6874 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b469c:	220a      	movs	r2, #10
   b469e:	9902      	ldr	r1, [sp, #8]
   b46a0:	4820      	ldr	r0, [pc, #128]	; (b4724 <_Z6setHueibiii+0x214>)
   b46a2:	f002 f904 	bl	b68ae <_ZN5Print11printNumberEmh>
        n += println();
   b46a6:	481f      	ldr	r0, [pc, #124]	; (b4724 <_Z6setHueibiii+0x214>)
   b46a8:	f002 f8eb 	bl	b6882 <_ZN5Print7printlnEv>
      HueClient.println("Content-Type: text/plain;charset=UTF-8");
   b46ac:	4926      	ldr	r1, [pc, #152]	; (b4748 <_Z6setHueibiii+0x238>)
   b46ae:	481d      	ldr	r0, [pc, #116]	; (b4724 <_Z6setHueibiii+0x214>)
   b46b0:	f002 f8f3 	bl	b689a <_ZN5Print7printlnEPKc>
      HueClient.println();  // blank line before body
   b46b4:	481b      	ldr	r0, [pc, #108]	; (b4724 <_Z6setHueibiii+0x214>)
   b46b6:	f002 f8e4 	bl	b6882 <_ZN5Print7printlnEv>
      HueClient.println(command);  // Hue command
   b46ba:	9900      	ldr	r1, [sp, #0]
   b46bc:	4819      	ldr	r0, [pc, #100]	; (b4724 <_Z6setHueibiii+0x214>)
   b46be:	f002 f8ec 	bl	b689a <_ZN5Print7printlnEPKc>
      Serial.println("From Hue");
   b46c2:	f002 febf 	bl	b7444 <_Z16_fetch_usbserialv>
   b46c6:	4921      	ldr	r1, [pc, #132]	; (b474c <_Z6setHueibiii+0x23c>)
   b46c8:	f002 f8e7 	bl	b689a <_ZN5Print7printlnEPKc>
      Serial.println(HueClient.readString()); // To close connection
   b46cc:	f002 feba 	bl	b7444 <_Z16_fetch_usbserialv>
   b46d0:	4914      	ldr	r1, [pc, #80]	; (b4724 <_Z6setHueibiii+0x214>)
   b46d2:	4604      	mov	r4, r0
   b46d4:	a808      	add	r0, sp, #32
   b46d6:	f002 fa15 	bl	b6b04 <_ZN6Stream10readStringEv>
   b46da:	9908      	ldr	r1, [sp, #32]
   b46dc:	4620      	mov	r0, r4
   b46de:	f002 f8dc 	bl	b689a <_ZN5Print7printlnEPKc>
   b46e2:	a808      	add	r0, sp, #32
   b46e4:	f002 fa22 	bl	b6b2c <_ZN6StringD1Ev>
    HueClient.stop();
   b46e8:	480e      	ldr	r0, [pc, #56]	; (b4724 <_Z6setHueibiii+0x214>)
   b46ea:	f002 fd93 	bl	b7214 <_ZN9TCPClient4stopEv>
    return true;  // command executed
   b46ee:	2401      	movs	r4, #1
   b46f0:	e739      	b.n	b4566 <_Z6setHueibiii+0x56>
    command = "{\"on\":false}";
   b46f2:	4917      	ldr	r1, [pc, #92]	; (b4750 <_Z6setHueibiii+0x240>)
   b46f4:	4668      	mov	r0, sp
   b46f6:	f002 fa92 	bl	b6c1e <_ZN6StringaSEPKc>
   b46fa:	e797      	b.n	b462c <_Z6setHueibiii+0x11c>
   b46fc:	000b8118 	.word	0x000b8118
   b4700:	2003e568 	.word	0x2003e568
   b4704:	2003e570 	.word	0x2003e570
   b4708:	2003e560 	.word	0x2003e560
   b470c:	000b7d25 	.word	0x000b7d25
   b4710:	000b7d41 	.word	0x000b7d41
   b4714:	000b7d53 	.word	0x000b7d53
   b4718:	000b7d5b 	.word	0x000b7d5b
   b471c:	000b7d6e 	.word	0x000b7d6e
   b4720:	000b8209 	.word	0x000b8209
   b4724:	2003e4f8 	.word	0x2003e4f8
   b4728:	000b7d70 	.word	0x000b7d70
   b472c:	000b7d87 	.word	0x000b7d87
   b4730:	000b81e0 	.word	0x000b81e0
   b4734:	000b7d91 	.word	0x000b7d91
   b4738:	000b7d9a 	.word	0x000b7d9a
   b473c:	000b7fc3 	.word	0x000b7fc3
   b4740:	000b7daa 	.word	0x000b7daa
   b4744:	000b7db1 	.word	0x000b7db1
   b4748:	000b7dc2 	.word	0x000b7dc2
   b474c:	000b7de9 	.word	0x000b7de9
   b4750:	000b7d63 	.word	0x000b7d63
   b4754:	2003e564 	.word	0x2003e564
   b4758:	2003e56c 	.word	0x2003e56c

000b475c <_Z8switchONi>:
TCPClient WemoClient;

int wemoPort = 49153;
const char *wemoIP[5] = {"192.168.1.30","192.168.1.31","192.168.1.32","192.168.1.33","192.168.1.34"};

void switchON(int wemo) {
   b475c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  
  String data1;
   b475e:	4925      	ldr	r1, [pc, #148]	; (b47f4 <_Z8switchONi+0x98>)
void switchON(int wemo) {
   b4760:	4604      	mov	r4, r0
  String data1;
   b4762:	4668      	mov	r0, sp
   b4764:	f002 fa2d 	bl	b6bc2 <_ZN6StringC1EPK19__FlashStringHelper>
  
  Serial.printf("SwitchON %i \n",wemo);
   b4768:	f002 fe6c 	bl	b7444 <_Z16_fetch_usbserialv>
   b476c:	4622      	mov	r2, r4
   b476e:	4922      	ldr	r1, [pc, #136]	; (b47f8 <_Z8switchONi+0x9c>)
   b4770:	f7ff fddc 	bl	b432c <_ZN5Print6printfEPKcz>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b4774:	4921      	ldr	r1, [pc, #132]	; (b47fc <_Z8switchONi+0xa0>)
   b4776:	4668      	mov	r0, sp
   b4778:	f002 fa8d 	bl	b6c96 <_ZN6String6concatEPKc>
  data1+="<?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"><s:Body><u:SetBinaryState xmlns:u=\"urn:Belkin:service:basicevent:1\"><BinaryState>1</BinaryState></u:SetBinaryState></s:Body></s:Envelope>"; // Use HTML encoding for comma's
  if (WemoClient.connect(wemoIP[wemo],wemoPort)) {
   b477c:	4a20      	ldr	r2, [pc, #128]	; (b4800 <_Z8switchONi+0xa4>)
   b477e:	4921      	ldr	r1, [pc, #132]	; (b4804 <_Z8switchONi+0xa8>)
   b4780:	8812      	ldrh	r2, [r2, #0]
   b4782:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
   b4786:	4820      	ldr	r0, [pc, #128]	; (b4808 <_Z8switchONi+0xac>)
   b4788:	2300      	movs	r3, #0
   b478a:	f002 fb8d 	bl	b6ea8 <_ZN9TCPClient7connectEPKctm>
   b478e:	b328      	cbz	r0, b47dc <_Z8switchONi+0x80>
        WemoClient.println("POST /upnp/control/basicevent1 HTTP/1.1");
   b4790:	491e      	ldr	r1, [pc, #120]	; (b480c <_Z8switchONi+0xb0>)
   b4792:	481d      	ldr	r0, [pc, #116]	; (b4808 <_Z8switchONi+0xac>)
   b4794:	f002 f881 	bl	b689a <_ZN5Print7printlnEPKc>
        WemoClient.println("Content-Type: text/xml; charset=utf-8");
   b4798:	491d      	ldr	r1, [pc, #116]	; (b4810 <_Z8switchONi+0xb4>)
   b479a:	481b      	ldr	r0, [pc, #108]	; (b4808 <_Z8switchONi+0xac>)
   b479c:	f002 f87d 	bl	b689a <_ZN5Print7printlnEPKc>
        WemoClient.println("SOAPACTION: \"urn:Belkin:service:basicevent:1#SetBinaryState\"");
   b47a0:	491c      	ldr	r1, [pc, #112]	; (b4814 <_Z8switchONi+0xb8>)
   b47a2:	4819      	ldr	r0, [pc, #100]	; (b4808 <_Z8switchONi+0xac>)
   b47a4:	f002 f879 	bl	b689a <_ZN5Print7printlnEPKc>
        WemoClient.println("Connection: keep-alive");
   b47a8:	491b      	ldr	r1, [pc, #108]	; (b4818 <_Z8switchONi+0xbc>)
   b47aa:	4817      	ldr	r0, [pc, #92]	; (b4808 <_Z8switchONi+0xac>)
   b47ac:	f002 f875 	bl	b689a <_ZN5Print7printlnEPKc>
        WemoClient.print("Content-Length: ");
   b47b0:	491a      	ldr	r1, [pc, #104]	; (b481c <_Z8switchONi+0xc0>)
   b47b2:	4815      	ldr	r0, [pc, #84]	; (b4808 <_Z8switchONi+0xac>)
   b47b4:	f002 f85e 	bl	b6874 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b47b8:	9902      	ldr	r1, [sp, #8]
   b47ba:	4813      	ldr	r0, [pc, #76]	; (b4808 <_Z8switchONi+0xac>)
   b47bc:	220a      	movs	r2, #10
   b47be:	f002 f876 	bl	b68ae <_ZN5Print11printNumberEmh>
        n += println();
   b47c2:	4811      	ldr	r0, [pc, #68]	; (b4808 <_Z8switchONi+0xac>)
   b47c4:	f002 f85d 	bl	b6882 <_ZN5Print7printlnEv>
        WemoClient.println(data1.length());
        WemoClient.println();
   b47c8:	480f      	ldr	r0, [pc, #60]	; (b4808 <_Z8switchONi+0xac>)
   b47ca:	f002 f85a 	bl	b6882 <_ZN5Print7printlnEv>
        WemoClient.print(data1);
   b47ce:	9900      	ldr	r1, [sp, #0]
   b47d0:	480d      	ldr	r0, [pc, #52]	; (b4808 <_Z8switchONi+0xac>)
   b47d2:	f002 f84f 	bl	b6874 <_ZN5Print5printEPKc>
        WemoClient.println();
   b47d6:	480c      	ldr	r0, [pc, #48]	; (b4808 <_Z8switchONi+0xac>)
   b47d8:	f002 f853 	bl	b6882 <_ZN5Print7printlnEv>
    }

  if (WemoClient.connected()) {
   b47dc:	480a      	ldr	r0, [pc, #40]	; (b4808 <_Z8switchONi+0xac>)
   b47de:	f002 fbe1 	bl	b6fa4 <_ZN9TCPClient9connectedEv>
   b47e2:	b110      	cbz	r0, b47ea <_Z8switchONi+0x8e>
     WemoClient.stop();
   b47e4:	4808      	ldr	r0, [pc, #32]	; (b4808 <_Z8switchONi+0xac>)
   b47e6:	f002 fd15 	bl	b7214 <_ZN9TCPClient4stopEv>
  String data1;
   b47ea:	4668      	mov	r0, sp
   b47ec:	f002 f99e 	bl	b6b2c <_ZN6StringD1Ev>
  }
}
   b47f0:	b004      	add	sp, #16
   b47f2:	bd10      	pop	{r4, pc}
   b47f4:	000b8118 	.word	0x000b8118
   b47f8:	000b7df2 	.word	0x000b7df2
   b47fc:	000b7e00 	.word	0x000b7e00
   b4800:	2003e070 	.word	0x2003e070
   b4804:	2003e05c 	.word	0x2003e05c
   b4808:	2003e544 	.word	0x2003e544
   b480c:	000b7f2c 	.word	0x000b7f2c
   b4810:	000b7f54 	.word	0x000b7f54
   b4814:	000b7f7a 	.word	0x000b7f7a
   b4818:	000b7fb7 	.word	0x000b7fb7
   b481c:	000b7db1 	.word	0x000b7db1

000b4820 <_Z9switchOFFi>:

void switchOFF(int wemo){
   b4820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String data1;
   b4822:	4925      	ldr	r1, [pc, #148]	; (b48b8 <_Z9switchOFFi+0x98>)
void switchOFF(int wemo){
   b4824:	4604      	mov	r4, r0
  String data1;
   b4826:	4668      	mov	r0, sp
   b4828:	f002 f9cb 	bl	b6bc2 <_ZN6StringC1EPK19__FlashStringHelper>
  
  Serial.printf("switchOFF %i \n",wemo);
   b482c:	f002 fe0a 	bl	b7444 <_Z16_fetch_usbserialv>
   b4830:	4622      	mov	r2, r4
   b4832:	4922      	ldr	r1, [pc, #136]	; (b48bc <_Z9switchOFFi+0x9c>)
   b4834:	f7ff fd7a 	bl	b432c <_ZN5Print6printfEPKcz>
   b4838:	4921      	ldr	r1, [pc, #132]	; (b48c0 <_Z9switchOFFi+0xa0>)
   b483a:	4668      	mov	r0, sp
   b483c:	f002 fa2b 	bl	b6c96 <_ZN6String6concatEPKc>
  data1+="<?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"><s:Body><u:SetBinaryState xmlns:u=\"urn:Belkin:service:basicevent:1\"><BinaryState>0</BinaryState></u:SetBinaryState></s:Body></s:Envelope>"; // Use HTML encoding for comma's
  if (WemoClient.connect(wemoIP[wemo],wemoPort)) {
   b4840:	4a20      	ldr	r2, [pc, #128]	; (b48c4 <_Z9switchOFFi+0xa4>)
   b4842:	4921      	ldr	r1, [pc, #132]	; (b48c8 <_Z9switchOFFi+0xa8>)
   b4844:	8812      	ldrh	r2, [r2, #0]
   b4846:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
   b484a:	4820      	ldr	r0, [pc, #128]	; (b48cc <_Z9switchOFFi+0xac>)
   b484c:	2300      	movs	r3, #0
   b484e:	f002 fb2b 	bl	b6ea8 <_ZN9TCPClient7connectEPKctm>
   b4852:	b328      	cbz	r0, b48a0 <_Z9switchOFFi+0x80>
        WemoClient.println("POST /upnp/control/basicevent1 HTTP/1.1");
   b4854:	491e      	ldr	r1, [pc, #120]	; (b48d0 <_Z9switchOFFi+0xb0>)
   b4856:	481d      	ldr	r0, [pc, #116]	; (b48cc <_Z9switchOFFi+0xac>)
   b4858:	f002 f81f 	bl	b689a <_ZN5Print7printlnEPKc>
        WemoClient.println("Content-Type: text/xml; charset=utf-8");
   b485c:	491d      	ldr	r1, [pc, #116]	; (b48d4 <_Z9switchOFFi+0xb4>)
   b485e:	481b      	ldr	r0, [pc, #108]	; (b48cc <_Z9switchOFFi+0xac>)
   b4860:	f002 f81b 	bl	b689a <_ZN5Print7printlnEPKc>
        WemoClient.println("SOAPACTION: \"urn:Belkin:service:basicevent:1#SetBinaryState\"");
   b4864:	491c      	ldr	r1, [pc, #112]	; (b48d8 <_Z9switchOFFi+0xb8>)
   b4866:	4819      	ldr	r0, [pc, #100]	; (b48cc <_Z9switchOFFi+0xac>)
   b4868:	f002 f817 	bl	b689a <_ZN5Print7printlnEPKc>
        WemoClient.println("Connection: keep-alive");
   b486c:	491b      	ldr	r1, [pc, #108]	; (b48dc <_Z9switchOFFi+0xbc>)
   b486e:	4817      	ldr	r0, [pc, #92]	; (b48cc <_Z9switchOFFi+0xac>)
   b4870:	f002 f813 	bl	b689a <_ZN5Print7printlnEPKc>
        WemoClient.print("Content-Length: ");
   b4874:	491a      	ldr	r1, [pc, #104]	; (b48e0 <_Z9switchOFFi+0xc0>)
   b4876:	4815      	ldr	r0, [pc, #84]	; (b48cc <_Z9switchOFFi+0xac>)
   b4878:	f001 fffc 	bl	b6874 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b487c:	9902      	ldr	r1, [sp, #8]
   b487e:	4813      	ldr	r0, [pc, #76]	; (b48cc <_Z9switchOFFi+0xac>)
   b4880:	220a      	movs	r2, #10
   b4882:	f002 f814 	bl	b68ae <_ZN5Print11printNumberEmh>
        n += println();
   b4886:	4811      	ldr	r0, [pc, #68]	; (b48cc <_Z9switchOFFi+0xac>)
   b4888:	f001 fffb 	bl	b6882 <_ZN5Print7printlnEv>
        WemoClient.println(data1.length());
        WemoClient.println();
   b488c:	480f      	ldr	r0, [pc, #60]	; (b48cc <_Z9switchOFFi+0xac>)
   b488e:	f001 fff8 	bl	b6882 <_ZN5Print7printlnEv>
        WemoClient.print(data1);
   b4892:	9900      	ldr	r1, [sp, #0]
   b4894:	480d      	ldr	r0, [pc, #52]	; (b48cc <_Z9switchOFFi+0xac>)
   b4896:	f001 ffed 	bl	b6874 <_ZN5Print5printEPKc>
        WemoClient.println();
   b489a:	480c      	ldr	r0, [pc, #48]	; (b48cc <_Z9switchOFFi+0xac>)
   b489c:	f001 fff1 	bl	b6882 <_ZN5Print7printlnEv>
    }
   
  if (WemoClient.connected()) {
   b48a0:	480a      	ldr	r0, [pc, #40]	; (b48cc <_Z9switchOFFi+0xac>)
   b48a2:	f002 fb7f 	bl	b6fa4 <_ZN9TCPClient9connectedEv>
   b48a6:	b110      	cbz	r0, b48ae <_Z9switchOFFi+0x8e>
     WemoClient.stop();
   b48a8:	4808      	ldr	r0, [pc, #32]	; (b48cc <_Z9switchOFFi+0xac>)
   b48aa:	f002 fcb3 	bl	b7214 <_ZN9TCPClient4stopEv>
  String data1;
   b48ae:	4668      	mov	r0, sp
   b48b0:	f002 f93c 	bl	b6b2c <_ZN6StringD1Ev>
  }
}
   b48b4:	b004      	add	sp, #16
   b48b6:	bd10      	pop	{r4, pc}
   b48b8:	000b8118 	.word	0x000b8118
   b48bc:	000b7fce 	.word	0x000b7fce
   b48c0:	000b7fdd 	.word	0x000b7fdd
   b48c4:	2003e070 	.word	0x2003e070
   b48c8:	2003e05c 	.word	0x2003e05c
   b48cc:	2003e544 	.word	0x2003e544
   b48d0:	000b7f2c 	.word	0x000b7f2c
   b48d4:	000b7f54 	.word	0x000b7f54
   b48d8:	000b7f7a 	.word	0x000b7f7a
   b48dc:	000b7fb7 	.word	0x000b7fb7
   b48e0:	000b7db1 	.word	0x000b7db1

000b48e4 <_ZN6Button9isClickedEv>:

    bool isPressed() {
      return digitalRead(_buttonPin);
    }

    bool isClicked() {
   b48e4:	b510      	push	{r4, lr}
   b48e6:	4604      	mov	r4, r0
      bool _buttonState, _clicked;

      _buttonState = digitalRead(_buttonPin);
   b48e8:	8800      	ldrh	r0, [r0, #0]
   b48ea:	f002 ff5f 	bl	b77ac <digitalRead>
      if(_buttonState != _prevButtonState) {
   b48ee:	6862      	ldr	r2, [r4, #4]
      _buttonState = digitalRead(_buttonPin);
   b48f0:	1e03      	subs	r3, r0, #0
   b48f2:	bf18      	it	ne
   b48f4:	2301      	movne	r3, #1
        _clicked = _buttonState;
      }
      else {
        _clicked = false;
      }
      _prevButtonState=_buttonState;
   b48f6:	6063      	str	r3, [r4, #4]
      return _clicked;
    }
   b48f8:	4293      	cmp	r3, r2
   b48fa:	bf14      	ite	ne
   b48fc:	4618      	movne	r0, r3
   b48fe:	2000      	moveq	r0, #0
   b4900:	bd10      	pop	{r4, pc}
	...

000b4904 <setup>:

Encoder myEnc(PINA,PINB);

SYSTEM_MODE(MANUAL);

void setup() {
   b4904:	b530      	push	{r4, r5, lr}
    display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b4906:	223c      	movs	r2, #60	; 0x3c
void setup() {
   b4908:	b095      	sub	sp, #84	; 0x54
    display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b490a:	2102      	movs	r1, #2
   b490c:	482c      	ldr	r0, [pc, #176]	; (b49c0 <setup+0xbc>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b490e:	4c2d      	ldr	r4, [pc, #180]	; (b49c4 <setup+0xc0>)
    WiFi.on();
    WiFi.setCredentials("IoTNetwork");
    WiFi.connect();

    while(WiFi.connecting()) {
        Serial.printf(",");
   b4910:	4d2d      	ldr	r5, [pc, #180]	; (b49c8 <setup+0xc4>)
    display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b4912:	f000 ff01 	bl	b5718 <_ZN16Adafruit_SSD13065beginEhh>
    display.clearDisplay();
   b4916:	482a      	ldr	r0, [pc, #168]	; (b49c0 <setup+0xbc>)
   b4918:	f000 fe32 	bl	b5580 <_ZN16Adafruit_SSD130612clearDisplayEv>
    pixel.begin();
   b491c:	482b      	ldr	r0, [pc, #172]	; (b49cc <setup+0xc8>)
   b491e:	f000 fff0 	bl	b5902 <_ZN17Adafruit_NeoPixel5beginEv>
    pixel.show();
   b4922:	482a      	ldr	r0, [pc, #168]	; (b49cc <setup+0xc8>)
   b4924:	f001 f826 	bl	b5974 <_ZN17Adafruit_NeoPixel4showEv>
    pixel.setBrightness(10);
   b4928:	4828      	ldr	r0, [pc, #160]	; (b49cc <setup+0xc8>)
   b492a:	210a      	movs	r1, #10
   b492c:	f001 fa11 	bl	b5d52 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
    pinMode(SPKRPIN, OUTPUT);
   b4930:	2101      	movs	r1, #1
   b4932:	2012      	movs	r0, #18
   b4934:	f002 ff10 	bl	b7758 <pinMode>
    pinMode(PIXPIN, OUTPUT);
   b4938:	2101      	movs	r1, #1
   b493a:	2008      	movs	r0, #8
   b493c:	f002 ff0c 	bl	b7758 <pinMode>
    pinMode(ENBPIN, INPUT_PULLDOWN);
   b4940:	2103      	movs	r1, #3
   b4942:	200c      	movs	r0, #12
   b4944:	f002 ff08 	bl	b7758 <pinMode>
    Serial.begin(9600);
   b4948:	f002 fd7c 	bl	b7444 <_Z16_fetch_usbserialv>
   b494c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4950:	f002 fd6c 	bl	b742c <_ZN9USBSerial5beginEl>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b4954:	2300      	movs	r3, #0
   b4956:	461a      	mov	r2, r3
   b4958:	4619      	mov	r1, r3
   b495a:	6860      	ldr	r0, [r4, #4]
   b495c:	f001 fc72 	bl	b6244 <network_on>

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   b4960:	2238      	movs	r2, #56	; 0x38
   b4962:	2100      	movs	r1, #0
   b4964:	a806      	add	r0, sp, #24
   b4966:	f003 f901 	bl	b7b6c <memset>
        creds.size = sizeof(creds);
   b496a:	234c      	movs	r3, #76	; 0x4c
   b496c:	9301      	str	r3, [sp, #4]
        creds.ssid = ssid;
   b496e:	4b18      	ldr	r3, [pc, #96]	; (b49d0 <setup+0xcc>)
   b4970:	9302      	str	r3, [sp, #8]
        creds.ssid_len = ssidLen;
        creds.password = password;
   b4972:	220a      	movs	r2, #10
   b4974:	2300      	movs	r3, #0
   b4976:	e9cd 2303 	strd	r2, r3, [sp, #12]
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b497a:	4619      	mov	r1, r3
   b497c:	aa01      	add	r2, sp, #4
   b497e:	6860      	ldr	r0, [r4, #4]
        creds.password_len = passwordLen;
   b4980:	9305      	str	r3, [sp, #20]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4982:	f001 fc7f 	bl	b6284 <network_set_credentials>
        network_connect(*this, flags, 0, NULL);
   b4986:	2300      	movs	r3, #0
   b4988:	6860      	ldr	r0, [r4, #4]
   b498a:	461a      	mov	r2, r3
   b498c:	4619      	mov	r1, r3
   b498e:	f001 fc39 	bl	b6204 <network_connect>
        return network_connecting(*this, 0, NULL);
   b4992:	2200      	movs	r2, #0
   b4994:	6860      	ldr	r0, [r4, #4]
   b4996:	4611      	mov	r1, r2
   b4998:	f001 fc3c 	bl	b6214 <network_connecting>
    while(WiFi.connecting()) {
   b499c:	b128      	cbz	r0, b49aa <setup+0xa6>
        Serial.printf(",");
   b499e:	f002 fd51 	bl	b7444 <_Z16_fetch_usbserialv>
   b49a2:	4629      	mov	r1, r5
   b49a4:	f7ff fcc2 	bl	b432c <_ZN5Print6printfEPKcz>
    while(WiFi.connecting()) {
   b49a8:	e7f3      	b.n	b4992 <setup+0x8e>
    }
    delay(1000);
   b49aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b49ae:	f001 fcdd 	bl	b636c <delay>
    Serial.printf("\n\n");
   b49b2:	f002 fd47 	bl	b7444 <_Z16_fetch_usbserialv>
   b49b6:	4907      	ldr	r1, [pc, #28]	; (b49d4 <setup+0xd0>)
   b49b8:	f7ff fcb8 	bl	b432c <_ZN5Print6printfEPKcz>
}
   b49bc:	b015      	add	sp, #84	; 0x54
   b49be:	bd30      	pop	{r4, r5, pc}
   b49c0:	2003e5b0 	.word	0x2003e5b0
   b49c4:	2003e718 	.word	0x2003e718
   b49c8:	000b8114 	.word	0x000b8114
   b49cc:	2003e610 	.word	0x2003e610
   b49d0:	000b8109 	.word	0x000b8109
   b49d4:	000b8116 	.word	0x000b8116

000b49d8 <_Z10wemoSwitchii>:
}


///FUNCTION AREA

void wemoSwitch(int oF, int wM) {
   b49d8:	4603      	mov	r3, r0
   b49da:	4608      	mov	r0, r1
    if(oF) {
   b49dc:	b10b      	cbz	r3, b49e2 <_Z10wemoSwitchii+0xa>
        switchON(wM);
   b49de:	f7ff bebd 	b.w	b475c <_Z8switchONi>
       // Serial.printf("turn on Wemo %d\n", wM);
    }

    if(!oF) {
        switchOFF(wM);
   b49e2:	f7ff bf1d 	b.w	b4820 <_Z9switchOFFi>
	...

000b49e8 <_Z9oledWriteiiic>:
        //Serial.printf("turn off Wemo %d\n", wM);
    } 
}


void oledWrite(int x, int y, int oO, char phrase) {
   b49e8:	b570      	push	{r4, r5, r6, lr}
   b49ea:	4605      	mov	r5, r0
   b49ec:	460e      	mov	r6, r1
   b49ee:	461c      	mov	r4, r3
    if(oO) {
   b49f0:	b1b2      	cbz	r2, b4a20 <_Z9oledWriteiiic+0x38>
        display.setTextSize(1);
   b49f2:	480d      	ldr	r0, [pc, #52]	; (b4a28 <_Z9oledWriteiiic+0x40>)
   b49f4:	2101      	movs	r1, #1
   b49f6:	f000 fbda 	bl	b51ae <_ZN12Adafruit_GFX11setTextSizeEh>
        display.setTextColor(WHITE);
   b49fa:	480b      	ldr	r0, [pc, #44]	; (b4a28 <_Z9oledWriteiiic+0x40>)
   b49fc:	2101      	movs	r1, #1
   b49fe:	f000 fbdb 	bl	b51b8 <_ZN12Adafruit_GFX12setTextColorEt>
        display.setCursor(x,y);
   b4a02:	4809      	ldr	r0, [pc, #36]	; (b4a28 <_Z9oledWriteiiic+0x40>)
   b4a04:	b232      	sxth	r2, r6
   b4a06:	b229      	sxth	r1, r5
   b4a08:	f000 fbce 	bl	b51a8 <_ZN12Adafruit_GFX9setCursorEss>
        display.printf("%c", phrase);
   b4a0c:	4907      	ldr	r1, [pc, #28]	; (b4a2c <_Z9oledWriteiiic+0x44>)
   b4a0e:	4806      	ldr	r0, [pc, #24]	; (b4a28 <_Z9oledWriteiiic+0x40>)
   b4a10:	4622      	mov	r2, r4
   b4a12:	f7ff fc8b 	bl	b432c <_ZN5Print6printfEPKcz>

    if(!oO) {
        display.clearDisplay();
        display.display();
    }
}
   b4a16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        display.display();
   b4a1a:	4803      	ldr	r0, [pc, #12]	; (b4a28 <_Z9oledWriteiiic+0x40>)
   b4a1c:	f000 be0c 	b.w	b5638 <_ZN16Adafruit_SSD13067displayEv>
        display.clearDisplay();
   b4a20:	4801      	ldr	r0, [pc, #4]	; (b4a28 <_Z9oledWriteiiic+0x40>)
   b4a22:	f000 fdad 	bl	b5580 <_ZN16Adafruit_SSD130612clearDisplayEv>
   b4a26:	e7f6      	b.n	b4a16 <_Z9oledWriteiiic+0x2e>
   b4a28:	2003e5b0 	.word	0x2003e5b0
   b4a2c:	000b8119 	.word	0x000b8119

000b4a30 <_Z9pixelFilliii>:

void pixelFill(int startingPixel, int endingPixel, int color) {
   b4a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for(i=startingPixel; i<=endingPixel; i++) { 
   b4a32:	4c0b      	ldr	r4, [pc, #44]	; (b4a60 <_Z9pixelFilliii+0x30>)
        pixel.setPixelColor(i, color);
   b4a34:	4e0b      	ldr	r6, [pc, #44]	; (b4a64 <_Z9pixelFilliii+0x34>)
    for(i=startingPixel; i<=endingPixel; i++) { 
   b4a36:	6020      	str	r0, [r4, #0]
void pixelFill(int startingPixel, int endingPixel, int color) {
   b4a38:	460d      	mov	r5, r1
   b4a3a:	4617      	mov	r7, r2
    for(i=startingPixel; i<=endingPixel; i++) { 
   b4a3c:	6821      	ldr	r1, [r4, #0]
   b4a3e:	42a9      	cmp	r1, r5
   b4a40:	dc08      	bgt.n	b4a54 <_Z9pixelFilliii+0x24>
        pixel.setPixelColor(i, color);
   b4a42:	463a      	mov	r2, r7
   b4a44:	b289      	uxth	r1, r1
   b4a46:	4630      	mov	r0, r6
   b4a48:	f001 f940 	bl	b5ccc <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    for(i=startingPixel; i<=endingPixel; i++) { 
   b4a4c:	6823      	ldr	r3, [r4, #0]
   b4a4e:	3301      	adds	r3, #1
   b4a50:	6023      	str	r3, [r4, #0]
   b4a52:	e7f3      	b.n	b4a3c <_Z9pixelFilliii+0xc>
    }
    pixel.show();
}
   b4a54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    pixel.show();
   b4a58:	4802      	ldr	r0, [pc, #8]	; (b4a64 <_Z9pixelFilliii+0x34>)
   b4a5a:	f000 bf8b 	b.w	b5974 <_ZN17Adafruit_NeoPixel4showEv>
   b4a5e:	bf00      	nop
   b4a60:	2003e5e8 	.word	0x2003e5e8
   b4a64:	2003e610 	.word	0x2003e610

000b4a68 <loop>:
void loop() {
   b4a68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if(button4.isClicked()) {
   b4a6c:	4889      	ldr	r0, [pc, #548]	; (b4c94 <loop+0x22c>)
   b4a6e:	4d8a      	ldr	r5, [pc, #552]	; (b4c98 <loop+0x230>)
   b4a70:	f7ff ff38 	bl	b48e4 <_ZN6Button9isClickedEv>
   b4a74:	b118      	cbz	r0, b4a7e <loop+0x16>
        onOFF4 = !onOFF4;
   b4a76:	782b      	ldrb	r3, [r5, #0]
   b4a78:	f083 0301 	eor.w	r3, r3, #1
   b4a7c:	702b      	strb	r3, [r5, #0]
    if(onOFF4 &&!onOFF5) {
   b4a7e:	782b      	ldrb	r3, [r5, #0]
   b4a80:	4c86      	ldr	r4, [pc, #536]	; (b4c9c <loop+0x234>)
   b4a82:	b333      	cbz	r3, b4ad2 <loop+0x6a>
   b4a84:	7826      	ldrb	r6, [r4, #0]
   b4a86:	bb26      	cbnz	r6, b4ad2 <loop+0x6a>
        display.setTextSize(1);
   b4a88:	4885      	ldr	r0, [pc, #532]	; (b4ca0 <loop+0x238>)
   b4a8a:	2101      	movs	r1, #1
   b4a8c:	f000 fb8f 	bl	b51ae <_ZN12Adafruit_GFX11setTextSizeEh>
        display.setTextColor(WHITE);
   b4a90:	4883      	ldr	r0, [pc, #524]	; (b4ca0 <loop+0x238>)
   b4a92:	2101      	movs	r1, #1
   b4a94:	f000 fb90 	bl	b51b8 <_ZN12Adafruit_GFX12setTextColorEt>
        display.setCursor(0,0);
   b4a98:	4632      	mov	r2, r6
   b4a9a:	4881      	ldr	r0, [pc, #516]	; (b4ca0 <loop+0x238>)
   b4a9c:	4631      	mov	r1, r6
   b4a9e:	f000 fb83 	bl	b51a8 <_ZN12Adafruit_GFX9setCursorEss>
        display.printf("HELLO  LOVE\n]");
   b4aa2:	4980      	ldr	r1, [pc, #512]	; (b4ca4 <loop+0x23c>)
   b4aa4:	487e      	ldr	r0, [pc, #504]	; (b4ca0 <loop+0x238>)
   b4aa6:	f7ff fc41 	bl	b432c <_ZN5Print6printfEPKcz>
        display.display();
   b4aaa:	487d      	ldr	r0, [pc, #500]	; (b4ca0 <loop+0x238>)
   b4aac:	f000 fdc4 	bl	b5638 <_ZN16Adafruit_SSD13067displayEv>
        pixel.clear();
   b4ab0:	487d      	ldr	r0, [pc, #500]	; (b4ca8 <loop+0x240>)
   b4ab2:	f001 f975 	bl	b5da0 <_ZN17Adafruit_NeoPixel5clearEv>
        pixelFill(0,16,0xFF0000);
   b4ab6:	2110      	movs	r1, #16
   b4ab8:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
   b4abc:	4630      	mov	r0, r6
   b4abe:	f7ff ffb7 	bl	b4a30 <_Z9pixelFilliii>
        pixel.show();
   b4ac2:	4879      	ldr	r0, [pc, #484]	; (b4ca8 <loop+0x240>)
   b4ac4:	f000 ff56 	bl	b5974 <_ZN17Adafruit_NeoPixel4showEv>
        Serial.printf("button 4 is pressed\r");
   b4ac8:	f002 fcbc 	bl	b7444 <_Z16_fetch_usbserialv>
   b4acc:	4977      	ldr	r1, [pc, #476]	; (b4cac <loop+0x244>)
   b4ace:	f7ff fc2d 	bl	b432c <_ZN5Print6printfEPKcz>
    if(button5.isClicked()) {
   b4ad2:	4877      	ldr	r0, [pc, #476]	; (b4cb0 <loop+0x248>)
   b4ad4:	f7ff ff06 	bl	b48e4 <_ZN6Button9isClickedEv>
   b4ad8:	b118      	cbz	r0, b4ae2 <loop+0x7a>
        onOFF5 = !onOFF5;
   b4ada:	7823      	ldrb	r3, [r4, #0]
   b4adc:	f083 0301 	eor.w	r3, r3, #1
   b4ae0:	7023      	strb	r3, [r4, #0]
    if(!onOFF4 && !onOFF5) {
   b4ae2:	782b      	ldrb	r3, [r5, #0]
   b4ae4:	2b00      	cmp	r3, #0
   b4ae6:	d071      	beq.n	b4bcc <loop+0x164>
    if(onOFF4 && onOFF5) {
   b4ae8:	7823      	ldrb	r3, [r4, #0]
   b4aea:	2b00      	cmp	r3, #0
   b4aec:	f000 809a 	beq.w	b4c24 <loop+0x1bc>
        display.setCursor(0,20);
   b4af0:	2214      	movs	r2, #20
   b4af2:	486b      	ldr	r0, [pc, #428]	; (b4ca0 <loop+0x238>)
   b4af4:	4c6f      	ldr	r4, [pc, #444]	; (b4cb4 <loop+0x24c>)
   b4af6:	2100      	movs	r1, #0
   b4af8:	f000 fb56 	bl	b51a8 <_ZN12Adafruit_GFX9setCursorEss>
        display.printf("WHAT DO U\n WANT");
   b4afc:	496e      	ldr	r1, [pc, #440]	; (b4cb8 <loop+0x250>)
   b4afe:	4868      	ldr	r0, [pc, #416]	; (b4ca0 <loop+0x238>)
   b4b00:	f7ff fc14 	bl	b432c <_ZN5Print6printfEPKcz>
        display.display();
   b4b04:	4866      	ldr	r0, [pc, #408]	; (b4ca0 <loop+0x238>)
   b4b06:	f000 fd97 	bl	b5638 <_ZN16Adafruit_SSD13067displayEv>
        Serial.printf("Buttons are clickED\r");
   b4b0a:	f002 fc9b 	bl	b7444 <_Z16_fetch_usbserialv>
   b4b0e:	496b      	ldr	r1, [pc, #428]	; (b4cbc <loop+0x254>)
   b4b10:	f7ff fc0c 	bl	b432c <_ZN5Print6printfEPKcz>
        if(button1.isClicked()) {
   b4b14:	486a      	ldr	r0, [pc, #424]	; (b4cc0 <loop+0x258>)
   b4b16:	f7ff fee5 	bl	b48e4 <_ZN6Button9isClickedEv>
   b4b1a:	b118      	cbz	r0, b4b24 <loop+0xbc>
            onOFF1 = !onOFF1;
   b4b1c:	7823      	ldrb	r3, [r4, #0]
   b4b1e:	f083 0301 	eor.w	r3, r3, #1
   b4b22:	7023      	strb	r3, [r4, #0]
        wemoSwitch(onOFF1, WEMO1);
   b4b24:	7820      	ldrb	r0, [r4, #0]
   b4b26:	2101      	movs	r1, #1
   b4b28:	f7ff ff56 	bl	b49d8 <_Z10wemoSwitchii>
        oledWrite(0, 50, onOFF1, POPPING);
   b4b2c:	4b65      	ldr	r3, [pc, #404]	; (b4cc4 <loop+0x25c>)
   b4b2e:	7822      	ldrb	r2, [r4, #0]
   b4b30:	781b      	ldrb	r3, [r3, #0]
   b4b32:	2132      	movs	r1, #50	; 0x32
   b4b34:	2000      	movs	r0, #0
   b4b36:	f7ff ff57 	bl	b49e8 <_Z9oledWriteiiic>
        if(button2.isClicked()) {
   b4b3a:	4863      	ldr	r0, [pc, #396]	; (b4cc8 <loop+0x260>)
   b4b3c:	f7ff fed2 	bl	b48e4 <_ZN6Button9isClickedEv>
   b4b40:	4b62      	ldr	r3, [pc, #392]	; (b4ccc <loop+0x264>)
   b4b42:	b118      	cbz	r0, b4b4c <loop+0xe4>
            onOFF2 = !onOFF2;
   b4b44:	781a      	ldrb	r2, [r3, #0]
   b4b46:	f082 0201 	eor.w	r2, r2, #1
   b4b4a:	701a      	strb	r2, [r3, #0]
		int32_t ret = position;
   b4b4c:	4d60      	ldr	r5, [pc, #384]	; (b4cd0 <loop+0x268>)
        wemoSwitch(onOFF2, WEMO2); 
   b4b4e:	7818      	ldrb	r0, [r3, #0]
        encValue = myEnc.read();
   b4b50:	4c60      	ldr	r4, [pc, #384]	; (b4cd4 <loop+0x26c>)
        wemoSwitch(onOFF2, WEMO2); 
   b4b52:	2102      	movs	r1, #2
   b4b54:	f7ff ff40 	bl	b49d8 <_Z10wemoSwitchii>
		noInterrupts();
   b4b58:	f001 fd18 	bl	b658c <_Z12noInterruptsv>
		int32_t ret = position;
   b4b5c:	696e      	ldr	r6, [r5, #20]
		interrupts();
   b4b5e:	f001 fd17 	bl	b6590 <_Z10interruptsv>
        if(encValue >= 95) {
   b4b62:	2e5e      	cmp	r6, #94	; 0x5e
        encValue = myEnc.read();
   b4b64:	6026      	str	r6, [r4, #0]
        if(encValue >= 95) {
   b4b66:	dd67      	ble.n	b4c38 <loop+0x1d0>
		noInterrupts();
   b4b68:	f001 fd10 	bl	b658c <_Z12noInterruptsv>
		position = p;
   b4b6c:	265f      	movs	r6, #95	; 0x5f
   b4b6e:	616e      	str	r6, [r5, #20]
		interrupts();
   b4b70:	f001 fd0e 	bl	b6590 <_Z10interruptsv>
            encValue = 0;
   b4b74:	6026      	str	r6, [r4, #0]
        brightness = map(encValue,0,95,0,255);
   b4b76:	23ff      	movs	r3, #255	; 0xff
   b4b78:	9300      	str	r3, [sp, #0]
   b4b7a:	2300      	movs	r3, #0
   b4b7c:	6820      	ldr	r0, [r4, #0]
   b4b7e:	4f56      	ldr	r7, [pc, #344]	; (b4cd8 <loop+0x270>)
   b4b80:	225f      	movs	r2, #95	; 0x5f
   b4b82:	4619      	mov	r1, r3
   b4b84:	f001 fbe6 	bl	b6354 <_Z3mapiiiii>
   b4b88:	6038      	str	r0, [r7, #0]
        if(button3.isClicked()) {
   b4b8a:	4854      	ldr	r0, [pc, #336]	; (b4cdc <loop+0x274>)
   b4b8c:	f7ff feaa 	bl	b48e4 <_ZN6Button9isClickedEv>
   b4b90:	b118      	cbz	r0, b4b9a <loop+0x132>
            color++;
   b4b92:	4a53      	ldr	r2, [pc, #332]	; (b4ce0 <loop+0x278>)
   b4b94:	6813      	ldr	r3, [r2, #0]
   b4b96:	3301      	adds	r3, #1
   b4b98:	6013      	str	r3, [r2, #0]
        if(buttonE.isClicked()) {
   b4b9a:	4852      	ldr	r0, [pc, #328]	; (b4ce4 <loop+0x27c>)
   b4b9c:	4d52      	ldr	r5, [pc, #328]	; (b4ce8 <loop+0x280>)
   b4b9e:	f7ff fea1 	bl	b48e4 <_ZN6Button9isClickedEv>
   b4ba2:	b118      	cbz	r0, b4bac <loop+0x144>
            onOFFE = !onOFFE;
   b4ba4:	782b      	ldrb	r3, [r5, #0]
   b4ba6:	f083 0301 	eor.w	r3, r3, #1
   b4baa:	702b      	strb	r3, [r5, #0]
        if(onOFFE) {
   b4bac:	782b      	ldrb	r3, [r5, #0]
   b4bae:	2b00      	cmp	r3, #0
   b4bb0:	d148      	bne.n	b4c44 <loop+0x1dc>
            Serial.printf("SHUT ER DOWN\n");
   b4bb2:	f002 fc47 	bl	b7444 <_Z16_fetch_usbserialv>
   b4bb6:	494d      	ldr	r1, [pc, #308]	; (b4cec <loop+0x284>)
   b4bb8:	f7ff fbb8 	bl	b432c <_ZN5Print6printfEPKcz>
            setHue(BULB1,false,0,0,0);
   b4bbc:	2300      	movs	r3, #0
   b4bbe:	9300      	str	r3, [sp, #0]
   b4bc0:	461a      	mov	r2, r3
   b4bc2:	4619      	mov	r1, r3
   b4bc4:	2001      	movs	r0, #1
   b4bc6:	f7ff fca3 	bl	b4510 <_Z6setHueibiii>
   b4bca:	e02b      	b.n	b4c24 <loop+0x1bc>
    if(!onOFF4 && !onOFF5) {
   b4bcc:	7823      	ldrb	r3, [r4, #0]
   b4bce:	bb4b      	cbnz	r3, b4c24 <loop+0x1bc>
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4bd0:	f001 f914 	bl	b5dfc <HAL_Timer_Get_Milli_Seconds>
        if((currentTime - lastSecond) >10000) {
   b4bd4:	4e46      	ldr	r6, [pc, #280]	; (b4cf0 <loop+0x288>)
        currentTime=millis();
   b4bd6:	4b47      	ldr	r3, [pc, #284]	; (b4cf4 <loop+0x28c>)
   b4bd8:	6018      	str	r0, [r3, #0]
        if((currentTime - lastSecond) >10000) {
   b4bda:	6833      	ldr	r3, [r6, #0]
   b4bdc:	1ac0      	subs	r0, r0, r3
   b4bde:	f242 7310 	movw	r3, #10000	; 0x2710
   b4be2:	4298      	cmp	r0, r3
   b4be4:	dd21      	ble.n	b4c2a <loop+0x1c2>
            pixelFill(4, 12, 0x00FF00);
   b4be6:	f44f 427f 	mov.w	r2, #65280	; 0xff00
   b4bea:	210c      	movs	r1, #12
   b4bec:	2004      	movs	r0, #4
   b4bee:	f7ff ff1f 	bl	b4a30 <_Z9pixelFilliii>
            pixel.show();
   b4bf2:	482d      	ldr	r0, [pc, #180]	; (b4ca8 <loop+0x240>)
   b4bf4:	f000 febe 	bl	b5974 <_ZN17Adafruit_NeoPixel4showEv>
   b4bf8:	f001 f900 	bl	b5dfc <HAL_Timer_Get_Milli_Seconds>
            lastSecond=millis();
   b4bfc:	6030      	str	r0, [r6, #0]
        display.clearDisplay();
   b4bfe:	4828      	ldr	r0, [pc, #160]	; (b4ca0 <loop+0x238>)
   b4c00:	f000 fcbe 	bl	b5580 <_ZN16Adafruit_SSD130612clearDisplayEv>
        display.setCursor(20,40);
   b4c04:	2228      	movs	r2, #40	; 0x28
   b4c06:	4826      	ldr	r0, [pc, #152]	; (b4ca0 <loop+0x238>)
   b4c08:	2114      	movs	r1, #20
   b4c0a:	f000 facd 	bl	b51a8 <_ZN12Adafruit_GFX9setCursorEss>
        display.printf("AUTO");
   b4c0e:	493a      	ldr	r1, [pc, #232]	; (b4cf8 <loop+0x290>)
   b4c10:	4823      	ldr	r0, [pc, #140]	; (b4ca0 <loop+0x238>)
   b4c12:	f7ff fb8b 	bl	b432c <_ZN5Print6printfEPKcz>
        display.display();   
   b4c16:	4822      	ldr	r0, [pc, #136]	; (b4ca0 <loop+0x238>)
   b4c18:	f000 fd0e 	bl	b5638 <_ZN16Adafruit_SSD13067displayEv>
    if(onOFF4 && onOFF5) {
   b4c1c:	782b      	ldrb	r3, [r5, #0]
   b4c1e:	2b00      	cmp	r3, #0
   b4c20:	f47f af62 	bne.w	b4ae8 <loop+0x80>
}
   b4c24:	b002      	add	sp, #8
   b4c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            pixel.clear();
   b4c2a:	481f      	ldr	r0, [pc, #124]	; (b4ca8 <loop+0x240>)
   b4c2c:	f001 f8b8 	bl	b5da0 <_ZN17Adafruit_NeoPixel5clearEv>
            pixel.show();
   b4c30:	481d      	ldr	r0, [pc, #116]	; (b4ca8 <loop+0x240>)
   b4c32:	f000 fe9f 	bl	b5974 <_ZN17Adafruit_NeoPixel4showEv>
   b4c36:	e7e2      	b.n	b4bfe <loop+0x196>
        if(encValue <= 0) {
   b4c38:	2e00      	cmp	r6, #0
   b4c3a:	dc9c      	bgt.n	b4b76 <loop+0x10e>
		noInterrupts();
   b4c3c:	f001 fca6 	bl	b658c <_Z12noInterruptsv>
		position = p;
   b4c40:	2600      	movs	r6, #0
   b4c42:	e794      	b.n	b4b6e <loop+0x106>
                Serial.printf("setting color of bulb %i to color %06i\n", BULB1, HueRainbow[color%7]);
   b4c44:	f8df 8098 	ldr.w	r8, [pc, #152]	; b4ce0 <loop+0x278>
   b4c48:	4e2c      	ldr	r6, [pc, #176]	; (b4cfc <loop+0x294>)
   b4c4a:	f002 fbfb 	bl	b7444 <_Z16_fetch_usbserialv>
   b4c4e:	f8d8 3000 	ldr.w	r3, [r8]
   b4c52:	492b      	ldr	r1, [pc, #172]	; (b4d00 <loop+0x298>)
   b4c54:	2407      	movs	r4, #7
   b4c56:	fb93 f2f4 	sdiv	r2, r3, r4
   b4c5a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   b4c5e:	1a9b      	subs	r3, r3, r2
   b4c60:	2201      	movs	r2, #1
   b4c62:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
   b4c66:	f7ff fb61 	bl	b432c <_ZN5Print6printfEPKcz>
                setHue(BULB1,true,HueRainbow[color%7],brightness,255);
   b4c6a:	f8d8 3000 	ldr.w	r3, [r8]
   b4c6e:	fb93 f4f4 	sdiv	r4, r3, r4
   b4c72:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   b4c76:	1b1c      	subs	r4, r3, r4
   b4c78:	23ff      	movs	r3, #255	; 0xff
   b4c7a:	9300      	str	r3, [sp, #0]
   b4c7c:	2101      	movs	r1, #1
   b4c7e:	683b      	ldr	r3, [r7, #0]
   b4c80:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   b4c84:	4608      	mov	r0, r1
   b4c86:	f7ff fc43 	bl	b4510 <_Z6setHueibiii>
        if(!onOFFE) {
   b4c8a:	782b      	ldrb	r3, [r5, #0]
   b4c8c:	2b00      	cmp	r3, #0
   b4c8e:	d1c9      	bne.n	b4c24 <loop+0x1bc>
   b4c90:	e78f      	b.n	b4bb2 <loop+0x14a>
   b4c92:	bf00      	nop
   b4c94:	2003e590 	.word	0x2003e590
   b4c98:	2003e60a 	.word	0x2003e60a
   b4c9c:	2003e60b 	.word	0x2003e60b
   b4ca0:	2003e5b0 	.word	0x2003e5b0
   b4ca4:	000b811c 	.word	0x000b811c
   b4ca8:	2003e610 	.word	0x2003e610
   b4cac:	000b812a 	.word	0x000b812a
   b4cb0:	2003e598 	.word	0x2003e598
   b4cb4:	2003e608 	.word	0x2003e608
   b4cb8:	000b8144 	.word	0x000b8144
   b4cbc:	000b8154 	.word	0x000b8154
   b4cc0:	2003e578 	.word	0x2003e578
   b4cc4:	2003e534 	.word	0x2003e534
   b4cc8:	2003e580 	.word	0x2003e580
   b4ccc:	2003e609 	.word	0x2003e609
   b4cd0:	2003e5f0 	.word	0x2003e5f0
   b4cd4:	2003e5d4 	.word	0x2003e5d4
   b4cd8:	2003e574 	.word	0x2003e574
   b4cdc:	2003e588 	.word	0x2003e588
   b4ce0:	2003e5a8 	.word	0x2003e5a8
   b4ce4:	2003e5a0 	.word	0x2003e5a0
   b4ce8:	2003e60c 	.word	0x2003e60c
   b4cec:	000b8169 	.word	0x000b8169
   b4cf0:	2003e5ec 	.word	0x2003e5ec
   b4cf4:	2003e5ac 	.word	0x2003e5ac
   b4cf8:	000b813f 	.word	0x000b813f
   b4cfc:	2003e514 	.word	0x2003e514
   b4d00:	000b8177 	.word	0x000b8177

000b4d04 <_GLOBAL__sub_I_hueOn>:
}
   b4d04:	b538      	push	{r3, r4, r5, lr}
String hueCmd;  // Hue command
   b4d06:	4931      	ldr	r1, [pc, #196]	; (b4dcc <_GLOBAL__sub_I_hueOn+0xc8>)
   b4d08:	4831      	ldr	r0, [pc, #196]	; (b4dd0 <_GLOBAL__sub_I_hueOn+0xcc>)
   b4d0a:	f001 ff5a 	bl	b6bc2 <_ZN6StringC1EPK19__FlashStringHelper>
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b4d0e:	4a31      	ldr	r2, [pc, #196]	; (b4dd4 <_GLOBAL__sub_I_hueOn+0xd0>)
   b4d10:	4b31      	ldr	r3, [pc, #196]	; (b4dd8 <_GLOBAL__sub_I_hueOn+0xd4>)
   b4d12:	6812      	ldr	r2, [r2, #0]
   b4d14:	601a      	str	r2, [r3, #0]
   b4d16:	4a31      	ldr	r2, [pc, #196]	; (b4ddc <_GLOBAL__sub_I_hueOn+0xd8>)
TCPClient HueClient;
   b4d18:	4831      	ldr	r0, [pc, #196]	; (b4de0 <_GLOBAL__sub_I_hueOn+0xdc>)
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b4d1a:	6812      	ldr	r2, [r2, #0]
   b4d1c:	605a      	str	r2, [r3, #4]
   b4d1e:	4a31      	ldr	r2, [pc, #196]	; (b4de4 <_GLOBAL__sub_I_hueOn+0xe0>)
   b4d20:	6812      	ldr	r2, [r2, #0]
   b4d22:	609a      	str	r2, [r3, #8]
   b4d24:	4a30      	ldr	r2, [pc, #192]	; (b4de8 <_GLOBAL__sub_I_hueOn+0xe4>)
   b4d26:	6812      	ldr	r2, [r2, #0]
   b4d28:	60da      	str	r2, [r3, #12]
   b4d2a:	4a30      	ldr	r2, [pc, #192]	; (b4dec <_GLOBAL__sub_I_hueOn+0xe8>)
   b4d2c:	6812      	ldr	r2, [r2, #0]
   b4d2e:	611a      	str	r2, [r3, #16]
   b4d30:	4a2f      	ldr	r2, [pc, #188]	; (b4df0 <_GLOBAL__sub_I_hueOn+0xec>)
   b4d32:	6812      	ldr	r2, [r2, #0]
   b4d34:	615a      	str	r2, [r3, #20]
   b4d36:	4a2f      	ldr	r2, [pc, #188]	; (b4df4 <_GLOBAL__sub_I_hueOn+0xf0>)
   b4d38:	6812      	ldr	r2, [r2, #0]
   b4d3a:	619a      	str	r2, [r3, #24]
TCPClient HueClient;
   b4d3c:	f002 fab4 	bl	b72a8 <_ZN9TCPClientC1Ev>
TCPClient WemoClient;
   b4d40:	482d      	ldr	r0, [pc, #180]	; (b4df8 <_GLOBAL__sub_I_hueOn+0xf4>)
   b4d42:	f002 fab1 	bl	b72a8 <_ZN9TCPClientC1Ev>
      _buttonPin = buttonPin;
   b4d46:	4a2d      	ldr	r2, [pc, #180]	; (b4dfc <_GLOBAL__sub_I_hueOn+0xf8>)
   b4d48:	2302      	movs	r3, #2
   b4d4a:	6013      	str	r3, [r2, #0]
      pinMode(_buttonPin,INPUT);
   b4d4c:	4618      	mov	r0, r3
   b4d4e:	2100      	movs	r1, #0
   b4d50:	f002 fd02 	bl	b7758 <pinMode>
      _buttonPin = buttonPin;
   b4d54:	4a2a      	ldr	r2, [pc, #168]	; (b4e00 <_GLOBAL__sub_I_hueOn+0xfc>)
   b4d56:	2403      	movs	r4, #3
   b4d58:	6014      	str	r4, [r2, #0]
      pinMode(_buttonPin,INPUT);
   b4d5a:	4620      	mov	r0, r4
   b4d5c:	2100      	movs	r1, #0
   b4d5e:	f002 fcfb 	bl	b7758 <pinMode>
      _buttonPin = buttonPin;
   b4d62:	4a28      	ldr	r2, [pc, #160]	; (b4e04 <_GLOBAL__sub_I_hueOn+0x100>)
   b4d64:	2004      	movs	r0, #4
   b4d66:	6010      	str	r0, [r2, #0]
      pinMode(_buttonPin,INPUT);
   b4d68:	2100      	movs	r1, #0
   b4d6a:	f002 fcf5 	bl	b7758 <pinMode>
      _buttonPin = buttonPin;
   b4d6e:	4a26      	ldr	r2, [pc, #152]	; (b4e08 <_GLOBAL__sub_I_hueOn+0x104>)
   b4d70:	2005      	movs	r0, #5
   b4d72:	6010      	str	r0, [r2, #0]
      pinMode(_buttonPin,INPUT);
   b4d74:	2100      	movs	r1, #0
   b4d76:	f002 fcef 	bl	b7758 <pinMode>
      _buttonPin = buttonPin;
   b4d7a:	4a24      	ldr	r2, [pc, #144]	; (b4e0c <_GLOBAL__sub_I_hueOn+0x108>)
   b4d7c:	2006      	movs	r0, #6
   b4d7e:	6010      	str	r0, [r2, #0]
      pinMode(_buttonPin,INPUT);
   b4d80:	2100      	movs	r1, #0
   b4d82:	f002 fce9 	bl	b7758 <pinMode>
      _buttonPin = buttonPin;
   b4d86:	4a22      	ldr	r2, [pc, #136]	; (b4e10 <_GLOBAL__sub_I_hueOn+0x10c>)
   b4d88:	250c      	movs	r5, #12
   b4d8a:	6015      	str	r5, [r2, #0]
      pinMode(_buttonPin,INPUT);
   b4d8c:	4628      	mov	r0, r5
   b4d8e:	2100      	movs	r1, #0
   b4d90:	f002 fce2 	bl	b7758 <pinMode>
Adafruit_SSD1306 display(OLED_RESET);
   b4d94:	2113      	movs	r1, #19
   b4d96:	481f      	ldr	r0, [pc, #124]	; (b4e14 <_GLOBAL__sub_I_hueOn+0x110>)
   b4d98:	f000 fbdc 	bl	b5554 <_ZN16Adafruit_SSD1306C1Ea>
Adafruit_NeoPixel pixel(PIXELCOUNT, PIXELPIN, WS2812B);
   b4d9c:	2302      	movs	r3, #2
   b4d9e:	4629      	mov	r1, r5
   b4da0:	2207      	movs	r2, #7
   b4da2:	481d      	ldr	r0, [pc, #116]	; (b4e18 <_GLOBAL__sub_I_hueOn+0x114>)
   b4da4:	f000 fdd4 	bl	b5950 <_ZN17Adafruit_NeoPixelC1Ethh>
Encoder myEnc(PINA,PINB);
   b4da8:	220f      	movs	r2, #15
   b4daa:	481c      	ldr	r0, [pc, #112]	; (b4e1c <_GLOBAL__sub_I_hueOn+0x118>)
   b4dac:	210e      	movs	r1, #14
   b4dae:	f7ff faef 	bl	b4390 <_ZN7EncoderC1Ett>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4db2:	4b1b      	ldr	r3, [pc, #108]	; (b4e20 <_GLOBAL__sub_I_hueOn+0x11c>)
   b4db4:	2200      	movs	r2, #0
   b4db6:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b4dba:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4dbe:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4dc0:	4620      	mov	r0, r4
}
   b4dc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4dc6:	f001 b9f1 	b.w	b61ac <set_system_mode>
   b4dca:	bf00      	nop
   b4dcc:	000b8118 	.word	0x000b8118
   b4dd0:	2003e5d8 	.word	0x2003e5d8
   b4dd4:	2003e530 	.word	0x2003e530
   b4dd8:	2003e514 	.word	0x2003e514
   b4ddc:	2003e050 	.word	0x2003e050
   b4de0:	2003e4f8 	.word	0x2003e4f8
   b4de4:	2003e058 	.word	0x2003e058
   b4de8:	2003e048 	.word	0x2003e048
   b4dec:	2003e044 	.word	0x2003e044
   b4df0:	2003e04c 	.word	0x2003e04c
   b4df4:	2003e054 	.word	0x2003e054
   b4df8:	2003e544 	.word	0x2003e544
   b4dfc:	2003e578 	.word	0x2003e578
   b4e00:	2003e580 	.word	0x2003e580
   b4e04:	2003e588 	.word	0x2003e588
   b4e08:	2003e590 	.word	0x2003e590
   b4e0c:	2003e598 	.word	0x2003e598
   b4e10:	2003e5a0 	.word	0x2003e5a0
   b4e14:	2003e5b0 	.word	0x2003e5b0
   b4e18:	2003e610 	.word	0x2003e610
   b4e1c:	2003e5f0 	.word	0x2003e5f0
   b4e20:	2003e538 	.word	0x2003e538

000b4e24 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b4e24:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b4e26:	4c0b      	ldr	r4, [pc, #44]	; (b4e54 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b4e28:	7821      	ldrb	r1, [r4, #0]
   b4e2a:	f3bf 8f5b 	dmb	ish
   b4e2e:	f011 0101 	ands.w	r1, r1, #1
   b4e32:	d10b      	bne.n	b4e4c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4e34:	4620      	mov	r0, r4
   b4e36:	9101      	str	r1, [sp, #4]
   b4e38:	f7ff f93e 	bl	b40b8 <__cxa_guard_acquire>
   b4e3c:	9901      	ldr	r1, [sp, #4]
   b4e3e:	b128      	cbz	r0, b4e4c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4e40:	4805      	ldr	r0, [pc, #20]	; (b4e58 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4e42:	f001 fd8f 	bl	b6964 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4e46:	4620      	mov	r0, r4
   b4e48:	f7ff f93b 	bl	b40c2 <__cxa_guard_release>
        return instance;
    }
   b4e4c:	4802      	ldr	r0, [pc, #8]	; (b4e58 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4e4e:	b002      	add	sp, #8
   b4e50:	bd10      	pop	{r4, pc}
   b4e52:	bf00      	nop
   b4e54:	2003e624 	.word	0x2003e624
   b4e58:	2003e628 	.word	0x2003e628

000b4e5c <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b4e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4e60:	b085      	sub	sp, #20
   b4e62:	461f      	mov	r7, r3
   b4e64:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b4e68:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b4e6c:	eba8 0902 	sub.w	r9, r8, r2
   b4e70:	eba7 0a01 	sub.w	sl, r7, r1
   b4e74:	f1b9 0f00 	cmp.w	r9, #0
   b4e78:	bfb8      	it	lt
   b4e7a:	f1c9 0900 	rsblt	r9, r9, #0
   b4e7e:	f1ba 0f00 	cmp.w	sl, #0
   b4e82:	bfb8      	it	lt
   b4e84:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b4e88:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b4e8a:	4683      	mov	fp, r0
   b4e8c:	460c      	mov	r4, r1
   b4e8e:	4615      	mov	r5, r2
  if (steep) {
   b4e90:	dd04      	ble.n	b4e9c <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b4e92:	463a      	mov	r2, r7
    swap(x0, y0);
   b4e94:	462c      	mov	r4, r5
    swap(x1, y1);
   b4e96:	4647      	mov	r7, r8
    swap(x0, y0);
   b4e98:	460d      	mov	r5, r1
    swap(x1, y1);
   b4e9a:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b4e9c:	42bc      	cmp	r4, r7
   b4e9e:	dd05      	ble.n	b4eac <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b4ea0:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b4ea2:	4645      	mov	r5, r8
   b4ea4:	4690      	mov	r8, r2
  if (x0 > x1) {
   b4ea6:	4622      	mov	r2, r4
   b4ea8:	463c      	mov	r4, r7
   b4eaa:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b4eac:	1b3e      	subs	r6, r7, r4
   b4eae:	b2b2      	uxth	r2, r6
   b4eb0:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b4eb2:	eba8 0205 	sub.w	r2, r8, r5
   b4eb6:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b4eba:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b4ebe:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b4ec2:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b4ec6:	4545      	cmp	r5, r8
   b4ec8:	bfb4      	ite	lt
   b4eca:	2201      	movlt	r2, #1
   b4ecc:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
  dy = abs(y1 - y0);
   b4ed0:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b4ed2:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b4ed4:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b4ed6:	42bc      	cmp	r4, r7
   b4ed8:	dc1c      	bgt.n	b4f14 <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b4eda:	f8db 2000 	ldr.w	r2, [fp]
   b4ede:	9303      	str	r3, [sp, #12]
    if (steep) {
   b4ee0:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b4ee2:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b4ee6:	bfc7      	ittee	gt
   b4ee8:	4629      	movgt	r1, r5
   b4eea:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b4eec:	462a      	movle	r2, r5
   b4eee:	4621      	movle	r1, r4
   b4ef0:	4658      	mov	r0, fp
   b4ef2:	47c0      	blx	r8
    }
    err -= dy;
   b4ef4:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b4ef6:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b4ef8:	1ab6      	subs	r6, r6, r2
   b4efa:	b2b1      	uxth	r1, r6
   b4efc:	b236      	sxth	r6, r6
    if (err < 0) {
   b4efe:	2e00      	cmp	r6, #0
   b4f00:	da05      	bge.n	b4f0e <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b4f02:	9a02      	ldr	r2, [sp, #8]
   b4f04:	4415      	add	r5, r2
      err += dx;
   b4f06:	9a00      	ldr	r2, [sp, #0]
   b4f08:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b4f0a:	b22d      	sxth	r5, r5
      err += dx;
   b4f0c:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b4f0e:	3401      	adds	r4, #1
   b4f10:	b224      	sxth	r4, r4
   b4f12:	e7e0      	b.n	b4ed6 <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b4f14:	b005      	add	sp, #20
   b4f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4f1a <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b4f1a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4f1e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b4f22:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b4f24:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b4f28:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b4f2c:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b4f2e:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b4f30:	4616      	mov	r6, r2
   b4f32:	468a      	mov	sl, r1
   b4f34:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b4f36:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b4f38:	6823      	ldr	r3, [r4, #0]
   b4f3a:	f8cd 8000 	str.w	r8, [sp]
   b4f3e:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b4f42:	4432      	add	r2, r6
   b4f44:	69df      	ldr	r7, [r3, #28]
   b4f46:	4651      	mov	r1, sl
   b4f48:	462b      	mov	r3, r5
   b4f4a:	4620      	mov	r0, r4
   b4f4c:	b212      	sxth	r2, r2
   b4f4e:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b4f50:	6823      	ldr	r3, [r4, #0]
   b4f52:	f8cd 8000 	str.w	r8, [sp]
   b4f56:	699f      	ldr	r7, [r3, #24]
   b4f58:	4632      	mov	r2, r6
   b4f5a:	464b      	mov	r3, r9
   b4f5c:	4651      	mov	r1, sl
   b4f5e:	4620      	mov	r0, r4
   b4f60:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b4f62:	1e6b      	subs	r3, r5, #1
   b4f64:	eb03 010a 	add.w	r1, r3, sl
   b4f68:	6823      	ldr	r3, [r4, #0]
   b4f6a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b4f6e:	699d      	ldr	r5, [r3, #24]
   b4f70:	4632      	mov	r2, r6
   b4f72:	464b      	mov	r3, r9
   b4f74:	b209      	sxth	r1, r1
   b4f76:	4620      	mov	r0, r4
   b4f78:	46ac      	mov	ip, r5
}
   b4f7a:	b002      	add	sp, #8
   b4f7c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b4f80:	4760      	bx	ip

000b4f82 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b4f82:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b4f84:	3b01      	subs	r3, #1
   b4f86:	4413      	add	r3, r2
   b4f88:	6804      	ldr	r4, [r0, #0]
   b4f8a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b4f8e:	9501      	str	r5, [sp, #4]
   b4f90:	b21b      	sxth	r3, r3
   b4f92:	9300      	str	r3, [sp, #0]
   b4f94:	6964      	ldr	r4, [r4, #20]
   b4f96:	460b      	mov	r3, r1
   b4f98:	47a0      	blx	r4
}
   b4f9a:	b003      	add	sp, #12
   b4f9c:	bd30      	pop	{r4, r5, pc}

000b4f9e <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b4f9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b4fa0:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b4fa4:	6804      	ldr	r4, [r0, #0]
   b4fa6:	e9cd 2500 	strd	r2, r5, [sp]
   b4faa:	3b01      	subs	r3, #1
   b4fac:	440b      	add	r3, r1
   b4fae:	6964      	ldr	r4, [r4, #20]
   b4fb0:	b21b      	sxth	r3, r3
   b4fb2:	47a0      	blx	r4
}
   b4fb4:	b003      	add	sp, #12
   b4fb6:	bd30      	pop	{r4, r5, pc}

000b4fb8 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b4fb8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4fbc:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b4fc0:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b4fc4:	4605      	mov	r5, r0
   b4fc6:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b4fc8:	460c      	mov	r4, r1
   b4fca:	18ce      	adds	r6, r1, r3
   b4fcc:	42b4      	cmp	r4, r6
   b4fce:	da0b      	bge.n	b4fe8 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b4fd0:	682b      	ldr	r3, [r5, #0]
   b4fd2:	f8cd 8000 	str.w	r8, [sp]
   b4fd6:	699f      	ldr	r7, [r3, #24]
   b4fd8:	4621      	mov	r1, r4
   b4fda:	464b      	mov	r3, r9
   b4fdc:	4652      	mov	r2, sl
   b4fde:	4628      	mov	r0, r5
   b4fe0:	3401      	adds	r4, #1
   b4fe2:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b4fe4:	b224      	sxth	r4, r4
   b4fe6:	e7f1      	b.n	b4fcc <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b4fe8:	b002      	add	sp, #8
   b4fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b4fee <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b4fee:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b4ff0:	6802      	ldr	r2, [r0, #0]
   b4ff2:	9101      	str	r1, [sp, #4]
   b4ff4:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b4ff8:	9100      	str	r1, [sp, #0]
   b4ffa:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b4ffc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5000:	2200      	movs	r2, #0
   b5002:	4611      	mov	r1, r2
   b5004:	47a0      	blx	r4
}
   b5006:	b002      	add	sp, #8
   b5008:	bd10      	pop	{r4, pc}

000b500a <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b500a:	4770      	bx	lr

000b500c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b500c:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b500e:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b5010:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b5012:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    Print() : write_error(0) {}
   b5016:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b5018:	4d05      	ldr	r5, [pc, #20]	; (b5030 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b501a:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b501c:	2201      	movs	r2, #1
   b501e:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b5020:	6005      	str	r5, [r0, #0]
   b5022:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b5024:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b5026:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b5028:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b502a:	7682      	strb	r2, [r0, #26]
}
   b502c:	bd30      	pop	{r4, r5, pc}
   b502e:	bf00      	nop
   b5030:	000b8718 	.word	0x000b8718

000b5034 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b5034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5038:	ed2d 8b02 	vpush	{d8}
   b503c:	b08d      	sub	sp, #52	; 0x34
   b503e:	4607      	mov	r7, r0
   b5040:	9104      	str	r1, [sp, #16]
   b5042:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b5046:	9105      	str	r1, [sp, #20]
   b5048:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b504c:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b504e:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b5052:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b5054:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b5058:	4281      	cmp	r1, r0
   b505a:	dd52      	ble.n	b5102 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b505c:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b5060:	4291      	cmp	r1, r2
   b5062:	dd4e      	ble.n	b5102 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b5064:	2106      	movs	r1, #6
   b5066:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b506a:	2c00      	cmp	r4, #0
   b506c:	dd49      	ble.n	b5102 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b506e:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b5072:	2c00      	cmp	r4, #0
   b5074:	dd45      	ble.n	b5102 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b5076:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b507a:	930b      	str	r3, [sp, #44]	; 0x2c
   b507c:	b293      	uxth	r3, r2
   b507e:	9307      	str	r3, [sp, #28]
   b5080:	3308      	adds	r3, #8
   b5082:	b29b      	uxth	r3, r3
   b5084:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b5086:	2400      	movs	r4, #0
   b5088:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b508a:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b508c:	bf1c      	itt	ne
   b508e:	4b2c      	ldrne	r3, [pc, #176]	; (b5140 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b5090:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b5092:	9e07      	ldr	r6, [sp, #28]
   b5094:	bf16      	itet	ne
   b5096:	191b      	addne	r3, r3, r4
      line = 0x0;
   b5098:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b509a:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b509c:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b509e:	9a04      	ldr	r2, [sp, #16]
   b50a0:	b2ab      	uxth	r3, r5
   b50a2:	930a      	str	r3, [sp, #40]	; 0x28
   b50a4:	fb04 f305 	mul.w	r3, r4, r5
   b50a8:	fa13 f382 	uxtah	r3, r3, r2
   b50ac:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b50ae:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b50b2:	ee08 3a10 	vmov	s16, r3
   b50b6:	46b0      	mov	r8, r6
   b50b8:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b50bc:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b50c0:	9b03      	ldr	r3, [sp, #12]
   b50c2:	07db      	lsls	r3, r3, #31
   b50c4:	d52f      	bpl.n	b5126 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b50c6:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b50c8:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b50ca:	d11f      	bne.n	b510c <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b50cc:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b50d0:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b50d2:	b232      	sxth	r2, r6
   b50d4:	4651      	mov	r1, sl
   b50d6:	4638      	mov	r0, r7
   b50d8:	47d8      	blx	fp
      line >>= 1;
   b50da:	9b03      	ldr	r3, [sp, #12]
   b50dc:	085b      	lsrs	r3, r3, #1
   b50de:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b50e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b50e2:	3601      	adds	r6, #1
   b50e4:	4498      	add	r8, r3
   b50e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b50e8:	b2b6      	uxth	r6, r6
   b50ea:	42b3      	cmp	r3, r6
   b50ec:	fa1f f888 	uxth.w	r8, r8
   b50f0:	d1e6      	bne.n	b50c0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b50f2:	9b08      	ldr	r3, [sp, #32]
   b50f4:	3b01      	subs	r3, #1
   b50f6:	3401      	adds	r4, #1
   b50f8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b50fc:	b264      	sxtb	r4, r4
   b50fe:	9308      	str	r3, [sp, #32]
   b5100:	d1c3      	bne.n	b508a <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b5102:	b00d      	add	sp, #52	; 0x34
   b5104:	ecbd 8b02 	vpop	{d8}
   b5108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b510c:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b510e:	e9cd 9200 	strd	r9, r2, [sp]
   b5112:	ee18 1a10 	vmov	r1, s16
   b5116:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b511a:	fa0f f288 	sxth.w	r2, r8
   b511e:	464b      	mov	r3, r9
   b5120:	4638      	mov	r0, r7
   b5122:	47d8      	blx	fp
   b5124:	e7d9      	b.n	b50da <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b5126:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b512a:	4293      	cmp	r3, r2
   b512c:	d0d5      	beq.n	b50da <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b512e:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b5130:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b5132:	d103      	bne.n	b513c <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b5134:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b5138:	9b06      	ldr	r3, [sp, #24]
   b513a:	e7ca      	b.n	b50d2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b513c:	9a06      	ldr	r2, [sp, #24]
   b513e:	e7e6      	b.n	b510e <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b5140:	000b8215 	.word	0x000b8215

000b5144 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b5144:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b5146:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b5148:	b085      	sub	sp, #20
   b514a:	4604      	mov	r4, r0
  if (c == '\n') {
   b514c:	d107      	bne.n	b515e <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b514e:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b5150:	8a63      	ldrh	r3, [r4, #18]
   b5152:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b5156:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b5158:	2300      	movs	r3, #0
   b515a:	8223      	strh	r3, [r4, #16]
   b515c:	e021      	b.n	b51a2 <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b515e:	290d      	cmp	r1, #13
   b5160:	d01f      	beq.n	b51a2 <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b5162:	7e03      	ldrb	r3, [r0, #24]
   b5164:	9302      	str	r3, [sp, #8]
   b5166:	8ac3      	ldrh	r3, [r0, #22]
   b5168:	9301      	str	r3, [sp, #4]
   b516a:	8a83      	ldrh	r3, [r0, #20]
   b516c:	9300      	str	r3, [sp, #0]
   b516e:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b5172:	460b      	mov	r3, r1
   b5174:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b5178:	f7ff ff5c 	bl	b5034 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b517c:	7e20      	ldrb	r0, [r4, #24]
   b517e:	8a23      	ldrh	r3, [r4, #16]
   b5180:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b5184:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b5188:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b518a:	b21b      	sxth	r3, r3
   b518c:	4602      	mov	r2, r0
   b518e:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b5190:	b139      	cbz	r1, b51a2 <_ZN12Adafruit_GFX5writeEh+0x5e>
   b5192:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b5196:	f06f 0505 	mvn.w	r5, #5
   b519a:	fb05 1100 	mla	r1, r5, r0, r1
   b519e:	428b      	cmp	r3, r1
   b51a0:	dcd6      	bgt.n	b5150 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b51a2:	2001      	movs	r0, #1
   b51a4:	b005      	add	sp, #20
   b51a6:	bd30      	pop	{r4, r5, pc}

000b51a8 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   b51a8:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   b51aa:	8242      	strh	r2, [r0, #18]
}
   b51ac:	4770      	bx	lr

000b51ae <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b51ae:	2901      	cmp	r1, #1
   b51b0:	bf38      	it	cc
   b51b2:	2101      	movcc	r1, #1
   b51b4:	7601      	strb	r1, [r0, #24]
}
   b51b6:	4770      	bx	lr

000b51b8 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   b51b8:	82c1      	strh	r1, [r0, #22]
   b51ba:	8281      	strh	r1, [r0, #20]
}
   b51bc:	4770      	bx	lr

000b51be <_ZN12Adafruit_GFX11getRotationEv>:
}
   b51be:	7e40      	ldrb	r0, [r0, #25]
   b51c0:	4770      	bx	lr

000b51c2 <_ZN12Adafruit_GFX5widthEv>:
}
   b51c2:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b51c6:	4770      	bx	lr

000b51c8 <_ZN12Adafruit_GFX6heightEv>:
}
   b51c8:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b51cc:	4770      	bx	lr
	...

000b51d0 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b51d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b51d2:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b51d4:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b51d8:	2d02      	cmp	r5, #2
   b51da:	d069      	beq.n	b52b0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b51dc:	2d03      	cmp	r5, #3
   b51de:	f000 8099 	beq.w	b5314 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b51e2:	2d01      	cmp	r5, #1
   b51e4:	d16c      	bne.n	b52c0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b51e6:	8905      	ldrh	r5, [r0, #8]
   b51e8:	43d2      	mvns	r2, r2
   b51ea:	442a      	add	r2, r5
   b51ec:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b51ee:	2a00      	cmp	r2, #0
   b51f0:	db5d      	blt.n	b52ae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b51f2:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b51f6:	4295      	cmp	r5, r2
   b51f8:	dd59      	ble.n	b52ae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b51fa:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b51fc:	bfbe      	ittt	lt
   b51fe:	185b      	addlt	r3, r3, r1
   b5200:	b21b      	sxthlt	r3, r3
    __y = 0;
   b5202:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b5204:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b5208:	18cd      	adds	r5, r1, r3
   b520a:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b520c:	bfc4      	itt	gt
   b520e:	1a43      	subgt	r3, r0, r1
   b5210:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b5212:	2b00      	cmp	r3, #0
   b5214:	dd4b      	ble.n	b52ae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b5216:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b521a:	f8df c120 	ldr.w	ip, [pc, #288]	; b533c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b521e:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b5222:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b5226:	b2db      	uxtb	r3, r3
  pBuf += x;
   b5228:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b522c:	d01a      	beq.n	b5264 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b522e:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b5232:	4e40      	ldr	r6, [pc, #256]	; (b5334 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b5234:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b5236:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b5238:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b523a:	bf3f      	itttt	cc
   b523c:	eba5 0e03 	subcc.w	lr, r5, r3
   b5240:	26ff      	movcc	r6, #255	; 0xff
   b5242:	fa46 f60e 	asrcc.w	r6, r6, lr
   b5246:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b5248:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b524c:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b524e:	bf0c      	ite	eq
   b5250:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b5252:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b5254:	42ab      	cmp	r3, r5
   b5256:	f80c 6002 	strb.w	r6, [ip, r2]
   b525a:	d328      	bcc.n	b52ae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b525c:	3908      	subs	r1, #8
   b525e:	440b      	add	r3, r1
   b5260:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b5262:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b5264:	2b07      	cmp	r3, #7
   b5266:	d919      	bls.n	b529c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b5268:	2c01      	cmp	r4, #1
   b526a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b526e:	bf18      	it	ne
   b5270:	2500      	movne	r5, #0
   b5272:	b2ed      	uxtb	r5, r5
   b5274:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b5278:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b527a:	3a08      	subs	r2, #8
   b527c:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b527e:	2a07      	cmp	r2, #7
      *pBuf = val;
   b5280:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b5284:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b5288:	d8f7      	bhi.n	b527a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b528a:	f1a3 0208 	sub.w	r2, r3, #8
   b528e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b5292:	3201      	adds	r2, #1
   b5294:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b5298:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b529c:	b13b      	cbz	r3, b52ae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b529e:	4a26      	ldr	r2, [pc, #152]	; (b5338 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b52a0:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b52a2:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b52a4:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b52a6:	bf0c      	ite	eq
   b52a8:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b52aa:	4393      	bicne	r3, r2
   b52ac:	7003      	strb	r3, [r0, #0]
}
   b52ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b52b0:	8945      	ldrh	r5, [r0, #10]
   b52b2:	43d2      	mvns	r2, r2
   b52b4:	442a      	add	r2, r5
      x -= (w-1);
   b52b6:	18cd      	adds	r5, r1, r3
   b52b8:	8901      	ldrh	r1, [r0, #8]
   b52ba:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b52bc:	b212      	sxth	r2, r2
      x -= (w-1);
   b52be:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b52c0:	2a00      	cmp	r2, #0
   b52c2:	dbf4      	blt.n	b52ae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b52c4:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b52c8:	4295      	cmp	r5, r2
   b52ca:	ddf0      	ble.n	b52ae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b52cc:	2900      	cmp	r1, #0
    w += x;
   b52ce:	bfbe      	ittt	lt
   b52d0:	185b      	addlt	r3, r3, r1
   b52d2:	b21b      	sxthlt	r3, r3
    x = 0;
   b52d4:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b52d6:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b52da:	18ce      	adds	r6, r1, r3
   b52dc:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b52de:	bfc4      	itt	gt
   b52e0:	1a6b      	subgt	r3, r5, r1
   b52e2:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b52e4:	2b00      	cmp	r3, #0
   b52e6:	dde2      	ble.n	b52ae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b52e8:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b52ea:	2580      	movs	r5, #128	; 0x80
   b52ec:	fb10 1105 	smlabb	r1, r0, r5, r1
   b52f0:	4812      	ldr	r0, [pc, #72]	; (b533c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b52f2:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b52f4:	f002 0007 	and.w	r0, r2, #7
   b52f8:	2201      	movs	r2, #1
   b52fa:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b52fc:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b52fe:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b5300:	440b      	add	r3, r1
   b5302:	d10c      	bne.n	b531e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b5304:	428b      	cmp	r3, r1
   b5306:	d0d2      	beq.n	b52ae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5308:	f811 0b01 	ldrb.w	r0, [r1], #1
   b530c:	4310      	orrs	r0, r2
   b530e:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5312:	e7f7      	b.n	b5304 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b5314:	18cd      	adds	r5, r1, r3
   b5316:	8941      	ldrh	r1, [r0, #10]
   b5318:	1b49      	subs	r1, r1, r5
   b531a:	b209      	sxth	r1, r1
      break;
   b531c:	e767      	b.n	b51ee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b531e:	43d2      	mvns	r2, r2
   b5320:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b5322:	428b      	cmp	r3, r1
   b5324:	d0c3      	beq.n	b52ae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5326:	f811 0b01 	ldrb.w	r0, [r1], #1
   b532a:	4010      	ands	r0, r2
   b532c:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5330:	e7f7      	b.n	b5322 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b5332:	bf00      	nop
   b5334:	2003e07c 	.word	0x2003e07c
   b5338:	2003e074 	.word	0x2003e074
   b533c:	2003e084 	.word	0x2003e084

000b5340 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5340:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b5342:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5344:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b5348:	2d02      	cmp	r5, #2
   b534a:	d034      	beq.n	b53b6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b534c:	2d03      	cmp	r5, #3
   b534e:	f000 809b 	beq.w	b5488 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b5352:	2d01      	cmp	r5, #1
   b5354:	d137      	bne.n	b53c6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b5356:	18d5      	adds	r5, r2, r3
   b5358:	8902      	ldrh	r2, [r0, #8]
   b535a:	1b52      	subs	r2, r2, r5
   b535c:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b535e:	2900      	cmp	r1, #0
   b5360:	f2c0 8091 	blt.w	b5486 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5364:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b5368:	428d      	cmp	r5, r1
   b536a:	f340 808c 	ble.w	b5486 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b536e:	2a00      	cmp	r2, #0
    w += x;
   b5370:	bfbe      	ittt	lt
   b5372:	189b      	addlt	r3, r3, r2
   b5374:	b21b      	sxthlt	r3, r3
    x = 0;
   b5376:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b5378:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b537c:	18d6      	adds	r6, r2, r3
   b537e:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b5380:	bfc4      	itt	gt
   b5382:	1aab      	subgt	r3, r5, r2
   b5384:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b5386:	2b00      	cmp	r3, #0
   b5388:	dd7d      	ble.n	b5486 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b538a:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b538c:	2580      	movs	r5, #128	; 0x80
   b538e:	fb10 2205 	smlabb	r2, r0, r5, r2
   b5392:	4845      	ldr	r0, [pc, #276]	; (b54a8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b5394:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b5396:	f001 0007 	and.w	r0, r1, #7
   b539a:	2101      	movs	r1, #1
   b539c:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b539e:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b53a0:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b53a2:	4413      	add	r3, r2
   b53a4:	d175      	bne.n	b5492 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b53a6:	429a      	cmp	r2, r3
   b53a8:	d06d      	beq.n	b5486 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b53aa:	f812 0b01 	ldrb.w	r0, [r2], #1
   b53ae:	4308      	orrs	r0, r1
   b53b0:	f802 0c01 	strb.w	r0, [r2, #-1]
   b53b4:	e7f7      	b.n	b53a6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b53b6:	8905      	ldrh	r5, [r0, #8]
   b53b8:	43c9      	mvns	r1, r1
   b53ba:	4429      	add	r1, r5
      y -= (h-1);
   b53bc:	18d5      	adds	r5, r2, r3
   b53be:	8942      	ldrh	r2, [r0, #10]
   b53c0:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b53c2:	b209      	sxth	r1, r1
      y -= (h-1);
   b53c4:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b53c6:	2900      	cmp	r1, #0
   b53c8:	db5d      	blt.n	b5486 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b53ca:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b53ce:	428d      	cmp	r5, r1
   b53d0:	dd59      	ble.n	b5486 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b53d2:	2a00      	cmp	r2, #0
    __h += __y;
   b53d4:	bfbe      	ittt	lt
   b53d6:	189b      	addlt	r3, r3, r2
   b53d8:	b21b      	sxthlt	r3, r3
    __y = 0;
   b53da:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b53dc:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b53e0:	18d5      	adds	r5, r2, r3
   b53e2:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b53e4:	bfc4      	itt	gt
   b53e6:	1a83      	subgt	r3, r0, r2
   b53e8:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b53ea:	2b00      	cmp	r3, #0
   b53ec:	dd4b      	ble.n	b5486 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b53ee:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b53f2:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b54a8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b53f6:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b53fa:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b53fe:	b2db      	uxtb	r3, r3
  pBuf += x;
   b5400:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b5404:	d01a      	beq.n	b543c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b5406:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b540a:	4e28      	ldr	r6, [pc, #160]	; (b54ac <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b540c:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b540e:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b5410:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b5412:	bf3f      	itttt	cc
   b5414:	eba5 0e03 	subcc.w	lr, r5, r3
   b5418:	26ff      	movcc	r6, #255	; 0xff
   b541a:	fa46 f60e 	asrcc.w	r6, r6, lr
   b541e:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b5420:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b5424:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b5426:	bf0c      	ite	eq
   b5428:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b542a:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b542c:	42ab      	cmp	r3, r5
   b542e:	f80c 6001 	strb.w	r6, [ip, r1]
   b5432:	d328      	bcc.n	b5486 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b5434:	3a08      	subs	r2, #8
   b5436:	4413      	add	r3, r2
   b5438:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b543a:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b543c:	2b07      	cmp	r3, #7
   b543e:	d919      	bls.n	b5474 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b5440:	2c01      	cmp	r4, #1
   b5442:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b5446:	bf18      	it	ne
   b5448:	2500      	movne	r5, #0
   b544a:	b2ed      	uxtb	r5, r5
   b544c:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b5450:	461a      	mov	r2, r3
      h -= 8;
   b5452:	3a08      	subs	r2, #8
   b5454:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b5456:	2a07      	cmp	r2, #7
      *pBuf = val;
   b5458:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b545c:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b5460:	d8f7      	bhi.n	b5452 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b5462:	f1a3 0208 	sub.w	r2, r3, #8
   b5466:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b546a:	3201      	adds	r2, #1
   b546c:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b5470:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b5474:	b13b      	cbz	r3, b5486 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b5476:	4a0e      	ldr	r2, [pc, #56]	; (b54b0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b5478:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b547a:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b547c:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b547e:	bf0c      	ite	eq
   b5480:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b5482:	4393      	bicne	r3, r2
   b5484:	7003      	strb	r3, [r0, #0]
}
   b5486:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b5488:	8945      	ldrh	r5, [r0, #10]
   b548a:	43c9      	mvns	r1, r1
   b548c:	4429      	add	r1, r5
   b548e:	b209      	sxth	r1, r1
      break;
   b5490:	e765      	b.n	b535e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b5492:	43c9      	mvns	r1, r1
   b5494:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b5496:	429a      	cmp	r2, r3
   b5498:	d0f5      	beq.n	b5486 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b549a:	f812 0b01 	ldrb.w	r0, [r2], #1
   b549e:	4008      	ands	r0, r1
   b54a0:	f802 0c01 	strb.w	r0, [r2, #-1]
   b54a4:	e7f7      	b.n	b5496 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b54a6:	bf00      	nop
   b54a8:	2003e084 	.word	0x2003e084
   b54ac:	2003e07c 	.word	0x2003e07c
   b54b0:	2003e074 	.word	0x2003e074

000b54b4 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b54b4:	4770      	bx	lr
	...

000b54b8 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b54b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b54ba:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b54bc:	4606      	mov	r6, r0
   b54be:	4614      	mov	r4, r2
   b54c0:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b54c2:	db2d      	blt.n	b5520 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b54c4:	f7ff fe7d 	bl	b51c2 <_ZN12Adafruit_GFX5widthEv>
   b54c8:	42a8      	cmp	r0, r5
   b54ca:	dd29      	ble.n	b5520 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b54cc:	2c00      	cmp	r4, #0
   b54ce:	db27      	blt.n	b5520 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b54d0:	4630      	mov	r0, r6
   b54d2:	f7ff fe79 	bl	b51c8 <_ZN12Adafruit_GFX6heightEv>
   b54d6:	42a0      	cmp	r0, r4
   b54d8:	dd22      	ble.n	b5520 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b54da:	4630      	mov	r0, r6
   b54dc:	f7ff fe6f 	bl	b51be <_ZN12Adafruit_GFX11getRotationEv>
   b54e0:	2802      	cmp	r0, #2
   b54e2:	d01e      	beq.n	b5522 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b54e4:	2803      	cmp	r0, #3
   b54e6:	d025      	beq.n	b5534 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b54e8:	2801      	cmp	r0, #1
   b54ea:	d104      	bne.n	b54f6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b54ec:	8933      	ldrh	r3, [r6, #8]
   b54ee:	43e2      	mvns	r2, r4
   b54f0:	441a      	add	r2, r3
    break;
   b54f2:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b54f4:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b54f6:	2c00      	cmp	r4, #0
   b54f8:	4622      	mov	r2, r4
   b54fa:	bfb8      	it	lt
   b54fc:	1de2      	addlt	r2, r4, #7
   b54fe:	10d2      	asrs	r2, r2, #3
   b5500:	2180      	movs	r1, #128	; 0x80
   b5502:	fb12 5501 	smlabb	r5, r2, r1, r5
   b5506:	490e      	ldr	r1, [pc, #56]	; (b5540 <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b5508:	2201      	movs	r2, #1
   b550a:	f004 0407 	and.w	r4, r4, #7
   b550e:	574b      	ldrsb	r3, [r1, r5]
   b5510:	fa02 f404 	lsl.w	r4, r2, r4
   b5514:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b5516:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b5518:	bf0c      	ite	eq
   b551a:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b551c:	43a3      	bicne	r3, r4
   b551e:	554b      	strb	r3, [r1, r5]
}
   b5520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b5522:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b5524:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b5526:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b5528:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b552a:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b552c:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b552e:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b5530:	b224      	sxth	r4, r4
    break;
   b5532:	e7e0      	b.n	b54f6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b5534:	8973      	ldrh	r3, [r6, #10]
   b5536:	3b01      	subs	r3, #1
   b5538:	1b5b      	subs	r3, r3, r5
    break;
   b553a:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b553c:	b21c      	sxth	r4, r3
    break;
   b553e:	e7da      	b.n	b54f6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b5540:	2003e084 	.word	0x2003e084

000b5544 <_ZN16Adafruit_SSD1306D0Ev>:
   b5544:	b510      	push	{r4, lr}
   b5546:	2124      	movs	r1, #36	; 0x24
   b5548:	4604      	mov	r4, r0
   b554a:	f7fe fda6 	bl	b409a <_ZdlPvj>
   b554e:	4620      	mov	r0, r4
   b5550:	bd10      	pop	{r4, pc}
	...

000b5554 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b5554:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b5556:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b5558:	4604      	mov	r4, r0
   b555a:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b555c:	2180      	movs	r1, #128	; 0x80
   b555e:	f7ff fd55 	bl	b500c <_ZN12Adafruit_GFXC1Ess>
   b5562:	4b06      	ldr	r3, [pc, #24]	; (b557c <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b5564:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b5566:	23ff      	movs	r3, #255	; 0xff
   b5568:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b556c:	7763      	strb	r3, [r4, #29]
   b556e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5572:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b5574:	f884 5020 	strb.w	r5, [r4, #32]
}
   b5578:	4620      	mov	r0, r4
   b557a:	bd38      	pop	{r3, r4, r5, pc}
   b557c:	000b8750 	.word	0x000b8750

000b5580 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b5580:	4802      	ldr	r0, [pc, #8]	; (b558c <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b5582:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b5586:	2100      	movs	r1, #0
   b5588:	f002 baf0 	b.w	b7b6c <memset>
   b558c:	2003e084 	.word	0x2003e084

000b5590 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b5590:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b5592:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b5596:	b143      	cbz	r3, b55aa <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b5598:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b559a:	f7ff fc43 	bl	b4e24 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b559e:	9901      	ldr	r1, [sp, #4]
}
   b55a0:	b003      	add	sp, #12
   b55a2:	f85d eb04 	ldr.w	lr, [sp], #4
   b55a6:	f001 ba91 	b.w	b6acc <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b55aa:	460b      	mov	r3, r1
   b55ac:	7f81      	ldrb	r1, [r0, #30]
   b55ae:	7f40      	ldrb	r0, [r0, #29]
   b55b0:	2201      	movs	r2, #1
}
   b55b2:	b003      	add	sp, #12
   b55b4:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b55b8:	f002 b90b 	b.w	b77d2 <shiftOut>

000b55bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b55bc:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b55be:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b55c2:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b55c4:	4604      	mov	r4, r0
   b55c6:	460d      	mov	r5, r1
  if (sid != -1)
   b55c8:	d01d      	beq.n	b5606 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b55ca:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b55ce:	2101      	movs	r1, #1
   b55d0:	b280      	uxth	r0, r0
   b55d2:	f002 f8d2 	bl	b777a <digitalWrite>
    digitalWrite(dc, LOW);
   b55d6:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b55da:	2100      	movs	r1, #0
   b55dc:	b280      	uxth	r0, r0
   b55de:	f002 f8cc 	bl	b777a <digitalWrite>
    digitalWrite(cs, LOW);
   b55e2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b55e6:	2100      	movs	r1, #0
   b55e8:	b280      	uxth	r0, r0
   b55ea:	f002 f8c6 	bl	b777a <digitalWrite>
    fastSPIwrite(c);
   b55ee:	4629      	mov	r1, r5
   b55f0:	4620      	mov	r0, r4
   b55f2:	f7ff ffcd 	bl	b5590 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b55f6:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b55fa:	2101      	movs	r1, #1
}
   b55fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b5600:	b280      	uxth	r0, r0
   b5602:	f002 b8ba 	b.w	b777a <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b5606:	f002 f921 	bl	b784c <_Z19__fetch_global_Wirev>
   b560a:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b560e:	f000 ff53 	bl	b64b8 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b5612:	f002 f91b 	bl	b784c <_Z19__fetch_global_Wirev>
   b5616:	6803      	ldr	r3, [r0, #0]
   b5618:	2100      	movs	r1, #0
   b561a:	689b      	ldr	r3, [r3, #8]
   b561c:	4798      	blx	r3
    Wire.write(c);
   b561e:	f002 f915 	bl	b784c <_Z19__fetch_global_Wirev>
   b5622:	6803      	ldr	r3, [r0, #0]
   b5624:	4629      	mov	r1, r5
   b5626:	689b      	ldr	r3, [r3, #8]
   b5628:	4798      	blx	r3
    Wire.endTransmission();
   b562a:	f002 f90f 	bl	b784c <_Z19__fetch_global_Wirev>
}
   b562e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b5632:	f000 bf48 	b.w	b64c6 <_ZN7TwoWire15endTransmissionEv>
	...

000b5638 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b5638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b563a:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b563c:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b563e:	f7ff ffbd 	bl	b55bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b5642:	2100      	movs	r1, #0
   b5644:	4620      	mov	r0, r4
   b5646:	f7ff ffb9 	bl	b55bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b564a:	217f      	movs	r1, #127	; 0x7f
   b564c:	4620      	mov	r0, r4
   b564e:	f7ff ffb5 	bl	b55bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b5652:	2122      	movs	r1, #34	; 0x22
   b5654:	4620      	mov	r0, r4
   b5656:	f7ff ffb1 	bl	b55bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b565a:	2100      	movs	r1, #0
   b565c:	4620      	mov	r0, r4
   b565e:	f7ff ffad 	bl	b55bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b5662:	2107      	movs	r1, #7
   b5664:	4620      	mov	r0, r4
   b5666:	f7ff ffa9 	bl	b55bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b566a:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b566e:	4f29      	ldr	r7, [pc, #164]	; (b5714 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b5670:	3301      	adds	r3, #1
   b5672:	d02a      	beq.n	b56ca <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b5674:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5678:	2101      	movs	r1, #1
   b567a:	b280      	uxth	r0, r0
   b567c:	f002 f87d 	bl	b777a <digitalWrite>
    digitalWrite(dc, HIGH);
   b5680:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b5684:	2101      	movs	r1, #1
   b5686:	b280      	uxth	r0, r0
   b5688:	f002 f877 	bl	b777a <digitalWrite>
    digitalWrite(cs, LOW);
   b568c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5690:	2100      	movs	r1, #0
   b5692:	b280      	uxth	r0, r0
   b5694:	f002 f871 	bl	b777a <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b5698:	2001      	movs	r0, #1
   b569a:	f000 fb9f 	bl	b5ddc <HAL_Delay_Microseconds>
   b569e:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b56a2:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b56a4:	f817 1b01 	ldrb.w	r1, [r7], #1
   b56a8:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b56aa:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b56ac:	f7ff ff70 	bl	b5590 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b56b0:	2d00      	cmp	r5, #0
   b56b2:	d1f6      	bne.n	b56a2 <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b56b4:	2001      	movs	r0, #1
   b56b6:	f000 fb91 	bl	b5ddc <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b56ba:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b56be:	2101      	movs	r1, #1
}
   b56c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b56c4:	b280      	uxth	r0, r0
   b56c6:	f002 b858 	b.w	b777a <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b56ca:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b56cc:	f002 f8be 	bl	b784c <_Z19__fetch_global_Wirev>
   b56d0:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b56d4:	f000 fef0 	bl	b64b8 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b56d8:	f002 f8b8 	bl	b784c <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b56dc:	6803      	ldr	r3, [r0, #0]
   b56de:	2140      	movs	r1, #64	; 0x40
   b56e0:	689b      	ldr	r3, [r3, #8]
   b56e2:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b56e4:	f105 0610 	add.w	r6, r5, #16
   b56e8:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b56ea:	f002 f8af 	bl	b784c <_Z19__fetch_global_Wirev>
   b56ee:	6803      	ldr	r3, [r0, #0]
   b56f0:	5d79      	ldrb	r1, [r7, r5]
   b56f2:	689b      	ldr	r3, [r3, #8]
   b56f4:	4798      	blx	r3
		i++;
   b56f6:	1c6b      	adds	r3, r5, #1
   b56f8:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b56fa:	42ae      	cmp	r6, r5
   b56fc:	d1f5      	bne.n	b56ea <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b56fe:	f002 f8a5 	bl	b784c <_Z19__fetch_global_Wirev>
   b5702:	f000 fee0 	bl	b64c6 <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5706:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b570a:	d100      	bne.n	b570e <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b570c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b570e:	4635      	mov	r5, r6
   b5710:	e7dc      	b.n	b56cc <_ZN16Adafruit_SSD13067displayEv+0x94>
   b5712:	bf00      	nop
   b5714:	2003e084 	.word	0x2003e084

000b5718 <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b5718:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b571a:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b571e:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b5720:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b5722:	4604      	mov	r4, r0
   b5724:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b5726:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b5728:	f000 80c9 	beq.w	b58be <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b572c:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b5730:	2101      	movs	r1, #1
   b5732:	b280      	uxth	r0, r0
   b5734:	f002 f810 	bl	b7758 <pinMode>
    pinMode(cs, OUTPUT);
   b5738:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b573c:	2101      	movs	r1, #1
   b573e:	b280      	uxth	r0, r0
   b5740:	f002 f80a 	bl	b7758 <pinMode>
    if (!hwSPI){
   b5744:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b5748:	2b00      	cmp	r3, #0
   b574a:	f000 80a6 	beq.w	b589a <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b574e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5752:	2101      	movs	r1, #1
   b5754:	b280      	uxth	r0, r0
   b5756:	f002 f810 	bl	b777a <digitalWrite>
        instance().setBitOrder(order);
   b575a:	f7ff fb63 	bl	b4e24 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b575e:	2101      	movs	r1, #1
   b5760:	f001 f91e 	bl	b69a0 <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b5764:	f7ff fb5e 	bl	b4e24 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5768:	2110      	movs	r1, #16
   b576a:	f001 f989 	bl	b6a80 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b576e:	f7ff fb59 	bl	b4e24 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5772:	2100      	movs	r1, #0
   b5774:	f001 f928 	bl	b69c8 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b5778:	f7ff fb54 	bl	b4e24 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b577c:	f001 f8fc 	bl	b6978 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b5780:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5784:	2101      	movs	r1, #1
   b5786:	b280      	uxth	r0, r0
   b5788:	f001 ffe6 	bl	b7758 <pinMode>
  digitalWrite(rst, HIGH);
   b578c:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5790:	2101      	movs	r1, #1
   b5792:	b280      	uxth	r0, r0
   b5794:	f001 fff1 	bl	b777a <digitalWrite>
  delay(1);
   b5798:	2001      	movs	r0, #1
   b579a:	f000 fde7 	bl	b636c <delay>
  digitalWrite(rst, LOW);
   b579e:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b57a2:	2100      	movs	r1, #0
   b57a4:	b280      	uxth	r0, r0
   b57a6:	f001 ffe8 	bl	b777a <digitalWrite>
  delay(10);
   b57aa:	200a      	movs	r0, #10
   b57ac:	f000 fdde 	bl	b636c <delay>
  digitalWrite(rst, HIGH);
   b57b0:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b57b4:	2101      	movs	r1, #1
   b57b6:	b280      	uxth	r0, r0
   b57b8:	f001 ffdf 	bl	b777a <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b57bc:	4620      	mov	r0, r4
   b57be:	21ae      	movs	r1, #174	; 0xae
   b57c0:	f7ff fefc 	bl	b55bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b57c4:	4620      	mov	r0, r4
   b57c6:	21d5      	movs	r1, #213	; 0xd5
   b57c8:	f7ff fef8 	bl	b55bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b57cc:	4620      	mov	r0, r4
   b57ce:	2180      	movs	r1, #128	; 0x80
   b57d0:	f7ff fef4 	bl	b55bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b57d4:	4620      	mov	r0, r4
   b57d6:	21a8      	movs	r1, #168	; 0xa8
   b57d8:	f7ff fef0 	bl	b55bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b57dc:	4620      	mov	r0, r4
   b57de:	213f      	movs	r1, #63	; 0x3f
   b57e0:	f7ff feec 	bl	b55bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b57e4:	4620      	mov	r0, r4
   b57e6:	21d3      	movs	r1, #211	; 0xd3
   b57e8:	f7ff fee8 	bl	b55bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b57ec:	4620      	mov	r0, r4
   b57ee:	2100      	movs	r1, #0
   b57f0:	f7ff fee4 	bl	b55bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b57f4:	4620      	mov	r0, r4
   b57f6:	2140      	movs	r1, #64	; 0x40
   b57f8:	f7ff fee0 	bl	b55bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b57fc:	218d      	movs	r1, #141	; 0x8d
   b57fe:	4620      	mov	r0, r4
   b5800:	f7ff fedc 	bl	b55bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5804:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b5806:	bf0c      	ite	eq
   b5808:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b580a:	2114      	movne	r1, #20
   b580c:	4620      	mov	r0, r4
   b580e:	f7ff fed5 	bl	b55bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b5812:	4620      	mov	r0, r4
   b5814:	2120      	movs	r1, #32
   b5816:	f7ff fed1 	bl	b55bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b581a:	4620      	mov	r0, r4
   b581c:	2100      	movs	r1, #0
   b581e:	f7ff fecd 	bl	b55bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b5822:	4620      	mov	r0, r4
   b5824:	21a1      	movs	r1, #161	; 0xa1
   b5826:	f7ff fec9 	bl	b55bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b582a:	4620      	mov	r0, r4
   b582c:	21c8      	movs	r1, #200	; 0xc8
   b582e:	f7ff fec5 	bl	b55bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b5832:	4620      	mov	r0, r4
   b5834:	21da      	movs	r1, #218	; 0xda
   b5836:	f7ff fec1 	bl	b55bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b583a:	4620      	mov	r0, r4
   b583c:	2112      	movs	r1, #18
   b583e:	f7ff febd 	bl	b55bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b5842:	2181      	movs	r1, #129	; 0x81
   b5844:	4620      	mov	r0, r4
   b5846:	f7ff feb9 	bl	b55bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b584a:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b584c:	bf0c      	ite	eq
   b584e:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b5850:	21cf      	movne	r1, #207	; 0xcf
   b5852:	4620      	mov	r0, r4
   b5854:	f7ff feb2 	bl	b55bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b5858:	21d9      	movs	r1, #217	; 0xd9
   b585a:	4620      	mov	r0, r4
   b585c:	f7ff feae 	bl	b55bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5860:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b5862:	bf0c      	ite	eq
   b5864:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b5866:	21f1      	movne	r1, #241	; 0xf1
   b5868:	4620      	mov	r0, r4
   b586a:	f7ff fea7 	bl	b55bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b586e:	4620      	mov	r0, r4
   b5870:	21db      	movs	r1, #219	; 0xdb
   b5872:	f7ff fea3 	bl	b55bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b5876:	4620      	mov	r0, r4
   b5878:	2140      	movs	r1, #64	; 0x40
   b587a:	f7ff fe9f 	bl	b55bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b587e:	4620      	mov	r0, r4
   b5880:	21a4      	movs	r1, #164	; 0xa4
   b5882:	f7ff fe9b 	bl	b55bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b5886:	4620      	mov	r0, r4
   b5888:	21a6      	movs	r1, #166	; 0xa6
   b588a:	f7ff fe97 	bl	b55bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b588e:	4620      	mov	r0, r4
   b5890:	21af      	movs	r1, #175	; 0xaf
}
   b5892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b5896:	f7ff be91 	b.w	b55bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b589a:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b589e:	2101      	movs	r1, #1
   b58a0:	b280      	uxth	r0, r0
   b58a2:	f001 ff59 	bl	b7758 <pinMode>
    	pinMode(sclk, OUTPUT);
   b58a6:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b58aa:	2101      	movs	r1, #1
   b58ac:	b280      	uxth	r0, r0
   b58ae:	f001 ff53 	bl	b7758 <pinMode>
    if (hwSPI){
   b58b2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b58b6:	2b00      	cmp	r3, #0
   b58b8:	f43f af62 	beq.w	b5780 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b58bc:	e747      	b.n	b574e <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b58be:	f001 ffc5 	bl	b784c <_Z19__fetch_global_Wirev>
   b58c2:	f000 fdef 	bl	b64a4 <_ZN7TwoWire5beginEv>
   b58c6:	e75b      	b.n	b5780 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b58c8 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b58c8:	b538      	push	{r3, r4, r5, lr}
   b58ca:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   b58cc:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b58ce:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   b58d0:	b108      	cbz	r0, b58d6 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   b58d2:	f000 fd07 	bl	b62e4 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   b58d6:	79a3      	ldrb	r3, [r4, #6]
   b58d8:	2b06      	cmp	r3, #6
   b58da:	bf0c      	ite	eq
   b58dc:	2004      	moveq	r0, #4
   b58de:	2003      	movne	r0, #3
   b58e0:	fb10 f005 	smulbb	r0, r0, r5
   b58e4:	b280      	uxth	r0, r0
   b58e6:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   b58e8:	f000 fcf4 	bl	b62d4 <malloc>
   b58ec:	60e0      	str	r0, [r4, #12]
   b58ee:	b128      	cbz	r0, b58fc <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   b58f0:	88a2      	ldrh	r2, [r4, #4]
   b58f2:	2100      	movs	r1, #0
   b58f4:	f002 f93a 	bl	b7b6c <memset>
    numLEDs = n;
   b58f8:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   b58fa:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   b58fc:	80a0      	strh	r0, [r4, #4]
   b58fe:	8060      	strh	r0, [r4, #2]
}
   b5900:	e7fb      	b.n	b58fa <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000b5902 <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
   b5902:	b510      	push	{r4, lr}
   b5904:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   b5906:	2101      	movs	r1, #1
   b5908:	79c0      	ldrb	r0, [r0, #7]
   b590a:	f001 ff25 	bl	b7758 <pinMode>
  digitalWrite(pin, LOW);
   b590e:	79e0      	ldrb	r0, [r4, #7]
   b5910:	2100      	movs	r1, #0
   b5912:	f001 ff32 	bl	b777a <digitalWrite>
  begun = true;
   b5916:	2301      	movs	r3, #1
   b5918:	7023      	strb	r3, [r4, #0]
}
   b591a:	bd10      	pop	{r4, pc}

000b591c <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b591c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   b591e:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b5920:	4605      	mov	r5, r0
   b5922:	460c      	mov	r4, r1
    if (begun) {
   b5924:	b11b      	cbz	r3, b592e <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   b5926:	79c0      	ldrb	r0, [r0, #7]
   b5928:	2100      	movs	r1, #0
   b592a:	f001 ff15 	bl	b7758 <pinMode>
    }
    pin = p;
    if (begun) {
   b592e:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   b5930:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   b5932:	b15b      	cbz	r3, b594c <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   b5934:	b2a0      	uxth	r0, r4
   b5936:	2101      	movs	r1, #1
   b5938:	9001      	str	r0, [sp, #4]
   b593a:	f001 ff0d 	bl	b7758 <pinMode>
        digitalWrite(p, LOW);
   b593e:	9801      	ldr	r0, [sp, #4]
   b5940:	2100      	movs	r1, #0
    }
}
   b5942:	b003      	add	sp, #12
   b5944:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   b5948:	f001 bf17 	b.w	b777a <digitalWrite>
}
   b594c:	b003      	add	sp, #12
   b594e:	bd30      	pop	{r4, r5, pc}

000b5950 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b5950:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b5952:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b5954:	4604      	mov	r4, r0
   b5956:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b5958:	7183      	strb	r3, [r0, #6]
   b595a:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b595e:	7005      	strb	r5, [r0, #0]
   b5960:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   b5962:	f7ff ffb1 	bl	b58c8 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   b5966:	4620      	mov	r0, r4
   b5968:	4631      	mov	r1, r6
   b596a:	f7ff ffd7 	bl	b591c <_ZN17Adafruit_NeoPixel6setPinEh>
}
   b596e:	4620      	mov	r0, r4
   b5970:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5974 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   b5974:	68c3      	ldr	r3, [r0, #12]
   b5976:	2b00      	cmp	r3, #0
   b5978:	f000 81a4 	beq.w	b5cc4 <_ZN17Adafruit_NeoPixel4showEv+0x350>
void Adafruit_NeoPixel::show(void) {
   b597c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5980:	7983      	ldrb	r3, [r0, #6]
   b5982:	3b02      	subs	r3, #2
   b5984:	b2db      	uxtb	r3, r3
   b5986:	2b04      	cmp	r3, #4
   b5988:	bf9c      	itt	ls
   b598a:	4abf      	ldrls	r2, [pc, #764]	; (b5c88 <_ZN17Adafruit_NeoPixel4showEv+0x314>)
   b598c:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   b5990:	b085      	sub	sp, #20
   b5992:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   b5994:	bf88      	it	hi
   b5996:	2432      	movhi	r4, #50	; 0x32
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b5998:	f000 fa28 	bl	b5dec <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   b599c:	692b      	ldr	r3, [r5, #16]
   b599e:	1ac0      	subs	r0, r0, r3
   b59a0:	42a0      	cmp	r0, r4
   b59a2:	d3f9      	bcc.n	b5998 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   b59a4:	4cb9      	ldr	r4, [pc, #740]	; (b5c8c <_ZN17Adafruit_NeoPixel4showEv+0x318>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b59a6:	88ae      	ldrh	r6, [r5, #4]
    if( (PWM[device]->ENABLE == 0)                            &&
   b59a8:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b59ac:	b91b      	cbnz	r3, b59b6 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b59ae:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b59b2:	2b00      	cmp	r3, #0
   b59b4:	db7e      	blt.n	b5ab4 <_ZN17Adafruit_NeoPixel4showEv+0x140>
   b59b6:	4cb6      	ldr	r4, [pc, #728]	; (b5c90 <_ZN17Adafruit_NeoPixel4showEv+0x31c>)
   b59b8:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b59bc:	b923      	cbnz	r3, b59c8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b59be:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b59c2:	2b00      	cmp	r3, #0
   b59c4:	f2c0 816e 	blt.w	b5ca4 <_ZN17Adafruit_NeoPixel4showEv+0x330>
   b59c8:	4cb2      	ldr	r4, [pc, #712]	; (b5c94 <_ZN17Adafruit_NeoPixel4showEv+0x320>)
   b59ca:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b59ce:	2b00      	cmp	r3, #0
   b59d0:	f000 8144 	beq.w	b5c5c <_ZN17Adafruit_NeoPixel4showEv+0x2e8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b59d4:	79eb      	ldrb	r3, [r5, #7]
   b59d6:	4ab0      	ldr	r2, [pc, #704]	; (b5c98 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b59d8:	4cb0      	ldr	r4, [pc, #704]	; (b5c9c <_ZN17Adafruit_NeoPixel4showEv+0x328>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b59da:	6812      	ldr	r2, [r2, #0]
   b59dc:	0119      	lsls	r1, r3, #4
   b59de:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b59e2:	5c57      	ldrb	r7, [r2, r1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b59e4:	49ae      	ldr	r1, [pc, #696]	; (b5ca0 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b59e6:	785b      	ldrb	r3, [r3, #1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b59e8:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   b59ec:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   b59f0:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b59f4:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b59f6:	f003 031f 	and.w	r3, r3, #31
   b59fa:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   b59fe:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b5a00:	433a      	orrs	r2, r7
   b5a02:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   b5a04:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b5a06:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b5a0a:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5a0e:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   b5a10:	2900      	cmp	r1, #0
   b5a12:	d044      	beq.n	b5a9e <_ZN17Adafruit_NeoPixel4showEv+0x12a>
   b5a14:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   b5a18:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   b5a1a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   b5a1e:	f818 cb01 	ldrb.w	ip, [r8], #1
   b5a22:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b5a24:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   b5a26:	6863      	ldr	r3, [r4, #4]
   b5a28:	1a9b      	subs	r3, r3, r2
   b5a2a:	2b46      	cmp	r3, #70	; 0x46
   b5a2c:	d9fb      	bls.n	b5a26 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
          cyc  = DWT->CYCCNT;
   b5a2e:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   b5a30:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   b5a34:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   b5a38:	ea43 0307 	orr.w	r3, r3, r7
   b5a3c:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   b5a40:	d02f      	beq.n	b5aa2 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   b5a42:	6863      	ldr	r3, [r4, #4]
   b5a44:	1a9b      	subs	r3, r3, r2
   b5a46:	2b28      	cmp	r3, #40	; 0x28
   b5a48:	d9fb      	bls.n	b5a42 <_ZN17Adafruit_NeoPixel4showEv+0xce>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   b5a4a:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b5a4e:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   b5a50:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b5a54:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   b5a58:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b5a5c:	d1e3      	bne.n	b5a26 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
      for(uint16_t n=0; n<numBytes; n++) {
   b5a5e:	88ab      	ldrh	r3, [r5, #4]
   b5a60:	f10e 0e01 	add.w	lr, lr, #1
   b5a64:	fa1f fe8e 	uxth.w	lr, lr
   b5a68:	4573      	cmp	r3, lr
   b5a6a:	d8d8      	bhi.n	b5a1e <_ZN17Adafruit_NeoPixel4showEv+0xaa>
      while(DWT->CYCCNT - cyc < CYCLES_X00);


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b5a6c:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   b5a70:	fb03 f101 	mul.w	r1, r3, r1
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   b5a74:	6863      	ldr	r3, [r4, #4]
   b5a76:	1a9b      	subs	r3, r3, r2
   b5a78:	2b46      	cmp	r3, #70	; 0x46
   b5a7a:	d9fb      	bls.n	b5a74 <_ZN17Adafruit_NeoPixel4showEv+0x100>
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b5a7c:	6863      	ldr	r3, [r4, #4]
   b5a7e:	eba3 0909 	sub.w	r9, r3, r9
   b5a82:	4589      	cmp	r9, r1
   b5a84:	f0c0 80e4 	bcc.w	b5c50 <_ZN17Adafruit_NeoPixel4showEv+0x2dc>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b5a88:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b5a8c:	f000 f9a6 	bl	b5ddc <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   b5a90:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b5a92:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b5a96:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   b5a9a:	2900      	cmp	r1, #0
   b5a9c:	d1ba      	bne.n	b5a14 <_ZN17Adafruit_NeoPixel4showEv+0xa0>
      uint32_t cyc = 0;
   b5a9e:	460a      	mov	r2, r1
   b5aa0:	e7e8      	b.n	b5a74 <_ZN17Adafruit_NeoPixel4showEv+0x100>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   b5aa2:	6863      	ldr	r3, [r4, #4]
   b5aa4:	1a9b      	subs	r3, r3, r2
   b5aa6:	2b11      	cmp	r3, #17
   b5aa8:	d8cf      	bhi.n	b5a4a <_ZN17Adafruit_NeoPixel4showEv+0xd6>
   b5aaa:	6863      	ldr	r3, [r4, #4]
   b5aac:	1a9b      	subs	r3, r3, r2
   b5aae:	2b11      	cmp	r3, #17
   b5ab0:	d9f7      	bls.n	b5aa2 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
   b5ab2:	e7ca      	b.n	b5a4a <_ZN17Adafruit_NeoPixel4showEv+0xd6>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5ab4:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5ab8:	2b00      	cmp	r3, #0
   b5aba:	f6bf af7c 	bge.w	b59b6 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5abe:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5ac2:	2b00      	cmp	r3, #0
   b5ac4:	f6bf af77 	bge.w	b59b6 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b5ac8:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5acc:	2b00      	cmp	r3, #0
   b5ace:	f6bf af72 	bge.w	b59b6 <_ZN17Adafruit_NeoPixel4showEv+0x42>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b5ad2:	0136      	lsls	r6, r6, #4
   b5ad4:	1d33      	adds	r3, r6, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b5ad6:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b5ad8:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b5ada:	f000 fbfb 	bl	b62d4 <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   b5ade:	2800      	cmp	r0, #0
   b5ae0:	f43f af78 	beq.w	b59d4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
    for(uint16_t n=0; n<numBytes; n++) {
   b5ae4:	88ab      	ldrh	r3, [r5, #4]
   b5ae6:	2b00      	cmp	r3, #0
   b5ae8:	f000 80ed 	beq.w	b5cc6 <_ZN17Adafruit_NeoPixel4showEv+0x352>
      uint8_t pix = pixels[n];
   b5aec:	68ea      	ldr	r2, [r5, #12]
   b5aee:	3b01      	subs	r3, #1
   b5af0:	fa12 f783 	uxtah	r7, r2, r3
   b5af4:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
    uint16_t pos = 0; // bit position
   b5af8:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5afa:	f248 0206 	movw	r2, #32774	; 0x8006
   b5afe:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   b5b02:	f81e cf01 	ldrb.w	ip, [lr, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5b06:	f01c 0f80 	tst.w	ip, #128	; 0x80
   b5b0a:	bf0c      	ite	eq
   b5b0c:	4693      	moveq	fp, r2
   b5b0e:	468b      	movne	fp, r1
   b5b10:	f01c 0f40 	tst.w	ip, #64	; 0x40
   b5b14:	bf0c      	ite	eq
   b5b16:	4616      	moveq	r6, r2
   b5b18:	460e      	movne	r6, r1
   b5b1a:	f01c 0f20 	tst.w	ip, #32
   b5b1e:	bf0c      	ite	eq
   b5b20:	4690      	moveq	r8, r2
   b5b22:	4688      	movne	r8, r1
        pos++;
   b5b24:	f103 0901 	add.w	r9, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5b28:	f8cd 8008 	str.w	r8, [sp, #8]
   b5b2c:	9601      	str	r6, [sp, #4]
        pos++;
   b5b2e:	f103 0802 	add.w	r8, r3, #2
   b5b32:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5b36:	9e01      	ldr	r6, [sp, #4]
   b5b38:	f820 b013 	strh.w	fp, [r0, r3, lsl #1]
        pos++;
   b5b3c:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5b40:	f820 6019 	strh.w	r6, [r0, r9, lsl #1]
   b5b44:	9e02      	ldr	r6, [sp, #8]
   b5b46:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
        pos++;
   b5b4a:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5b4e:	f01c 0f10 	tst.w	ip, #16
        pos++;
   b5b52:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5b56:	bf0c      	ite	eq
   b5b58:	4693      	moveq	fp, r2
   b5b5a:	468b      	movne	fp, r1
   b5b5c:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b5b60:	f103 0804 	add.w	r8, r3, #4
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5b64:	f01c 0f08 	tst.w	ip, #8
        pos++;
   b5b68:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5b6c:	bf0c      	ite	eq
   b5b6e:	4693      	moveq	fp, r2
   b5b70:	468b      	movne	fp, r1
   b5b72:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b5b76:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5b7a:	f01c 0f04 	tst.w	ip, #4
        pos++;
   b5b7e:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5b82:	bf0c      	ite	eq
   b5b84:	4693      	moveq	fp, r2
   b5b86:	468b      	movne	fp, r1
   b5b88:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b5b8c:	f103 0a08 	add.w	sl, r3, #8
   b5b90:	f103 0806 	add.w	r8, r3, #6
   b5b94:	3307      	adds	r3, #7
   b5b96:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5b98:	f01c 0f02 	tst.w	ip, #2
        pos++;
   b5b9c:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5ba0:	bf0c      	ite	eq
   b5ba2:	4693      	moveq	fp, r2
   b5ba4:	468b      	movne	fp, r1
        pos++;
   b5ba6:	f8cd a00c 	str.w	sl, [sp, #12]
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5baa:	f01c 0f01 	tst.w	ip, #1
   b5bae:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
   b5bb2:	bf15      	itete	ne
   b5bb4:	f820 1013 	strhne.w	r1, [r0, r3, lsl #1]
   b5bb8:	f820 2013 	strheq.w	r2, [r0, r3, lsl #1]
        pos++;
   b5bbc:	fa1f f38a 	uxthne.w	r3, sl
   b5bc0:	f8bd 300c 	ldrheq.w	r3, [sp, #12]
    for(uint16_t n=0; n<numBytes; n++) {
   b5bc4:	4577      	cmp	r7, lr
   b5bc6:	d19c      	bne.n	b5b02 <_ZN17Adafruit_NeoPixel4showEv+0x18e>
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5bc8:	1c59      	adds	r1, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5bca:	3302      	adds	r3, #2
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5bcc:	b289      	uxth	r1, r1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5bce:	b29b      	uxth	r3, r3
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5bd0:	0049      	lsls	r1, r1, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5bd2:	005b      	lsls	r3, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5bd4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   b5bd8:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b5bda:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5bdc:	52c7      	strh	r7, [r0, r3]
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5bde:	4b2e      	ldr	r3, [pc, #184]	; (b5c98 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b5be0:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5be2:	681f      	ldr	r7, [r3, #0]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b5be4:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b5be6:	2314      	movs	r3, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b5be8:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   b5bec:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b5bf0:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   b5bf4:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   b5bf8:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   b5bfc:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b5c00:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   b5c04:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   b5c08:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5c0c:	79eb      	ldrb	r3, [r5, #7]
   b5c0e:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
   b5c12:	011b      	lsls	r3, r3, #4
    pwm->ENABLE = 1;
   b5c14:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5c16:	5cfe      	ldrb	r6, [r7, r3]
   b5c18:	f89c 3001 	ldrb.w	r3, [ip, #1]
   b5c1c:	f003 031f 	and.w	r3, r3, #31
   b5c20:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
   b5c24:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   b5c28:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   b5c2c:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   b5c30:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   b5c32:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   b5c36:	2b00      	cmp	r3, #0
   b5c38:	d0fb      	beq.n	b5c32 <_ZN17Adafruit_NeoPixel4showEv+0x2be>
    pwm->EVENTS_SEQEND[0] = 0;
   b5c3a:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b5c3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    pwm->EVENTS_SEQEND[0] = 0;
   b5c40:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   b5c44:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b5c48:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   b5c4c:	f000 fb4a 	bl	b62e4 <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b5c50:	f000 f8cc 	bl	b5dec <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   b5c54:	6128      	str	r0, [r5, #16]
}
   b5c56:	b005      	add	sp, #20
   b5c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5c5c:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b5c60:	2b00      	cmp	r3, #0
   b5c62:	f6bf aeb7 	bge.w	b59d4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5c66:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5c6a:	2b00      	cmp	r3, #0
   b5c6c:	f6bf aeb2 	bge.w	b59d4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5c70:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5c74:	2b00      	cmp	r3, #0
   b5c76:	f6bf aead 	bge.w	b59d4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b5c7a:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5c7e:	2b00      	cmp	r3, #0
   b5c80:	f6bf aea8 	bge.w	b59d4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
   b5c84:	e725      	b.n	b5ad2 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b5c86:	bf00      	nop
   b5c88:	000b8780 	.word	0x000b8780
   b5c8c:	4001c000 	.word	0x4001c000
   b5c90:	40021000 	.word	0x40021000
   b5c94:	40022000 	.word	0x40022000
   b5c98:	2003e630 	.word	0x2003e630
   b5c9c:	e0001000 	.word	0xe0001000
   b5ca0:	e000ed00 	.word	0xe000ed00
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5ca4:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5ca8:	2b00      	cmp	r3, #0
   b5caa:	f6bf ae8d 	bge.w	b59c8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5cae:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5cb2:	2b00      	cmp	r3, #0
   b5cb4:	f6bf ae88 	bge.w	b59c8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b5cb8:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5cbc:	2b00      	cmp	r3, #0
   b5cbe:	f6bf ae83 	bge.w	b59c8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   b5cc2:	e706      	b.n	b5ad2 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b5cc4:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   b5cc6:	2304      	movs	r3, #4
   b5cc8:	2102      	movs	r1, #2
   b5cca:	e783      	b.n	b5bd4 <_ZN17Adafruit_NeoPixel4showEv+0x260>

000b5ccc <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   b5ccc:	8843      	ldrh	r3, [r0, #2]
   b5cce:	428b      	cmp	r3, r1
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   b5cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   b5cd2:	d92d      	bls.n	b5d30 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   b5cd4:	7a06      	ldrb	r6, [r0, #8]
   b5cd6:	f3c2 4307 	ubfx	r3, r2, #16, #8
   b5cda:	f3c2 2407 	ubfx	r4, r2, #8, #8
   b5cde:	b2d5      	uxtb	r5, r2
   b5ce0:	b13e      	cbz	r6, b5cf2 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
   b5ce2:	4373      	muls	r3, r6
      g = (g * brightness) >> 8;
   b5ce4:	4374      	muls	r4, r6
      b = (b * brightness) >> 8;
   b5ce6:	4375      	muls	r5, r6
      r = (r * brightness) >> 8;
   b5ce8:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   b5cec:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   b5cf0:	0a2d      	lsrs	r5, r5, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   b5cf2:	f890 c006 	ldrb.w	ip, [r0, #6]
   b5cf6:	68c7      	ldr	r7, [r0, #12]
   b5cf8:	f1bc 0f06 	cmp.w	ip, #6
   b5cfc:	bf0c      	ite	eq
   b5cfe:	2604      	moveq	r6, #4
   b5d00:	2603      	movne	r6, #3
   b5d02:	434e      	muls	r6, r1
   b5d04:	f1ac 0c02 	sub.w	ip, ip, #2
   b5d08:	19b9      	adds	r1, r7, r6
    switch(type) {
   b5d0a:	f1bc 0f06 	cmp.w	ip, #6
   b5d0e:	d81d      	bhi.n	b5d4c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
   b5d10:	e8df f00c 	tbb	[pc, ip]
   b5d14:	04081c04 	.word	0x04081c04
   b5d18:	040f      	.short	0x040f
   b5d1a:	04          	.byte	0x04
   b5d1b:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   b5d1c:	55bc      	strb	r4, [r7, r6]
          *p++ = r;
   b5d1e:	704b      	strb	r3, [r1, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
   b5d20:	708d      	strb	r5, [r1, #2]
        } break;
    }
  }
}
   b5d22:	e005      	b.n	b5d30 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p++ = r;
   b5d24:	2bfe      	cmp	r3, #254	; 0xfe
   b5d26:	bf28      	it	cs
   b5d28:	23fe      	movcs	r3, #254	; 0xfe
   b5d2a:	55bb      	strb	r3, [r7, r6]
          *p++ = b;
   b5d2c:	704d      	strb	r5, [r1, #1]
          *p = g;
   b5d2e:	708c      	strb	r4, [r1, #2]
}
   b5d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
   b5d32:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b5d34:	704c      	strb	r4, [r1, #1]
          *p++ = b;
   b5d36:	708d      	strb	r5, [r1, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   b5d38:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
   b5d3a:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
   b5d3c:	b913      	cbnz	r3, b5d44 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
   b5d3e:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
   b5d40:	70ca      	strb	r2, [r1, #3]
        } break;
   b5d42:	e7f5      	b.n	b5d30 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p = brightness ? ((w * brightness) >> 8) : w;
   b5d44:	435a      	muls	r2, r3
   b5d46:	f3c2 2207 	ubfx	r2, r2, #8, #8
   b5d4a:	e7f9      	b.n	b5d40 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
   b5d4c:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b5d4e:	704c      	strb	r4, [r1, #1]
   b5d50:	e7e6      	b.n	b5d20 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>

000b5d52 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
   b5d52:	7a03      	ldrb	r3, [r0, #8]
  uint8_t newBrightness = b + 1;
   b5d54:	1c4a      	adds	r2, r1, #1
   b5d56:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
   b5d58:	4293      	cmp	r3, r2
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
   b5d5a:	b570      	push	{r4, r5, r6, lr}
  if(newBrightness != brightness) { // Compare against prior value
   b5d5c:	d01f      	beq.n	b5d9e <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4c>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
   b5d5e:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b5d60:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
            *ptr           = pixels,
   b5d64:	68c4      	ldr	r4, [r0, #12]
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b5d66:	d00c      	beq.n	b5d82 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
   b5d68:	29ff      	cmp	r1, #255	; 0xff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
   b5d6a:	bf1f      	itttt	ne
   b5d6c:	0211      	lslne	r1, r2, #8
   b5d6e:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
   b5d72:	fbb1 f3f3 	udivne	r3, r1, r3
   b5d76:	b29b      	uxthne	r3, r3
    else if(b == 255) scale = 65535 / oldBrightness;
   b5d78:	bf04      	itt	eq
   b5d7a:	f64f 71ff 	movweq	r1, #65535	; 0xffff
   b5d7e:	fbb1 f3f3 	udiveq	r3, r1, r3
            *ptr           = pixels,
   b5d82:	4625      	mov	r5, r4
    for(uint16_t i=0; i<numBytes; i++) {
   b5d84:	8886      	ldrh	r6, [r0, #4]
   b5d86:	1b29      	subs	r1, r5, r4
   b5d88:	b289      	uxth	r1, r1
   b5d8a:	428e      	cmp	r6, r1
   b5d8c:	d906      	bls.n	b5d9c <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
   b5d8e:	7829      	ldrb	r1, [r5, #0]
   b5d90:	4359      	muls	r1, r3
   b5d92:	f3c1 2107 	ubfx	r1, r1, #8, #8
   b5d96:	f805 1b01 	strb.w	r1, [r5], #1
    for(uint16_t i=0; i<numBytes; i++) {
   b5d9a:	e7f3      	b.n	b5d84 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
    }
    brightness = newBrightness;
   b5d9c:	7202      	strb	r2, [r0, #8]
  }
}
   b5d9e:	bd70      	pop	{r4, r5, r6, pc}

000b5da0 <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   b5da0:	8882      	ldrh	r2, [r0, #4]
   b5da2:	68c0      	ldr	r0, [r0, #12]
   b5da4:	2100      	movs	r1, #0
   b5da6:	f001 bee1 	b.w	b7b6c <memset>
	...

000b5dac <_GLOBAL__sub_I_PIN_MAP2>:
}
   b5dac:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b5dae:	f000 f82d 	bl	b5e0c <HAL_Pin_Map>
   b5db2:	4b01      	ldr	r3, [pc, #4]	; (b5db8 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b5db4:	6018      	str	r0, [r3, #0]
}
   b5db6:	bd08      	pop	{r3, pc}
   b5db8:	2003e630 	.word	0x2003e630

000b5dbc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5dbc:	b508      	push	{r3, lr}
   b5dbe:	4b02      	ldr	r3, [pc, #8]	; (b5dc8 <os_mutex_recursive_create+0xc>)
   b5dc0:	681b      	ldr	r3, [r3, #0]
   b5dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5dc4:	9301      	str	r3, [sp, #4]
   b5dc6:	bd08      	pop	{r3, pc}
   b5dc8:	00030248 	.word	0x00030248

000b5dcc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5dcc:	b508      	push	{r3, lr}
   b5dce:	4b02      	ldr	r3, [pc, #8]	; (b5dd8 <HAL_RNG_GetRandomNumber+0xc>)
   b5dd0:	681b      	ldr	r3, [r3, #0]
   b5dd2:	685b      	ldr	r3, [r3, #4]
   b5dd4:	9301      	str	r3, [sp, #4]
   b5dd6:	bd08      	pop	{r3, pc}
   b5dd8:	00030218 	.word	0x00030218

000b5ddc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5ddc:	b508      	push	{r3, lr}
   b5dde:	4b02      	ldr	r3, [pc, #8]	; (b5de8 <HAL_Delay_Microseconds+0xc>)
   b5de0:	681b      	ldr	r3, [r3, #0]
   b5de2:	68db      	ldr	r3, [r3, #12]
   b5de4:	9301      	str	r3, [sp, #4]
   b5de6:	bd08      	pop	{r3, pc}
   b5de8:	00030218 	.word	0x00030218

000b5dec <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b5dec:	b508      	push	{r3, lr}
   b5dee:	4b02      	ldr	r3, [pc, #8]	; (b5df8 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b5df0:	681b      	ldr	r3, [r3, #0]
   b5df2:	691b      	ldr	r3, [r3, #16]
   b5df4:	9301      	str	r3, [sp, #4]
   b5df6:	bd08      	pop	{r3, pc}
   b5df8:	00030218 	.word	0x00030218

000b5dfc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5dfc:	b508      	push	{r3, lr}
   b5dfe:	4b02      	ldr	r3, [pc, #8]	; (b5e08 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5e00:	681b      	ldr	r3, [r3, #0]
   b5e02:	695b      	ldr	r3, [r3, #20]
   b5e04:	9301      	str	r3, [sp, #4]
   b5e06:	bd08      	pop	{r3, pc}
   b5e08:	00030218 	.word	0x00030218

000b5e0c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b5e0c:	b508      	push	{r3, lr}
   b5e0e:	4b02      	ldr	r3, [pc, #8]	; (b5e18 <HAL_Pin_Map+0xc>)
   b5e10:	681b      	ldr	r3, [r3, #0]
   b5e12:	681b      	ldr	r3, [r3, #0]
   b5e14:	9301      	str	r3, [sp, #4]
   b5e16:	bd08      	pop	{r3, pc}
   b5e18:	0003022c 	.word	0x0003022c

000b5e1c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5e1c:	b508      	push	{r3, lr}
   b5e1e:	4b02      	ldr	r3, [pc, #8]	; (b5e28 <HAL_Pin_Mode+0xc>)
   b5e20:	681b      	ldr	r3, [r3, #0]
   b5e22:	689b      	ldr	r3, [r3, #8]
   b5e24:	9301      	str	r3, [sp, #4]
   b5e26:	bd08      	pop	{r3, pc}
   b5e28:	0003022c 	.word	0x0003022c

000b5e2c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5e2c:	b508      	push	{r3, lr}
   b5e2e:	4b02      	ldr	r3, [pc, #8]	; (b5e38 <HAL_Get_Pin_Mode+0xc>)
   b5e30:	681b      	ldr	r3, [r3, #0]
   b5e32:	68db      	ldr	r3, [r3, #12]
   b5e34:	9301      	str	r3, [sp, #4]
   b5e36:	bd08      	pop	{r3, pc}
   b5e38:	0003022c 	.word	0x0003022c

000b5e3c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5e3c:	b508      	push	{r3, lr}
   b5e3e:	4b02      	ldr	r3, [pc, #8]	; (b5e48 <HAL_GPIO_Write+0xc>)
   b5e40:	681b      	ldr	r3, [r3, #0]
   b5e42:	691b      	ldr	r3, [r3, #16]
   b5e44:	9301      	str	r3, [sp, #4]
   b5e46:	bd08      	pop	{r3, pc}
   b5e48:	0003022c 	.word	0x0003022c

000b5e4c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b5e4c:	b508      	push	{r3, lr}
   b5e4e:	4b02      	ldr	r3, [pc, #8]	; (b5e58 <HAL_GPIO_Read+0xc>)
   b5e50:	681b      	ldr	r3, [r3, #0]
   b5e52:	695b      	ldr	r3, [r3, #20]
   b5e54:	9301      	str	r3, [sp, #4]
   b5e56:	bd08      	pop	{r3, pc}
   b5e58:	0003022c 	.word	0x0003022c

000b5e5c <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b5e5c:	b508      	push	{r3, lr}
   b5e5e:	4b02      	ldr	r3, [pc, #8]	; (b5e68 <HAL_Interrupts_Attach+0xc>)
   b5e60:	681b      	ldr	r3, [r3, #0]
   b5e62:	699b      	ldr	r3, [r3, #24]
   b5e64:	9301      	str	r3, [sp, #4]
   b5e66:	bd08      	pop	{r3, pc}
   b5e68:	0003022c 	.word	0x0003022c

000b5e6c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b5e6c:	b508      	push	{r3, lr}
   b5e6e:	4b02      	ldr	r3, [pc, #8]	; (b5e78 <HAL_Interrupts_Detach+0xc>)
   b5e70:	681b      	ldr	r3, [r3, #0]
   b5e72:	69db      	ldr	r3, [r3, #28]
   b5e74:	9301      	str	r3, [sp, #4]
   b5e76:	bd08      	pop	{r3, pc}
   b5e78:	0003022c 	.word	0x0003022c

000b5e7c <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   b5e7c:	b508      	push	{r3, lr}
   b5e7e:	4b02      	ldr	r3, [pc, #8]	; (b5e88 <HAL_Interrupts_Enable_All+0xc>)
   b5e80:	681b      	ldr	r3, [r3, #0]
   b5e82:	6a1b      	ldr	r3, [r3, #32]
   b5e84:	9301      	str	r3, [sp, #4]
   b5e86:	bd08      	pop	{r3, pc}
   b5e88:	0003022c 	.word	0x0003022c

000b5e8c <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   b5e8c:	b508      	push	{r3, lr}
   b5e8e:	4b02      	ldr	r3, [pc, #8]	; (b5e98 <HAL_Interrupts_Disable_All+0xc>)
   b5e90:	681b      	ldr	r3, [r3, #0]
   b5e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5e94:	9301      	str	r3, [sp, #4]
   b5e96:	bd08      	pop	{r3, pc}
   b5e98:	0003022c 	.word	0x0003022c

000b5e9c <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5e9c:	b508      	push	{r3, lr}
   b5e9e:	4b02      	ldr	r3, [pc, #8]	; (b5ea8 <hal_i2c_begin+0xc>)
   b5ea0:	681b      	ldr	r3, [r3, #0]
   b5ea2:	68db      	ldr	r3, [r3, #12]
   b5ea4:	9301      	str	r3, [sp, #4]
   b5ea6:	bd08      	pop	{r3, pc}
   b5ea8:	00030228 	.word	0x00030228

000b5eac <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5eac:	b508      	push	{r3, lr}
   b5eae:	4b02      	ldr	r3, [pc, #8]	; (b5eb8 <hal_i2c_begin_transmission+0xc>)
   b5eb0:	681b      	ldr	r3, [r3, #0]
   b5eb2:	699b      	ldr	r3, [r3, #24]
   b5eb4:	9301      	str	r3, [sp, #4]
   b5eb6:	bd08      	pop	{r3, pc}
   b5eb8:	00030228 	.word	0x00030228

000b5ebc <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5ebc:	b508      	push	{r3, lr}
   b5ebe:	4b02      	ldr	r3, [pc, #8]	; (b5ec8 <hal_i2c_end_transmission+0xc>)
   b5ec0:	681b      	ldr	r3, [r3, #0]
   b5ec2:	69db      	ldr	r3, [r3, #28]
   b5ec4:	9301      	str	r3, [sp, #4]
   b5ec6:	bd08      	pop	{r3, pc}
   b5ec8:	00030228 	.word	0x00030228

000b5ecc <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5ecc:	b508      	push	{r3, lr}
   b5ece:	4b02      	ldr	r3, [pc, #8]	; (b5ed8 <hal_i2c_write+0xc>)
   b5ed0:	681b      	ldr	r3, [r3, #0]
   b5ed2:	6a1b      	ldr	r3, [r3, #32]
   b5ed4:	9301      	str	r3, [sp, #4]
   b5ed6:	bd08      	pop	{r3, pc}
   b5ed8:	00030228 	.word	0x00030228

000b5edc <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5edc:	b508      	push	{r3, lr}
   b5ede:	4b02      	ldr	r3, [pc, #8]	; (b5ee8 <hal_i2c_available+0xc>)
   b5ee0:	681b      	ldr	r3, [r3, #0]
   b5ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5ee4:	9301      	str	r3, [sp, #4]
   b5ee6:	bd08      	pop	{r3, pc}
   b5ee8:	00030228 	.word	0x00030228

000b5eec <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5eec:	b508      	push	{r3, lr}
   b5eee:	4b02      	ldr	r3, [pc, #8]	; (b5ef8 <hal_i2c_read+0xc>)
   b5ef0:	681b      	ldr	r3, [r3, #0]
   b5ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5ef4:	9301      	str	r3, [sp, #4]
   b5ef6:	bd08      	pop	{r3, pc}
   b5ef8:	00030228 	.word	0x00030228

000b5efc <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5efc:	b508      	push	{r3, lr}
   b5efe:	4b02      	ldr	r3, [pc, #8]	; (b5f08 <hal_i2c_peek+0xc>)
   b5f00:	681b      	ldr	r3, [r3, #0]
   b5f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5f04:	9301      	str	r3, [sp, #4]
   b5f06:	bd08      	pop	{r3, pc}
   b5f08:	00030228 	.word	0x00030228

000b5f0c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5f0c:	b508      	push	{r3, lr}
   b5f0e:	4b02      	ldr	r3, [pc, #8]	; (b5f18 <hal_i2c_flush+0xc>)
   b5f10:	681b      	ldr	r3, [r3, #0]
   b5f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5f14:	9301      	str	r3, [sp, #4]
   b5f16:	bd08      	pop	{r3, pc}
   b5f18:	00030228 	.word	0x00030228

000b5f1c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5f1c:	b508      	push	{r3, lr}
   b5f1e:	4b02      	ldr	r3, [pc, #8]	; (b5f28 <hal_i2c_is_enabled+0xc>)
   b5f20:	681b      	ldr	r3, [r3, #0]
   b5f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5f24:	9301      	str	r3, [sp, #4]
   b5f26:	bd08      	pop	{r3, pc}
   b5f28:	00030228 	.word	0x00030228

000b5f2c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5f2c:	b508      	push	{r3, lr}
   b5f2e:	4b02      	ldr	r3, [pc, #8]	; (b5f38 <hal_i2c_init+0xc>)
   b5f30:	681b      	ldr	r3, [r3, #0]
   b5f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5f34:	9301      	str	r3, [sp, #4]
   b5f36:	bd08      	pop	{r3, pc}
   b5f38:	00030228 	.word	0x00030228

000b5f3c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5f3c:	b508      	push	{r3, lr}
   b5f3e:	4b02      	ldr	r3, [pc, #8]	; (b5f48 <if_index_to_name+0xc>)
   b5f40:	681b      	ldr	r3, [r3, #0]
   b5f42:	695b      	ldr	r3, [r3, #20]
   b5f44:	9301      	str	r3, [sp, #4]
   b5f46:	bd08      	pop	{r3, pc}
   b5f48:	0003026c 	.word	0x0003026c

000b5f4c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5f4c:	b508      	push	{r3, lr}
   b5f4e:	4b02      	ldr	r3, [pc, #8]	; (b5f58 <inet_inet_ntop+0xc>)
   b5f50:	681b      	ldr	r3, [r3, #0]
   b5f52:	695b      	ldr	r3, [r3, #20]
   b5f54:	9301      	str	r3, [sp, #4]
   b5f56:	bd08      	pop	{r3, pc}
   b5f58:	00030264 	.word	0x00030264

000b5f5c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b5f5c:	b508      	push	{r3, lr}
   b5f5e:	4b02      	ldr	r3, [pc, #8]	; (b5f68 <inet_htonl+0xc>)
   b5f60:	681b      	ldr	r3, [r3, #0]
   b5f62:	6a1b      	ldr	r3, [r3, #32]
   b5f64:	9301      	str	r3, [sp, #4]
   b5f66:	bd08      	pop	{r3, pc}
   b5f68:	00030264 	.word	0x00030264

000b5f6c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b5f6c:	b508      	push	{r3, lr}
   b5f6e:	4b02      	ldr	r3, [pc, #8]	; (b5f78 <inet_htons+0xc>)
   b5f70:	681b      	ldr	r3, [r3, #0]
   b5f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5f74:	9301      	str	r3, [sp, #4]
   b5f76:	bd08      	pop	{r3, pc}
   b5f78:	00030264 	.word	0x00030264

000b5f7c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5f7c:	b508      	push	{r3, lr}
   b5f7e:	4b02      	ldr	r3, [pc, #8]	; (b5f88 <netdb_freeaddrinfo+0xc>)
   b5f80:	681b      	ldr	r3, [r3, #0]
   b5f82:	689b      	ldr	r3, [r3, #8]
   b5f84:	9301      	str	r3, [sp, #4]
   b5f86:	bd08      	pop	{r3, pc}
   b5f88:	00030268 	.word	0x00030268

000b5f8c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5f8c:	b508      	push	{r3, lr}
   b5f8e:	4b02      	ldr	r3, [pc, #8]	; (b5f98 <netdb_getaddrinfo+0xc>)
   b5f90:	681b      	ldr	r3, [r3, #0]
   b5f92:	68db      	ldr	r3, [r3, #12]
   b5f94:	9301      	str	r3, [sp, #4]
   b5f96:	bd08      	pop	{r3, pc}
   b5f98:	00030268 	.word	0x00030268

000b5f9c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b5f9c:	b508      	push	{r3, lr}
   b5f9e:	4b02      	ldr	r3, [pc, #8]	; (b5fa8 <sock_setsockopt+0xc>)
   b5fa0:	681b      	ldr	r3, [r3, #0]
   b5fa2:	699b      	ldr	r3, [r3, #24]
   b5fa4:	9301      	str	r3, [sp, #4]
   b5fa6:	bd08      	pop	{r3, pc}
   b5fa8:	00030238 	.word	0x00030238

000b5fac <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b5fac:	b508      	push	{r3, lr}
   b5fae:	4b02      	ldr	r3, [pc, #8]	; (b5fb8 <sock_close+0xc>)
   b5fb0:	681b      	ldr	r3, [r3, #0]
   b5fb2:	69db      	ldr	r3, [r3, #28]
   b5fb4:	9301      	str	r3, [sp, #4]
   b5fb6:	bd08      	pop	{r3, pc}
   b5fb8:	00030238 	.word	0x00030238

000b5fbc <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b5fbc:	b508      	push	{r3, lr}
   b5fbe:	4b02      	ldr	r3, [pc, #8]	; (b5fc8 <sock_connect+0xc>)
   b5fc0:	681b      	ldr	r3, [r3, #0]
   b5fc2:	6a1b      	ldr	r3, [r3, #32]
   b5fc4:	9301      	str	r3, [sp, #4]
   b5fc6:	bd08      	pop	{r3, pc}
   b5fc8:	00030238 	.word	0x00030238

000b5fcc <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b5fcc:	b508      	push	{r3, lr}
   b5fce:	4b02      	ldr	r3, [pc, #8]	; (b5fd8 <sock_recv+0xc>)
   b5fd0:	681b      	ldr	r3, [r3, #0]
   b5fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5fd4:	9301      	str	r3, [sp, #4]
   b5fd6:	bd08      	pop	{r3, pc}
   b5fd8:	00030238 	.word	0x00030238

000b5fdc <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b5fdc:	b508      	push	{r3, lr}
   b5fde:	4b02      	ldr	r3, [pc, #8]	; (b5fe8 <sock_send+0xc>)
   b5fe0:	681b      	ldr	r3, [r3, #0]
   b5fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5fe4:	9301      	str	r3, [sp, #4]
   b5fe6:	bd08      	pop	{r3, pc}
   b5fe8:	00030238 	.word	0x00030238

000b5fec <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b5fec:	b508      	push	{r3, lr}
   b5fee:	4b02      	ldr	r3, [pc, #8]	; (b5ff8 <sock_socket+0xc>)
   b5ff0:	681b      	ldr	r3, [r3, #0]
   b5ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5ff4:	9301      	str	r3, [sp, #4]
   b5ff6:	bd08      	pop	{r3, pc}
   b5ff8:	00030238 	.word	0x00030238

000b5ffc <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5ffc:	b508      	push	{r3, lr}
   b5ffe:	4b02      	ldr	r3, [pc, #8]	; (b6008 <hal_spi_begin+0xc>)
   b6000:	681b      	ldr	r3, [r3, #0]
   b6002:	681b      	ldr	r3, [r3, #0]
   b6004:	9301      	str	r3, [sp, #4]
   b6006:	bd08      	pop	{r3, pc}
   b6008:	00030230 	.word	0x00030230

000b600c <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b600c:	b508      	push	{r3, lr}
   b600e:	4b02      	ldr	r3, [pc, #8]	; (b6018 <hal_spi_set_bit_order+0xc>)
   b6010:	681b      	ldr	r3, [r3, #0]
   b6012:	689b      	ldr	r3, [r3, #8]
   b6014:	9301      	str	r3, [sp, #4]
   b6016:	bd08      	pop	{r3, pc}
   b6018:	00030230 	.word	0x00030230

000b601c <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b601c:	b508      	push	{r3, lr}
   b601e:	4b02      	ldr	r3, [pc, #8]	; (b6028 <hal_spi_set_data_mode+0xc>)
   b6020:	681b      	ldr	r3, [r3, #0]
   b6022:	68db      	ldr	r3, [r3, #12]
   b6024:	9301      	str	r3, [sp, #4]
   b6026:	bd08      	pop	{r3, pc}
   b6028:	00030230 	.word	0x00030230

000b602c <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b602c:	b508      	push	{r3, lr}
   b602e:	4b02      	ldr	r3, [pc, #8]	; (b6038 <hal_spi_set_clock_divider+0xc>)
   b6030:	681b      	ldr	r3, [r3, #0]
   b6032:	691b      	ldr	r3, [r3, #16]
   b6034:	9301      	str	r3, [sp, #4]
   b6036:	bd08      	pop	{r3, pc}
   b6038:	00030230 	.word	0x00030230

000b603c <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b603c:	b508      	push	{r3, lr}
   b603e:	4b02      	ldr	r3, [pc, #8]	; (b6048 <hal_spi_transfer+0xc>)
   b6040:	681b      	ldr	r3, [r3, #0]
   b6042:	695b      	ldr	r3, [r3, #20]
   b6044:	9301      	str	r3, [sp, #4]
   b6046:	bd08      	pop	{r3, pc}
   b6048:	00030230 	.word	0x00030230

000b604c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b604c:	b508      	push	{r3, lr}
   b604e:	4b02      	ldr	r3, [pc, #8]	; (b6058 <hal_spi_init+0xc>)
   b6050:	681b      	ldr	r3, [r3, #0]
   b6052:	69db      	ldr	r3, [r3, #28]
   b6054:	9301      	str	r3, [sp, #4]
   b6056:	bd08      	pop	{r3, pc}
   b6058:	00030230 	.word	0x00030230

000b605c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b605c:	b508      	push	{r3, lr}
   b605e:	4b02      	ldr	r3, [pc, #8]	; (b6068 <hal_spi_is_enabled+0xc>)
   b6060:	681b      	ldr	r3, [r3, #0]
   b6062:	6a1b      	ldr	r3, [r3, #32]
   b6064:	9301      	str	r3, [sp, #4]
   b6066:	bd08      	pop	{r3, pc}
   b6068:	00030230 	.word	0x00030230

000b606c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b606c:	b508      	push	{r3, lr}
   b606e:	4b02      	ldr	r3, [pc, #8]	; (b6078 <hal_spi_info+0xc>)
   b6070:	681b      	ldr	r3, [r3, #0]
   b6072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6074:	9301      	str	r3, [sp, #4]
   b6076:	bd08      	pop	{r3, pc}
   b6078:	00030230 	.word	0x00030230

000b607c <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b607c:	b508      	push	{r3, lr}
   b607e:	4b02      	ldr	r3, [pc, #8]	; (b6088 <hal_spi_acquire+0xc>)
   b6080:	681b      	ldr	r3, [r3, #0]
   b6082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6084:	9301      	str	r3, [sp, #4]
   b6086:	bd08      	pop	{r3, pc}
   b6088:	00030230 	.word	0x00030230

000b608c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b608c:	b508      	push	{r3, lr}
   b608e:	4b02      	ldr	r3, [pc, #8]	; (b6098 <hal_spi_release+0xc>)
   b6090:	681b      	ldr	r3, [r3, #0]
   b6092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6094:	9301      	str	r3, [sp, #4]
   b6096:	bd08      	pop	{r3, pc}
   b6098:	00030230 	.word	0x00030230

000b609c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b609c:	b508      	push	{r3, lr}
   b609e:	4b02      	ldr	r3, [pc, #8]	; (b60a8 <hal_usart_write+0xc>)
   b60a0:	681b      	ldr	r3, [r3, #0]
   b60a2:	68db      	ldr	r3, [r3, #12]
   b60a4:	9301      	str	r3, [sp, #4]
   b60a6:	bd08      	pop	{r3, pc}
   b60a8:	0003023c 	.word	0x0003023c

000b60ac <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b60ac:	b508      	push	{r3, lr}
   b60ae:	4b02      	ldr	r3, [pc, #8]	; (b60b8 <hal_usart_available+0xc>)
   b60b0:	681b      	ldr	r3, [r3, #0]
   b60b2:	691b      	ldr	r3, [r3, #16]
   b60b4:	9301      	str	r3, [sp, #4]
   b60b6:	bd08      	pop	{r3, pc}
   b60b8:	0003023c 	.word	0x0003023c

000b60bc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b60bc:	b508      	push	{r3, lr}
   b60be:	4b02      	ldr	r3, [pc, #8]	; (b60c8 <hal_usart_read+0xc>)
   b60c0:	681b      	ldr	r3, [r3, #0]
   b60c2:	695b      	ldr	r3, [r3, #20]
   b60c4:	9301      	str	r3, [sp, #4]
   b60c6:	bd08      	pop	{r3, pc}
   b60c8:	0003023c 	.word	0x0003023c

000b60cc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b60cc:	b508      	push	{r3, lr}
   b60ce:	4b02      	ldr	r3, [pc, #8]	; (b60d8 <hal_usart_peek+0xc>)
   b60d0:	681b      	ldr	r3, [r3, #0]
   b60d2:	699b      	ldr	r3, [r3, #24]
   b60d4:	9301      	str	r3, [sp, #4]
   b60d6:	bd08      	pop	{r3, pc}
   b60d8:	0003023c 	.word	0x0003023c

000b60dc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b60dc:	b508      	push	{r3, lr}
   b60de:	4b02      	ldr	r3, [pc, #8]	; (b60e8 <hal_usart_flush+0xc>)
   b60e0:	681b      	ldr	r3, [r3, #0]
   b60e2:	69db      	ldr	r3, [r3, #28]
   b60e4:	9301      	str	r3, [sp, #4]
   b60e6:	bd08      	pop	{r3, pc}
   b60e8:	0003023c 	.word	0x0003023c

000b60ec <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b60ec:	b508      	push	{r3, lr}
   b60ee:	4b02      	ldr	r3, [pc, #8]	; (b60f8 <hal_usart_is_enabled+0xc>)
   b60f0:	681b      	ldr	r3, [r3, #0]
   b60f2:	6a1b      	ldr	r3, [r3, #32]
   b60f4:	9301      	str	r3, [sp, #4]
   b60f6:	bd08      	pop	{r3, pc}
   b60f8:	0003023c 	.word	0x0003023c

000b60fc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b60fc:	b508      	push	{r3, lr}
   b60fe:	4b02      	ldr	r3, [pc, #8]	; (b6108 <hal_usart_available_data_for_write+0xc>)
   b6100:	681b      	ldr	r3, [r3, #0]
   b6102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6104:	9301      	str	r3, [sp, #4]
   b6106:	bd08      	pop	{r3, pc}
   b6108:	0003023c 	.word	0x0003023c

000b610c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b610c:	b508      	push	{r3, lr}
   b610e:	4b02      	ldr	r3, [pc, #8]	; (b6118 <hal_usart_init_ex+0xc>)
   b6110:	681b      	ldr	r3, [r3, #0]
   b6112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6114:	9301      	str	r3, [sp, #4]
   b6116:	bd08      	pop	{r3, pc}
   b6118:	0003023c 	.word	0x0003023c

000b611c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b611c:	b508      	push	{r3, lr}
   b611e:	4b02      	ldr	r3, [pc, #8]	; (b6128 <HAL_USB_USART_Init+0xc>)
   b6120:	681b      	ldr	r3, [r3, #0]
   b6122:	681b      	ldr	r3, [r3, #0]
   b6124:	9301      	str	r3, [sp, #4]
   b6126:	bd08      	pop	{r3, pc}
   b6128:	0003024c 	.word	0x0003024c

000b612c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b612c:	b508      	push	{r3, lr}
   b612e:	4b02      	ldr	r3, [pc, #8]	; (b6138 <HAL_USB_USART_Begin+0xc>)
   b6130:	681b      	ldr	r3, [r3, #0]
   b6132:	685b      	ldr	r3, [r3, #4]
   b6134:	9301      	str	r3, [sp, #4]
   b6136:	bd08      	pop	{r3, pc}
   b6138:	0003024c 	.word	0x0003024c

000b613c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b613c:	b508      	push	{r3, lr}
   b613e:	4b02      	ldr	r3, [pc, #8]	; (b6148 <HAL_USB_USART_Available_Data+0xc>)
   b6140:	681b      	ldr	r3, [r3, #0]
   b6142:	691b      	ldr	r3, [r3, #16]
   b6144:	9301      	str	r3, [sp, #4]
   b6146:	bd08      	pop	{r3, pc}
   b6148:	0003024c 	.word	0x0003024c

000b614c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b614c:	b508      	push	{r3, lr}
   b614e:	4b02      	ldr	r3, [pc, #8]	; (b6158 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6150:	681b      	ldr	r3, [r3, #0]
   b6152:	695b      	ldr	r3, [r3, #20]
   b6154:	9301      	str	r3, [sp, #4]
   b6156:	bd08      	pop	{r3, pc}
   b6158:	0003024c 	.word	0x0003024c

000b615c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b615c:	b508      	push	{r3, lr}
   b615e:	4b02      	ldr	r3, [pc, #8]	; (b6168 <HAL_USB_USART_Receive_Data+0xc>)
   b6160:	681b      	ldr	r3, [r3, #0]
   b6162:	699b      	ldr	r3, [r3, #24]
   b6164:	9301      	str	r3, [sp, #4]
   b6166:	bd08      	pop	{r3, pc}
   b6168:	0003024c 	.word	0x0003024c

000b616c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b616c:	b508      	push	{r3, lr}
   b616e:	4b02      	ldr	r3, [pc, #8]	; (b6178 <HAL_USB_USART_Send_Data+0xc>)
   b6170:	681b      	ldr	r3, [r3, #0]
   b6172:	69db      	ldr	r3, [r3, #28]
   b6174:	9301      	str	r3, [sp, #4]
   b6176:	bd08      	pop	{r3, pc}
   b6178:	0003024c 	.word	0x0003024c

000b617c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b617c:	b508      	push	{r3, lr}
   b617e:	4b02      	ldr	r3, [pc, #8]	; (b6188 <HAL_USB_USART_Flush_Data+0xc>)
   b6180:	681b      	ldr	r3, [r3, #0]
   b6182:	6a1b      	ldr	r3, [r3, #32]
   b6184:	9301      	str	r3, [sp, #4]
   b6186:	bd08      	pop	{r3, pc}
   b6188:	0003024c 	.word	0x0003024c

000b618c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b618c:	b508      	push	{r3, lr}
   b618e:	4b02      	ldr	r3, [pc, #8]	; (b6198 <panic_+0xc>)
   b6190:	681b      	ldr	r3, [r3, #0]
   b6192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6194:	9301      	str	r3, [sp, #4]
   b6196:	bd08      	pop	{r3, pc}
   b6198:	00030260 	.word	0x00030260

000b619c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b619c:	b508      	push	{r3, lr}
   b619e:	4b02      	ldr	r3, [pc, #8]	; (b61a8 <log_message+0xc>)
   b61a0:	681b      	ldr	r3, [r3, #0]
   b61a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b61a4:	9301      	str	r3, [sp, #4]
   b61a6:	bd08      	pop	{r3, pc}
   b61a8:	00030260 	.word	0x00030260

000b61ac <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b61ac:	b508      	push	{r3, lr}
   b61ae:	4b02      	ldr	r3, [pc, #8]	; (b61b8 <set_system_mode+0xc>)
   b61b0:	681b      	ldr	r3, [r3, #0]
   b61b2:	685b      	ldr	r3, [r3, #4]
   b61b4:	9301      	str	r3, [sp, #4]
   b61b6:	bd08      	pop	{r3, pc}
   b61b8:	00030220 	.word	0x00030220

000b61bc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b61bc:	b508      	push	{r3, lr}
   b61be:	4b02      	ldr	r3, [pc, #8]	; (b61c8 <system_delay_ms+0xc>)
   b61c0:	681b      	ldr	r3, [r3, #0]
   b61c2:	695b      	ldr	r3, [r3, #20]
   b61c4:	9301      	str	r3, [sp, #4]
   b61c6:	bd08      	pop	{r3, pc}
   b61c8:	00030220 	.word	0x00030220

000b61cc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b61cc:	b508      	push	{r3, lr}
   b61ce:	4b03      	ldr	r3, [pc, #12]	; (b61dc <system_ctrl_set_app_request_handler+0x10>)
   b61d0:	681b      	ldr	r3, [r3, #0]
   b61d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b61d6:	9301      	str	r3, [sp, #4]
   b61d8:	bd08      	pop	{r3, pc}
   b61da:	0000      	.short	0x0000
   b61dc:	00030220 	.word	0x00030220

000b61e0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b61e0:	b508      	push	{r3, lr}
   b61e2:	4b03      	ldr	r3, [pc, #12]	; (b61f0 <system_ctrl_set_result+0x10>)
   b61e4:	681b      	ldr	r3, [r3, #0]
   b61e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b61ea:	9301      	str	r3, [sp, #4]
   b61ec:	bd08      	pop	{r3, pc}
   b61ee:	0000      	.short	0x0000
   b61f0:	00030220 	.word	0x00030220

000b61f4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b61f4:	b508      	push	{r3, lr}
   b61f6:	4b02      	ldr	r3, [pc, #8]	; (b6200 <spark_set_random_seed_from_cloud_handler+0xc>)
   b61f8:	681b      	ldr	r3, [r3, #0]
   b61fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b61fc:	9301      	str	r3, [sp, #4]
   b61fe:	bd08      	pop	{r3, pc}
   b6200:	00030244 	.word	0x00030244

000b6204 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6204:	b508      	push	{r3, lr}
   b6206:	4b02      	ldr	r3, [pc, #8]	; (b6210 <network_connect+0xc>)
   b6208:	681b      	ldr	r3, [r3, #0]
   b620a:	685b      	ldr	r3, [r3, #4]
   b620c:	9301      	str	r3, [sp, #4]
   b620e:	bd08      	pop	{r3, pc}
   b6210:	00030240 	.word	0x00030240

000b6214 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6214:	b508      	push	{r3, lr}
   b6216:	4b02      	ldr	r3, [pc, #8]	; (b6220 <network_connecting+0xc>)
   b6218:	681b      	ldr	r3, [r3, #0]
   b621a:	689b      	ldr	r3, [r3, #8]
   b621c:	9301      	str	r3, [sp, #4]
   b621e:	bd08      	pop	{r3, pc}
   b6220:	00030240 	.word	0x00030240

000b6224 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6224:	b508      	push	{r3, lr}
   b6226:	4b02      	ldr	r3, [pc, #8]	; (b6230 <network_disconnect+0xc>)
   b6228:	681b      	ldr	r3, [r3, #0]
   b622a:	68db      	ldr	r3, [r3, #12]
   b622c:	9301      	str	r3, [sp, #4]
   b622e:	bd08      	pop	{r3, pc}
   b6230:	00030240 	.word	0x00030240

000b6234 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6234:	b508      	push	{r3, lr}
   b6236:	4b02      	ldr	r3, [pc, #8]	; (b6240 <network_ready+0xc>)
   b6238:	681b      	ldr	r3, [r3, #0]
   b623a:	691b      	ldr	r3, [r3, #16]
   b623c:	9301      	str	r3, [sp, #4]
   b623e:	bd08      	pop	{r3, pc}
   b6240:	00030240 	.word	0x00030240

000b6244 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6244:	b508      	push	{r3, lr}
   b6246:	4b02      	ldr	r3, [pc, #8]	; (b6250 <network_on+0xc>)
   b6248:	681b      	ldr	r3, [r3, #0]
   b624a:	695b      	ldr	r3, [r3, #20]
   b624c:	9301      	str	r3, [sp, #4]
   b624e:	bd08      	pop	{r3, pc}
   b6250:	00030240 	.word	0x00030240

000b6254 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6254:	b508      	push	{r3, lr}
   b6256:	4b02      	ldr	r3, [pc, #8]	; (b6260 <network_off+0xc>)
   b6258:	681b      	ldr	r3, [r3, #0]
   b625a:	699b      	ldr	r3, [r3, #24]
   b625c:	9301      	str	r3, [sp, #4]
   b625e:	bd08      	pop	{r3, pc}
   b6260:	00030240 	.word	0x00030240

000b6264 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6264:	b508      	push	{r3, lr}
   b6266:	4b02      	ldr	r3, [pc, #8]	; (b6270 <network_listen+0xc>)
   b6268:	681b      	ldr	r3, [r3, #0]
   b626a:	69db      	ldr	r3, [r3, #28]
   b626c:	9301      	str	r3, [sp, #4]
   b626e:	bd08      	pop	{r3, pc}
   b6270:	00030240 	.word	0x00030240

000b6274 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6274:	b508      	push	{r3, lr}
   b6276:	4b02      	ldr	r3, [pc, #8]	; (b6280 <network_listening+0xc>)
   b6278:	681b      	ldr	r3, [r3, #0]
   b627a:	6a1b      	ldr	r3, [r3, #32]
   b627c:	9301      	str	r3, [sp, #4]
   b627e:	bd08      	pop	{r3, pc}
   b6280:	00030240 	.word	0x00030240

000b6284 <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b6284:	b508      	push	{r3, lr}
   b6286:	4b02      	ldr	r3, [pc, #8]	; (b6290 <network_set_credentials+0xc>)
   b6288:	681b      	ldr	r3, [r3, #0]
   b628a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b628c:	9301      	str	r3, [sp, #4]
   b628e:	bd08      	pop	{r3, pc}
   b6290:	00030240 	.word	0x00030240

000b6294 <network_set_listen_timeout>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6294:	b508      	push	{r3, lr}
   b6296:	4b02      	ldr	r3, [pc, #8]	; (b62a0 <network_set_listen_timeout+0xc>)
   b6298:	681b      	ldr	r3, [r3, #0]
   b629a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b629c:	9301      	str	r3, [sp, #4]
   b629e:	bd08      	pop	{r3, pc}
   b62a0:	00030240 	.word	0x00030240

000b62a4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b62a4:	b508      	push	{r3, lr}
   b62a6:	4b02      	ldr	r3, [pc, #8]	; (b62b0 <network_get_listen_timeout+0xc>)
   b62a8:	681b      	ldr	r3, [r3, #0]
   b62aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b62ac:	9301      	str	r3, [sp, #4]
   b62ae:	bd08      	pop	{r3, pc}
   b62b0:	00030240 	.word	0x00030240

000b62b4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b62b4:	b508      	push	{r3, lr}
   b62b6:	4b02      	ldr	r3, [pc, #8]	; (b62c0 <network_is_on+0xc>)
   b62b8:	681b      	ldr	r3, [r3, #0]
   b62ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b62bc:	9301      	str	r3, [sp, #4]
   b62be:	bd08      	pop	{r3, pc}
   b62c0:	00030240 	.word	0x00030240

000b62c4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b62c4:	b508      	push	{r3, lr}
   b62c6:	4b02      	ldr	r3, [pc, #8]	; (b62d0 <network_is_off+0xc>)
   b62c8:	681b      	ldr	r3, [r3, #0]
   b62ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b62cc:	9301      	str	r3, [sp, #4]
   b62ce:	bd08      	pop	{r3, pc}
   b62d0:	00030240 	.word	0x00030240

000b62d4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b62d4:	b508      	push	{r3, lr}
   b62d6:	4b02      	ldr	r3, [pc, #8]	; (b62e0 <malloc+0xc>)
   b62d8:	681b      	ldr	r3, [r3, #0]
   b62da:	681b      	ldr	r3, [r3, #0]
   b62dc:	9301      	str	r3, [sp, #4]
   b62de:	bd08      	pop	{r3, pc}
   b62e0:	0003021c 	.word	0x0003021c

000b62e4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b62e4:	b508      	push	{r3, lr}
   b62e6:	4b02      	ldr	r3, [pc, #8]	; (b62f0 <free+0xc>)
   b62e8:	681b      	ldr	r3, [r3, #0]
   b62ea:	685b      	ldr	r3, [r3, #4]
   b62ec:	9301      	str	r3, [sp, #4]
   b62ee:	bd08      	pop	{r3, pc}
   b62f0:	0003021c 	.word	0x0003021c

000b62f4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b62f4:	b508      	push	{r3, lr}
   b62f6:	4b02      	ldr	r3, [pc, #8]	; (b6300 <realloc+0xc>)
   b62f8:	681b      	ldr	r3, [r3, #0]
   b62fa:	689b      	ldr	r3, [r3, #8]
   b62fc:	9301      	str	r3, [sp, #4]
   b62fe:	bd08      	pop	{r3, pc}
   b6300:	0003021c 	.word	0x0003021c

000b6304 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6304:	b508      	push	{r3, lr}
   b6306:	4b02      	ldr	r3, [pc, #8]	; (b6310 <vsnprintf+0xc>)
   b6308:	681b      	ldr	r3, [r3, #0]
   b630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b630c:	9301      	str	r3, [sp, #4]
   b630e:	bd08      	pop	{r3, pc}
   b6310:	0003021c 	.word	0x0003021c

000b6314 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6314:	b508      	push	{r3, lr}
   b6316:	4b02      	ldr	r3, [pc, #8]	; (b6320 <abort+0xc>)
   b6318:	681b      	ldr	r3, [r3, #0]
   b631a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b631c:	9301      	str	r3, [sp, #4]
   b631e:	bd08      	pop	{r3, pc}
   b6320:	0003021c 	.word	0x0003021c

000b6324 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6324:	b508      	push	{r3, lr}
   b6326:	4b02      	ldr	r3, [pc, #8]	; (b6330 <__errno+0xc>)
   b6328:	681b      	ldr	r3, [r3, #0]
   b632a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b632c:	9301      	str	r3, [sp, #4]
   b632e:	bd08      	pop	{r3, pc}
   b6330:	0003021c 	.word	0x0003021c

000b6334 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6334:	b508      	push	{r3, lr}
   b6336:	4b02      	ldr	r3, [pc, #8]	; (b6340 <__assert_func+0xc>)
   b6338:	681b      	ldr	r3, [r3, #0]
   b633a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b633c:	9301      	str	r3, [sp, #4]
   b633e:	bd08      	pop	{r3, pc}
   b6340:	0003021c 	.word	0x0003021c

000b6344 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6344:	b508      	push	{r3, lr}
   b6346:	4b02      	ldr	r3, [pc, #8]	; (b6350 <newlib_impure_ptr_callback+0xc>)
   b6348:	681b      	ldr	r3, [r3, #0]
   b634a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b634c:	9301      	str	r3, [sp, #4]
   b634e:	bd08      	pop	{r3, pc}
   b6350:	0003021c 	.word	0x0003021c

000b6354 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b6354:	428a      	cmp	r2, r1
{
   b6356:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b6358:	d007      	beq.n	b636a <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b635a:	1a44      	subs	r4, r0, r1
   b635c:	9802      	ldr	r0, [sp, #8]
   b635e:	1ac0      	subs	r0, r0, r3
   b6360:	4344      	muls	r4, r0
   b6362:	1a50      	subs	r0, r2, r1
   b6364:	fb94 f0f0 	sdiv	r0, r4, r0
   b6368:	4418      	add	r0, r3
}
   b636a:	bd10      	pop	{r4, pc}

000b636c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b636c:	2100      	movs	r1, #0
   b636e:	f7ff bf25 	b.w	b61bc <system_delay_ms>

000b6372 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b6372:	b510      	push	{r4, lr}
      if (_M_manager)
   b6374:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b6376:	4604      	mov	r4, r0
      if (_M_manager)
   b6378:	b113      	cbz	r3, b6380 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b637a:	2203      	movs	r2, #3
   b637c:	4601      	mov	r1, r0
   b637e:	4798      	blx	r3
    }
   b6380:	4620      	mov	r0, r4
   b6382:	bd10      	pop	{r4, pc}

000b6384 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6384:	4802      	ldr	r0, [pc, #8]	; (b6390 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6386:	2300      	movs	r3, #0
   b6388:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b638a:	f7ff bd17 	b.w	b5dbc <os_mutex_recursive_create>
   b638e:	bf00      	nop
   b6390:	2003e634 	.word	0x2003e634

000b6394 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6394:	2200      	movs	r2, #0
   b6396:	6840      	ldr	r0, [r0, #4]
   b6398:	4611      	mov	r1, r2
   b639a:	f7ff bf6b 	b.w	b6274 <network_listening>

000b639e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b639e:	2200      	movs	r2, #0
   b63a0:	6840      	ldr	r0, [r0, #4]
   b63a2:	4611      	mov	r1, r2
   b63a4:	f7ff bf7e 	b.w	b62a4 <network_get_listen_timeout>

000b63a8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b63a8:	6840      	ldr	r0, [r0, #4]
   b63aa:	2200      	movs	r2, #0
   b63ac:	f7ff bf72 	b.w	b6294 <network_set_listen_timeout>

000b63b0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b63b0:	6840      	ldr	r0, [r0, #4]
   b63b2:	2200      	movs	r2, #0
   b63b4:	f081 0101 	eor.w	r1, r1, #1
   b63b8:	f7ff bf54 	b.w	b6264 <network_listen>

000b63bc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b63bc:	2300      	movs	r3, #0
   b63be:	6840      	ldr	r0, [r0, #4]
   b63c0:	461a      	mov	r2, r3
   b63c2:	4619      	mov	r1, r3
   b63c4:	f7ff bf46 	b.w	b6254 <network_off>

000b63c8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b63c8:	2300      	movs	r3, #0
   b63ca:	6840      	ldr	r0, [r0, #4]
   b63cc:	461a      	mov	r2, r3
   b63ce:	4619      	mov	r1, r3
   b63d0:	f7ff bf38 	b.w	b6244 <network_on>

000b63d4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b63d4:	2200      	movs	r2, #0
   b63d6:	6840      	ldr	r0, [r0, #4]
   b63d8:	4611      	mov	r1, r2
   b63da:	f7ff bf2b 	b.w	b6234 <network_ready>

000b63de <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b63de:	2200      	movs	r2, #0
   b63e0:	6840      	ldr	r0, [r0, #4]
   b63e2:	4611      	mov	r1, r2
   b63e4:	f7ff bf16 	b.w	b6214 <network_connecting>

000b63e8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b63e8:	6840      	ldr	r0, [r0, #4]
   b63ea:	2200      	movs	r2, #0
   b63ec:	2102      	movs	r1, #2
   b63ee:	f7ff bf19 	b.w	b6224 <network_disconnect>

000b63f2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b63f2:	2300      	movs	r3, #0
   b63f4:	6840      	ldr	r0, [r0, #4]
   b63f6:	461a      	mov	r2, r3
   b63f8:	f7ff bf04 	b.w	b6204 <network_connect>

000b63fc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b63fc:	4b02      	ldr	r3, [pc, #8]	; (b6408 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b63fe:	2203      	movs	r2, #3
   b6400:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6402:	4a02      	ldr	r2, [pc, #8]	; (b640c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6404:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6406:	4770      	bx	lr
   b6408:	2003e638 	.word	0x2003e638
   b640c:	000b87a4 	.word	0x000b87a4

000b6410 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6410:	4770      	bx	lr

000b6412 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6414:	4606      	mov	r6, r0
   b6416:	4615      	mov	r5, r2
   b6418:	460c      	mov	r4, r1
   b641a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b641c:	42bc      	cmp	r4, r7
   b641e:	d006      	beq.n	b642e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6420:	6833      	ldr	r3, [r6, #0]
   b6422:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6426:	689b      	ldr	r3, [r3, #8]
   b6428:	4630      	mov	r0, r6
   b642a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b642c:	e7f6      	b.n	b641c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b642e:	4628      	mov	r0, r5
   b6430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6432 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6432:	7c00      	ldrb	r0, [r0, #16]
   b6434:	2200      	movs	r2, #0
   b6436:	f7ff bd49 	b.w	b5ecc <hal_i2c_write>

000b643a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b643a:	7c00      	ldrb	r0, [r0, #16]
   b643c:	2100      	movs	r1, #0
   b643e:	f7ff bd4d 	b.w	b5edc <hal_i2c_available>

000b6442 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6442:	7c00      	ldrb	r0, [r0, #16]
   b6444:	2100      	movs	r1, #0
   b6446:	f7ff bd51 	b.w	b5eec <hal_i2c_read>

000b644a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b644a:	7c00      	ldrb	r0, [r0, #16]
   b644c:	2100      	movs	r1, #0
   b644e:	f7ff bd55 	b.w	b5efc <hal_i2c_peek>

000b6452 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6452:	7c00      	ldrb	r0, [r0, #16]
   b6454:	2100      	movs	r1, #0
   b6456:	f7ff bd59 	b.w	b5f0c <hal_i2c_flush>

000b645a <_ZN7TwoWireD0Ev>:
   b645a:	b510      	push	{r4, lr}
   b645c:	2114      	movs	r1, #20
   b645e:	4604      	mov	r4, r0
   b6460:	f7fd fe1b 	bl	b409a <_ZdlPvj>
   b6464:	4620      	mov	r0, r4
   b6466:	bd10      	pop	{r4, pc}

000b6468 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6468:	b538      	push	{r3, r4, r5, lr}
   b646a:	4604      	mov	r4, r0
   b646c:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b646e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6472:	2200      	movs	r2, #0
   b6474:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6478:	4b09      	ldr	r3, [pc, #36]	; (b64a0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b647a:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b647c:	4608      	mov	r0, r1
   b647e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6480:	4629      	mov	r1, r5
   b6482:	f7ff fd53 	bl	b5f2c <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6486:	30bf      	adds	r0, #191	; 0xbf
   b6488:	d108      	bne.n	b649c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b648a:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b648c:	07db      	lsls	r3, r3, #31
   b648e:	d505      	bpl.n	b649c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6490:	6868      	ldr	r0, [r5, #4]
   b6492:	f7ff ff27 	bl	b62e4 <free>
    free(conf.tx_buffer);
   b6496:	68e8      	ldr	r0, [r5, #12]
   b6498:	f7ff ff24 	bl	b62e4 <free>
}
   b649c:	4620      	mov	r0, r4
   b649e:	bd38      	pop	{r3, r4, r5, pc}
   b64a0:	000b87e0 	.word	0x000b87e0

000b64a4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b64a4:	2300      	movs	r3, #0
   b64a6:	7c00      	ldrb	r0, [r0, #16]
   b64a8:	461a      	mov	r2, r3
   b64aa:	4619      	mov	r1, r3
   b64ac:	f7ff bcf6 	b.w	b5e9c <hal_i2c_begin>

000b64b0 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b64b0:	7c00      	ldrb	r0, [r0, #16]
   b64b2:	2200      	movs	r2, #0
   b64b4:	f7ff bcfa 	b.w	b5eac <hal_i2c_begin_transmission>

000b64b8 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b64b8:	b2c9      	uxtb	r1, r1
   b64ba:	f7ff bff9 	b.w	b64b0 <_ZN7TwoWire17beginTransmissionEh>

000b64be <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b64be:	7c00      	ldrb	r0, [r0, #16]
   b64c0:	2200      	movs	r2, #0
   b64c2:	f7ff bcfb 	b.w	b5ebc <hal_i2c_end_transmission>

000b64c6 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b64c6:	2101      	movs	r1, #1
   b64c8:	f7ff bff9 	b.w	b64be <_ZN7TwoWire15endTransmissionEh>

000b64cc <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b64cc:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
   b64ce:	b510      	push	{r4, lr}
   b64d0:	b90a      	cbnz	r2, b64d6 <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
   b64d2:	f001 fa21 	bl	b7918 <_ZSt25__throw_bad_function_callv>
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
   b64d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b64da:	68c3      	ldr	r3, [r0, #12]
   b64dc:	4718      	bx	r3
	...

000b64e0 <_Z16allocate_handlertRSt8functionIFvvEE>:
{
   b64e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
   b64e2:	4f10      	ldr	r7, [pc, #64]	; (b6524 <_Z16allocate_handlertRSt8functionIFvvEE+0x44>)
   b64e4:	f857 4020 	ldr.w	r4, [r7, r0, lsl #2]
{
   b64e8:	4606      	mov	r6, r0
   b64ea:	460d      	mov	r5, r1
    delete handlers[pin];
   b64ec:	b134      	cbz	r4, b64fc <_Z16allocate_handlertRSt8functionIFvvEE+0x1c>
    class function<_Res(_ArgTypes...)>
   b64ee:	4620      	mov	r0, r4
   b64f0:	f7ff ff3f 	bl	b6372 <_ZNSt14_Function_baseD1Ev>
   b64f4:	2110      	movs	r1, #16
   b64f6:	4620      	mov	r0, r4
   b64f8:	f7fd fdcf 	bl	b409a <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
   b64fc:	2010      	movs	r0, #16
   b64fe:	f7fd fdc8 	bl	b4092 <_Znwj>
   b6502:	4604      	mov	r4, r0
   b6504:	b150      	cbz	r0, b651c <_Z16allocate_handlertRSt8functionIFvvEE+0x3c>
    _Function_base() : _M_manager(nullptr) { }
   b6506:	2300      	movs	r3, #0
   b6508:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b650a:	68ab      	ldr	r3, [r5, #8]
      if (static_cast<bool>(__x))
   b650c:	b133      	cbz	r3, b651c <_Z16allocate_handlertRSt8functionIFvvEE+0x3c>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b650e:	2202      	movs	r2, #2
   b6510:	4629      	mov	r1, r5
   b6512:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6514:	68eb      	ldr	r3, [r5, #12]
   b6516:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6518:	68ab      	ldr	r3, [r5, #8]
   b651a:	60a3      	str	r3, [r4, #8]
   b651c:	f847 4026 	str.w	r4, [r7, r6, lsl #2]
}
   b6520:	4620      	mov	r0, r4
   b6522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6524:	2003e640 	.word	0x2003e640

000b6528 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
  }
  return nullptr;
}

bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b6528:	b5f0      	push	{r4, r5, r6, r7, lr}
   b652a:	b087      	sub	sp, #28
   b652c:	4605      	mov	r5, r0
   b652e:	9103      	str	r1, [sp, #12]
   b6530:	4617      	mov	r7, r2
   b6532:	461e      	mov	r6, r3
    HAL_Interrupts_Detach(pin);
   b6534:	f7ff fc9a 	bl	b5e6c <HAL_Interrupts_Detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
   b6538:	9903      	ldr	r1, [sp, #12]
   b653a:	4628      	mov	r0, r5
   b653c:	f7ff ffd0 	bl	b64e0 <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
   b6540:	4604      	mov	r4, r0
   b6542:	b1e8      	cbz	r0, b6580 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
        HAL_InterruptExtraConfiguration extra = {};
   b6544:	2100      	movs	r1, #0
  if (priority >= 0) {
   b6546:	428e      	cmp	r6, r1
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b6548:	f04f 0304 	mov.w	r3, #4
        HAL_InterruptExtraConfiguration extra = {};
   b654c:	f8ad 1015 	strh.w	r1, [sp, #21]
   b6550:	f88d 1017 	strb.w	r1, [sp, #23]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b6554:	f88d 3014 	strb.w	r3, [sp, #20]
    return &extra;
   b6558:	bfa2      	ittt	ge
   b655a:	a905      	addge	r1, sp, #20
    extra.IRQChannelSubPriority = subpriority;
   b655c:	f89d 3030 	ldrbge.w	r3, [sp, #48]	; 0x30
   b6560:	f88d 3016 	strbge.w	r3, [sp, #22]
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b6564:	9100      	str	r1, [sp, #0]
   b6566:	4602      	mov	r2, r0
   b6568:	4907      	ldr	r1, [pc, #28]	; (b6588 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x60>)
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b656a:	bfa8      	it	ge
   b656c:	f88d 6015 	strbge.w	r6, [sp, #21]
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b6570:	463b      	mov	r3, r7
   b6572:	4628      	mov	r0, r5
   b6574:	f7ff fc72 	bl	b5e5c <HAL_Interrupts_Attach>
   b6578:	b110      	cbz	r0, b6580 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
            return false;
   b657a:	2000      	movs	r0, #0
        }
    }
    return handler!=NULL;
}
   b657c:	b007      	add	sp, #28
   b657e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return handler!=NULL;
   b6580:	1e20      	subs	r0, r4, #0
   b6582:	bf18      	it	ne
   b6584:	2001      	movne	r0, #1
   b6586:	e7f9      	b.n	b657c <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x54>
   b6588:	000b64cd 	.word	0x000b64cd

000b658c <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   b658c:	f7ff bc7e 	b.w	b5e8c <HAL_Interrupts_Disable_All>

000b6590 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   b6590:	f7ff bc74 	b.w	b5e7c <HAL_Interrupts_Enable_All>

000b6594 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6594:	4770      	bx	lr

000b6596 <_ZN9IPAddressD0Ev>:
   b6596:	b510      	push	{r4, lr}
   b6598:	2118      	movs	r1, #24
   b659a:	4604      	mov	r4, r0
   b659c:	f7fd fd7d 	bl	b409a <_ZdlPvj>
   b65a0:	4620      	mov	r0, r4
   b65a2:	bd10      	pop	{r4, pc}

000b65a4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b65a4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b65a6:	7d03      	ldrb	r3, [r0, #20]
   b65a8:	2b06      	cmp	r3, #6
{
   b65aa:	b08d      	sub	sp, #52	; 0x34
   b65ac:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b65ae:	f100 0704 	add.w	r7, r0, #4
   b65b2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b65b6:	d012      	beq.n	b65de <_ZNK9IPAddress7printToER5Print+0x3a>
   b65b8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b65bc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b65c0:	220a      	movs	r2, #10
   b65c2:	4630      	mov	r0, r6
   b65c4:	f000 f973 	bl	b68ae <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b65c8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b65ca:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b65cc:	d019      	beq.n	b6602 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b65ce:	2c00      	cmp	r4, #0
   b65d0:	d0f4      	beq.n	b65bc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b65d2:	212e      	movs	r1, #46	; 0x2e
   b65d4:	4630      	mov	r0, r6
   b65d6:	f000 f951 	bl	b687c <_ZN5Print5printEc>
   b65da:	4404      	add	r4, r0
   b65dc:	e7ee      	b.n	b65bc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b65de:	232f      	movs	r3, #47	; 0x2f
   b65e0:	466a      	mov	r2, sp
   b65e2:	4639      	mov	r1, r7
   b65e4:	200a      	movs	r0, #10
		buf[0] = 0;
   b65e6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b65ea:	f7ff fcaf 	bl	b5f4c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b65ee:	4668      	mov	r0, sp
   b65f0:	f001 fb04 	bl	b7bfc <strlen>
   b65f4:	6833      	ldr	r3, [r6, #0]
   b65f6:	4602      	mov	r2, r0
   b65f8:	68db      	ldr	r3, [r3, #12]
   b65fa:	4669      	mov	r1, sp
   b65fc:	4630      	mov	r0, r6
   b65fe:	4798      	blx	r3
   b6600:	4604      	mov	r4, r0
    }
    return n;
}
   b6602:	4620      	mov	r0, r4
   b6604:	b00d      	add	sp, #52	; 0x34
   b6606:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6608 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6608:	b510      	push	{r4, lr}
   b660a:	4b05      	ldr	r3, [pc, #20]	; (b6620 <_ZN9IPAddressC1Ev+0x18>)
   b660c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b660e:	2211      	movs	r2, #17
   b6610:	f840 3b04 	str.w	r3, [r0], #4
   b6614:	2100      	movs	r1, #0
   b6616:	f001 faa9 	bl	b7b6c <memset>
}
   b661a:	4620      	mov	r0, r4
   b661c:	bd10      	pop	{r4, pc}
   b661e:	bf00      	nop
   b6620:	000b8808 	.word	0x000b8808

000b6624 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6624:	4603      	mov	r3, r0
   b6626:	4a07      	ldr	r2, [pc, #28]	; (b6644 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6628:	b510      	push	{r4, lr}
   b662a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b662e:	f101 0210 	add.w	r2, r1, #16
   b6632:	f851 4b04 	ldr.w	r4, [r1], #4
   b6636:	f843 4b04 	str.w	r4, [r3], #4
   b663a:	4291      	cmp	r1, r2
   b663c:	d1f9      	bne.n	b6632 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b663e:	780a      	ldrb	r2, [r1, #0]
   b6640:	701a      	strb	r2, [r3, #0]
}
   b6642:	bd10      	pop	{r4, pc}
   b6644:	000b8808 	.word	0x000b8808

000b6648 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b6648:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b664a:	2b04      	cmp	r3, #4
   b664c:	d104      	bne.n	b6658 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b664e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6650:	3800      	subs	r0, #0
   b6652:	bf18      	it	ne
   b6654:	2001      	movne	r0, #1
   b6656:	4770      	bx	lr
    } else if (version() == 6) {
   b6658:	2b06      	cmp	r3, #6
   b665a:	d107      	bne.n	b666c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b665c:	6843      	ldr	r3, [r0, #4]
   b665e:	b93b      	cbnz	r3, b6670 <_ZNK9IPAddresscvbEv+0x28>
   b6660:	6883      	ldr	r3, [r0, #8]
   b6662:	b92b      	cbnz	r3, b6670 <_ZNK9IPAddresscvbEv+0x28>
   b6664:	68c3      	ldr	r3, [r0, #12]
   b6666:	b91b      	cbnz	r3, b6670 <_ZNK9IPAddresscvbEv+0x28>
   b6668:	6900      	ldr	r0, [r0, #16]
   b666a:	e7f1      	b.n	b6650 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b666c:	2000      	movs	r0, #0
   b666e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6670:	2001      	movs	r0, #1
}
   b6672:	4770      	bx	lr

000b6674 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6674:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6676:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b667a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b667e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6682:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6686:	2304      	movs	r3, #4
   b6688:	6041      	str	r1, [r0, #4]
   b668a:	7503      	strb	r3, [r0, #20]
}
   b668c:	bd10      	pop	{r4, pc}
	...

000b6690 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6690:	b507      	push	{r0, r1, r2, lr}
   b6692:	4b06      	ldr	r3, [pc, #24]	; (b66ac <_ZN9IPAddressC1EPKh+0x1c>)
   b6694:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6696:	78cb      	ldrb	r3, [r1, #3]
   b6698:	9300      	str	r3, [sp, #0]
   b669a:	788b      	ldrb	r3, [r1, #2]
   b669c:	784a      	ldrb	r2, [r1, #1]
   b669e:	7809      	ldrb	r1, [r1, #0]
   b66a0:	f7ff ffe8 	bl	b6674 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b66a4:	b003      	add	sp, #12
   b66a6:	f85d fb04 	ldr.w	pc, [sp], #4
   b66aa:	bf00      	nop
   b66ac:	000b8808 	.word	0x000b8808

000b66b0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b66b0:	4b01      	ldr	r3, [pc, #4]	; (b66b8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b66b2:	4a02      	ldr	r2, [pc, #8]	; (b66bc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b66b4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b66b6:	4770      	bx	lr
   b66b8:	2003e6d0 	.word	0x2003e6d0
   b66bc:	000b8814 	.word	0x000b8814

000b66c0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b66c0:	2300      	movs	r3, #0
   b66c2:	6840      	ldr	r0, [r0, #4]
   b66c4:	461a      	mov	r2, r3
   b66c6:	f7ff bd9d 	b.w	b6204 <network_connect>

000b66ca <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b66ca:	6840      	ldr	r0, [r0, #4]
   b66cc:	2200      	movs	r2, #0
   b66ce:	2102      	movs	r1, #2
   b66d0:	f7ff bda8 	b.w	b6224 <network_disconnect>

000b66d4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b66d4:	2200      	movs	r2, #0
   b66d6:	6840      	ldr	r0, [r0, #4]
   b66d8:	4611      	mov	r1, r2
   b66da:	f7ff bd9b 	b.w	b6214 <network_connecting>

000b66de <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b66de:	2200      	movs	r2, #0
   b66e0:	6840      	ldr	r0, [r0, #4]
   b66e2:	4611      	mov	r1, r2
   b66e4:	f7ff bda6 	b.w	b6234 <network_ready>

000b66e8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b66e8:	2300      	movs	r3, #0
   b66ea:	6840      	ldr	r0, [r0, #4]
   b66ec:	461a      	mov	r2, r3
   b66ee:	4619      	mov	r1, r3
   b66f0:	f7ff bda8 	b.w	b6244 <network_on>

000b66f4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b66f4:	2300      	movs	r3, #0
   b66f6:	6840      	ldr	r0, [r0, #4]
   b66f8:	461a      	mov	r2, r3
   b66fa:	4619      	mov	r1, r3
   b66fc:	f7ff bdaa 	b.w	b6254 <network_off>

000b6700 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6700:	6840      	ldr	r0, [r0, #4]
   b6702:	2100      	movs	r1, #0
   b6704:	f7ff bdd6 	b.w	b62b4 <network_is_on>

000b6708 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6708:	6840      	ldr	r0, [r0, #4]
   b670a:	2100      	movs	r1, #0
   b670c:	f7ff bdda 	b.w	b62c4 <network_is_off>

000b6710 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6710:	6840      	ldr	r0, [r0, #4]
   b6712:	2200      	movs	r2, #0
   b6714:	f081 0101 	eor.w	r1, r1, #1
   b6718:	f7ff bda4 	b.w	b6264 <network_listen>

000b671c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b671c:	6840      	ldr	r0, [r0, #4]
   b671e:	2200      	movs	r2, #0
   b6720:	f7ff bdb8 	b.w	b6294 <network_set_listen_timeout>

000b6724 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6724:	2200      	movs	r2, #0
   b6726:	6840      	ldr	r0, [r0, #4]
   b6728:	4611      	mov	r1, r2
   b672a:	f7ff bdbb 	b.w	b62a4 <network_get_listen_timeout>

000b672e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b672e:	2200      	movs	r2, #0
   b6730:	6840      	ldr	r0, [r0, #4]
   b6732:	4611      	mov	r1, r2
   b6734:	f7ff bd9e 	b.w	b6274 <network_listening>

000b6738 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b673c:	b095      	sub	sp, #84	; 0x54
   b673e:	4614      	mov	r4, r2
   b6740:	460d      	mov	r5, r1
   b6742:	4607      	mov	r7, r0
    IPAddress addr;
   b6744:	f7ff ff60 	bl	b6608 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6748:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b674a:	221c      	movs	r2, #28
   b674c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b674e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6750:	f001 fa0c 	bl	b7b6c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6754:	2340      	movs	r3, #64	; 0x40
   b6756:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6758:	4620      	mov	r0, r4
   b675a:	466b      	mov	r3, sp
   b675c:	aa0c      	add	r2, sp, #48	; 0x30
   b675e:	2100      	movs	r1, #0
   b6760:	f7ff fc14 	bl	b5f8c <netdb_getaddrinfo>
    if (!r) {
   b6764:	4604      	mov	r4, r0
   b6766:	2800      	cmp	r0, #0
   b6768:	d14b      	bne.n	b6802 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b676a:	4602      	mov	r2, r0
   b676c:	2101      	movs	r1, #1
   b676e:	6868      	ldr	r0, [r5, #4]
   b6770:	f7ff fd60 	bl	b6234 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6774:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6776:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6778:	4622      	mov	r2, r4
   b677a:	6868      	ldr	r0, [r5, #4]
   b677c:	f7ff fd5a 	bl	b6234 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6780:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6782:	4681      	mov	r9, r0
        bool ok = false;
   b6784:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6786:	2e00      	cmp	r6, #0
   b6788:	d03b      	beq.n	b6802 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b678a:	2900      	cmp	r1, #0
   b678c:	d139      	bne.n	b6802 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b678e:	6873      	ldr	r3, [r6, #4]
   b6790:	2b02      	cmp	r3, #2
   b6792:	d003      	beq.n	b679c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6794:	2b0a      	cmp	r3, #10
   b6796:	d011      	beq.n	b67bc <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6798:	69f6      	ldr	r6, [r6, #28]
   b679a:	e7f4      	b.n	b6786 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b679c:	f1b8 0f00 	cmp.w	r8, #0
   b67a0:	d0fa      	beq.n	b6798 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b67a2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b67a4:	a806      	add	r0, sp, #24
   b67a6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b67a8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b67aa:	f7ff ff71 	bl	b6690 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b67ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b67b0:	1d3c      	adds	r4, r7, #4
   b67b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b67b4:	682b      	ldr	r3, [r5, #0]
   b67b6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b67b8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b67ba:	e7ed      	b.n	b6798 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b67bc:	f1b9 0f00 	cmp.w	r9, #0
   b67c0:	d0ea      	beq.n	b6798 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b67c2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b67c4:	2210      	movs	r2, #16
   b67c6:	a801      	add	r0, sp, #4
   b67c8:	f001 f9d0 	bl	b7b6c <memset>
                    a.v = 6;
   b67cc:	2306      	movs	r3, #6
   b67ce:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b67d2:	ad01      	add	r5, sp, #4
   b67d4:	f104 0308 	add.w	r3, r4, #8
   b67d8:	3418      	adds	r4, #24
   b67da:	6818      	ldr	r0, [r3, #0]
   b67dc:	6859      	ldr	r1, [r3, #4]
   b67de:	462a      	mov	r2, r5
   b67e0:	c203      	stmia	r2!, {r0, r1}
   b67e2:	3308      	adds	r3, #8
   b67e4:	42a3      	cmp	r3, r4
   b67e6:	4615      	mov	r5, r2
   b67e8:	d1f7      	bne.n	b67da <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b67ea:	a901      	add	r1, sp, #4
   b67ec:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b67ee:	ad07      	add	r5, sp, #28
   b67f0:	f7ff ff18 	bl	b6624 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b67f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b67f6:	1d3c      	adds	r4, r7, #4
   b67f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b67fa:	682b      	ldr	r3, [r5, #0]
   b67fc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b67fe:	4649      	mov	r1, r9
   b6800:	e7ca      	b.n	b6798 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6802:	9800      	ldr	r0, [sp, #0]
   b6804:	f7ff fbba 	bl	b5f7c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6808:	4638      	mov	r0, r7
   b680a:	b015      	add	sp, #84	; 0x54
   b680c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6810 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6810:	4b02      	ldr	r3, [pc, #8]	; (b681c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6812:	4a03      	ldr	r2, [pc, #12]	; (b6820 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6814:	601a      	str	r2, [r3, #0]
   b6816:	2200      	movs	r2, #0
   b6818:	605a      	str	r2, [r3, #4]

} // spark
   b681a:	4770      	bx	lr
   b681c:	2003e6d4 	.word	0x2003e6d4
   b6820:	000b8820 	.word	0x000b8820

000b6824 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6826:	4606      	mov	r6, r0
   b6828:	460d      	mov	r5, r1
  size_t n = 0;
   b682a:	188f      	adds	r7, r1, r2
   b682c:	2400      	movs	r4, #0
  while (size--) {
   b682e:	42bd      	cmp	r5, r7
   b6830:	d00c      	beq.n	b684c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6832:	6833      	ldr	r3, [r6, #0]
   b6834:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6838:	689b      	ldr	r3, [r3, #8]
   b683a:	4630      	mov	r0, r6
   b683c:	4798      	blx	r3
     if (chunk>=0)
   b683e:	1e03      	subs	r3, r0, #0
   b6840:	db01      	blt.n	b6846 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6842:	441c      	add	r4, r3
  while (size--) {
   b6844:	e7f3      	b.n	b682e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6846:	2c00      	cmp	r4, #0
   b6848:	bf08      	it	eq
   b684a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b684c:	4620      	mov	r0, r4
   b684e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6850 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6850:	b513      	push	{r0, r1, r4, lr}
   b6852:	4604      	mov	r4, r0
    }
   b6854:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6856:	b159      	cbz	r1, b6870 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6858:	9101      	str	r1, [sp, #4]
   b685a:	f001 f9cf 	bl	b7bfc <strlen>
   b685e:	6823      	ldr	r3, [r4, #0]
   b6860:	9901      	ldr	r1, [sp, #4]
   b6862:	68db      	ldr	r3, [r3, #12]
   b6864:	4602      	mov	r2, r0
   b6866:	4620      	mov	r0, r4
    }
   b6868:	b002      	add	sp, #8
   b686a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b686e:	4718      	bx	r3
    }
   b6870:	b002      	add	sp, #8
   b6872:	bd10      	pop	{r4, pc}

000b6874 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b6874:	b508      	push	{r3, lr}
  return write(str);
   b6876:	f7ff ffeb 	bl	b6850 <_ZN5Print5writeEPKc>
}
   b687a:	bd08      	pop	{r3, pc}

000b687c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b687c:	6803      	ldr	r3, [r0, #0]
   b687e:	689b      	ldr	r3, [r3, #8]
   b6880:	4718      	bx	r3

000b6882 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6882:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6884:	210d      	movs	r1, #13
{
   b6886:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6888:	f7ff fff8 	bl	b687c <_ZN5Print5printEc>
  n += print('\n');
   b688c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b688e:	4604      	mov	r4, r0
  n += print('\n');
   b6890:	4628      	mov	r0, r5
   b6892:	f7ff fff3 	bl	b687c <_ZN5Print5printEc>
  return n;
}
   b6896:	4420      	add	r0, r4
   b6898:	bd38      	pop	{r3, r4, r5, pc}

000b689a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b689a:	b538      	push	{r3, r4, r5, lr}
   b689c:	4605      	mov	r5, r0
  return write(str);
   b689e:	f7ff ffd7 	bl	b6850 <_ZN5Print5writeEPKc>
   b68a2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b68a4:	4628      	mov	r0, r5
   b68a6:	f7ff ffec 	bl	b6882 <_ZN5Print7printlnEv>
  return n;
}
   b68aa:	4420      	add	r0, r4
   b68ac:	bd38      	pop	{r3, r4, r5, pc}

000b68ae <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b68ae:	b530      	push	{r4, r5, lr}
   b68b0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b68b2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b68b4:	2a01      	cmp	r2, #1
  *str = '\0';
   b68b6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b68ba:	bf98      	it	ls
   b68bc:	220a      	movls	r2, #10
   b68be:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b68c0:	460d      	mov	r5, r1
   b68c2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b68c6:	fb01 5312 	mls	r3, r1, r2, r5
   b68ca:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b68ce:	2b09      	cmp	r3, #9
   b68d0:	bf94      	ite	ls
   b68d2:	3330      	addls	r3, #48	; 0x30
   b68d4:	3337      	addhi	r3, #55	; 0x37
   b68d6:	b2db      	uxtb	r3, r3
  } while(n);
   b68d8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b68da:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b68de:	d9ef      	bls.n	b68c0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b68e0:	4621      	mov	r1, r4
   b68e2:	f7ff ffb5 	bl	b6850 <_ZN5Print5writeEPKc>
}
   b68e6:	b00b      	add	sp, #44	; 0x2c
   b68e8:	bd30      	pop	{r4, r5, pc}

000b68ea <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b68ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b68ee:	b086      	sub	sp, #24
   b68f0:	af00      	add	r7, sp, #0
   b68f2:	4605      	mov	r5, r0
   b68f4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b68f6:	1d38      	adds	r0, r7, #4
   b68f8:	2114      	movs	r1, #20
{
   b68fa:	4614      	mov	r4, r2
    va_copy(args2, args);
   b68fc:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b68fe:	f7ff fd01 	bl	b6304 <vsnprintf>

    if (n<bufsize)
   b6902:	2813      	cmp	r0, #19
   b6904:	d80e      	bhi.n	b6924 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6906:	1d39      	adds	r1, r7, #4
   b6908:	4628      	mov	r0, r5
   b690a:	f7ff ffa1 	bl	b6850 <_ZN5Print5writeEPKc>
   b690e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6910:	b11e      	cbz	r6, b691a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6912:	4628      	mov	r0, r5
   b6914:	f7ff ffb5 	bl	b6882 <_ZN5Print7printlnEv>
   b6918:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b691a:	4620      	mov	r0, r4
   b691c:	3718      	adds	r7, #24
   b691e:	46bd      	mov	sp, r7
   b6920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6924:	f100 0308 	add.w	r3, r0, #8
   b6928:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b692c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b692e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6932:	4622      	mov	r2, r4
   b6934:	1c41      	adds	r1, r0, #1
   b6936:	683b      	ldr	r3, [r7, #0]
   b6938:	4668      	mov	r0, sp
   b693a:	f7ff fce3 	bl	b6304 <vsnprintf>
  return write(str);
   b693e:	4669      	mov	r1, sp
   b6940:	4628      	mov	r0, r5
   b6942:	f7ff ff85 	bl	b6850 <_ZN5Print5writeEPKc>
   b6946:	4604      	mov	r4, r0
   b6948:	46c5      	mov	sp, r8
   b694a:	e7e1      	b.n	b6910 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b694c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b694c:	4b01      	ldr	r3, [pc, #4]	; (b6954 <_GLOBAL__sub_I_RGB+0x8>)
   b694e:	2200      	movs	r2, #0
   b6950:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6952:	4770      	bx	lr
   b6954:	2003e6dc 	.word	0x2003e6dc

000b6958 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b6958:	2100      	movs	r1, #0
   b695a:	f7ff bb97 	b.w	b608c <hal_spi_release>

000b695e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b695e:	2100      	movs	r1, #0
   b6960:	f7ff bb8c 	b.w	b607c <hal_spi_acquire>

000b6964 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6964:	b510      	push	{r4, lr}
   b6966:	4604      	mov	r4, r0
   b6968:	4608      	mov	r0, r1
{
    _spi = spi;
   b696a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b696c:	f7ff fb6e 	bl	b604c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6970:	2300      	movs	r3, #0
   b6972:	6063      	str	r3, [r4, #4]
}
   b6974:	4620      	mov	r0, r4
   b6976:	bd10      	pop	{r4, pc}

000b6978 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b6978:	b513      	push	{r0, r1, r4, lr}
   b697a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b697c:	7800      	ldrb	r0, [r0, #0]
   b697e:	f7ff ffee 	bl	b695e <_ZN8SPIClass4lockEv.isra.0>
   b6982:	b958      	cbnz	r0, b699c <_ZN8SPIClass5beginEv+0x24>
   b6984:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b6986:	9001      	str	r0, [sp, #4]
   b6988:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b698c:	f7ff fb36 	bl	b5ffc <hal_spi_begin>
        unlock();
   b6990:	9801      	ldr	r0, [sp, #4]
    }
}
   b6992:	b002      	add	sp, #8
   b6994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6998:	f7ff bfde 	b.w	b6958 <_ZN8SPIClass6unlockEv.isra.0>
   b699c:	b002      	add	sp, #8
   b699e:	bd10      	pop	{r4, pc}

000b69a0 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b69a0:	b513      	push	{r0, r1, r4, lr}
   b69a2:	4604      	mov	r4, r0
    if (!lock())
   b69a4:	7800      	ldrb	r0, [r0, #0]
{
   b69a6:	9101      	str	r1, [sp, #4]
    if (!lock())
   b69a8:	f7ff ffd9 	bl	b695e <_ZN8SPIClass4lockEv.isra.0>
   b69ac:	9901      	ldr	r1, [sp, #4]
   b69ae:	b948      	cbnz	r0, b69c4 <_ZN8SPIClass11setBitOrderEh+0x24>
   b69b0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b69b2:	9001      	str	r0, [sp, #4]
   b69b4:	f7ff fb2a 	bl	b600c <hal_spi_set_bit_order>
        unlock();
   b69b8:	9801      	ldr	r0, [sp, #4]
    }
}
   b69ba:	b002      	add	sp, #8
   b69bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b69c0:	f7ff bfca 	b.w	b6958 <_ZN8SPIClass6unlockEv.isra.0>
   b69c4:	b002      	add	sp, #8
   b69c6:	bd10      	pop	{r4, pc}

000b69c8 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b69c8:	b513      	push	{r0, r1, r4, lr}
   b69ca:	4604      	mov	r4, r0
    if (!lock())
   b69cc:	7800      	ldrb	r0, [r0, #0]
{
   b69ce:	9101      	str	r1, [sp, #4]
    if (!lock())
   b69d0:	f7ff ffc5 	bl	b695e <_ZN8SPIClass4lockEv.isra.0>
   b69d4:	9901      	ldr	r1, [sp, #4]
   b69d6:	b948      	cbnz	r0, b69ec <_ZN8SPIClass11setDataModeEh+0x24>
   b69d8:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b69da:	9001      	str	r0, [sp, #4]
   b69dc:	f7ff fb1e 	bl	b601c <hal_spi_set_data_mode>
        unlock();
   b69e0:	9801      	ldr	r0, [sp, #4]
    }
}
   b69e2:	b002      	add	sp, #8
   b69e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b69e8:	f7ff bfb6 	b.w	b6958 <_ZN8SPIClass6unlockEv.isra.0>
   b69ec:	b002      	add	sp, #8
   b69ee:	bd10      	pop	{r4, pc}

000b69f0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b69f0:	0840      	lsrs	r0, r0, #1
{
   b69f2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b69f4:	6018      	str	r0, [r3, #0]
   b69f6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b69f8:	6818      	ldr	r0, [r3, #0]
   b69fa:	4288      	cmp	r0, r1
   b69fc:	b2e5      	uxtb	r5, r4
   b69fe:	d906      	bls.n	b6a0e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b6a00:	3401      	adds	r4, #1
   b6a02:	2c08      	cmp	r4, #8
   b6a04:	d002      	beq.n	b6a0c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b6a06:	0840      	lsrs	r0, r0, #1
   b6a08:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6a0a:	e7f5      	b.n	b69f8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6a0c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b6a0e:	4b02      	ldr	r3, [pc, #8]	; (b6a18 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b6a10:	5d5b      	ldrb	r3, [r3, r5]
   b6a12:	7013      	strb	r3, [r2, #0]
}
   b6a14:	bd30      	pop	{r4, r5, pc}
   b6a16:	bf00      	nop
   b6a18:	000b8854 	.word	0x000b8854

000b6a1c <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b6a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6a20:	b088      	sub	sp, #32
    unsigned clock = 0;
   b6a22:	2300      	movs	r3, #0
{
   b6a24:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b6a26:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b6a28:	9302      	str	r3, [sp, #8]
{
   b6a2a:	460e      	mov	r6, r1
   b6a2c:	4617      	mov	r7, r2
    if (!lock())
   b6a2e:	f7ff ff96 	bl	b695e <_ZN8SPIClass4lockEv.isra.0>
   b6a32:	4605      	mov	r5, r0
   b6a34:	bb00      	cbnz	r0, b6a78 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b6a36:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b6a3a:	4601      	mov	r1, r0
   b6a3c:	2214      	movs	r2, #20
   b6a3e:	a803      	add	r0, sp, #12
   b6a40:	f001 f894 	bl	b7b6c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6a44:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6a46:	462a      	mov	r2, r5
   b6a48:	a903      	add	r1, sp, #12
   b6a4a:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b6a4c:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b6a50:	f7ff fb0c 	bl	b606c <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b6a54:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b6a56:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b6a5a:	ab02      	add	r3, sp, #8
   b6a5c:	f10d 0207 	add.w	r2, sp, #7
   b6a60:	fb07 f106 	mul.w	r1, r7, r6
   b6a64:	f7ff ffc4 	bl	b69f0 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b6a68:	7820      	ldrb	r0, [r4, #0]
   b6a6a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b6a6e:	f7ff fadd 	bl	b602c <hal_spi_set_clock_divider>
        unlock();
   b6a72:	7820      	ldrb	r0, [r4, #0]
   b6a74:	f7ff ff70 	bl	b6958 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b6a78:	9802      	ldr	r0, [sp, #8]
   b6a7a:	b008      	add	sp, #32
   b6a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6a80 <_ZN8SPIClass15setClockDividerEh>:
{
   b6a80:	b538      	push	{r3, r4, r5, lr}
   b6a82:	4604      	mov	r4, r0
    if (!lock())
   b6a84:	7800      	ldrb	r0, [r0, #0]
{
   b6a86:	460d      	mov	r5, r1
    if (!lock())
   b6a88:	f7ff ff69 	bl	b695e <_ZN8SPIClass4lockEv.isra.0>
   b6a8c:	4603      	mov	r3, r0
   b6a8e:	b9d0      	cbnz	r0, b6ac6 <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b6a90:	6861      	ldr	r1, [r4, #4]
   b6a92:	b199      	cbz	r1, b6abc <_ZN8SPIClass15setClockDividerEh+0x3c>
   b6a94:	4a0c      	ldr	r2, [pc, #48]	; (b6ac8 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b6a96:	f812 0b01 	ldrb.w	r0, [r2], #1
   b6a9a:	4285      	cmp	r5, r0
   b6a9c:	d002      	beq.n	b6aa4 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b6a9e:	3301      	adds	r3, #1
   b6aa0:	2b08      	cmp	r3, #8
   b6aa2:	d1f8      	bne.n	b6a96 <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b6aa4:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b6aa6:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b6aa8:	2201      	movs	r2, #1
   b6aaa:	40d9      	lsrs	r1, r3
   b6aac:	4620      	mov	r0, r4
   b6aae:	f7ff ffb5 	bl	b6a1c <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b6ab2:	7820      	ldrb	r0, [r4, #0]
}
   b6ab4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b6ab8:	f7ff bf4e 	b.w	b6958 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b6abc:	7820      	ldrb	r0, [r4, #0]
   b6abe:	4629      	mov	r1, r5
   b6ac0:	f7ff fab4 	bl	b602c <hal_spi_set_clock_divider>
   b6ac4:	e7f5      	b.n	b6ab2 <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b6ac6:	bd38      	pop	{r3, r4, r5, pc}
   b6ac8:	000b8854 	.word	0x000b8854

000b6acc <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b6acc:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b6ace:	7800      	ldrb	r0, [r0, #0]
   b6ad0:	f7ff fab4 	bl	b603c <hal_spi_transfer>
}
   b6ad4:	b2c0      	uxtb	r0, r0
   b6ad6:	bd08      	pop	{r3, pc}

000b6ad8 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b6ad8:	b510      	push	{r4, lr}
   b6ada:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6adc:	f7ff f98e 	bl	b5dfc <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b6ae0:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b6ae2:	6823      	ldr	r3, [r4, #0]
   b6ae4:	4620      	mov	r0, r4
   b6ae6:	695b      	ldr	r3, [r3, #20]
   b6ae8:	4798      	blx	r3
    if (c >= 0) return c;
   b6aea:	2800      	cmp	r0, #0
   b6aec:	da08      	bge.n	b6b00 <_ZN6Stream9timedReadEv+0x28>
   b6aee:	f7ff f985 	bl	b5dfc <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b6af2:	68e3      	ldr	r3, [r4, #12]
   b6af4:	1ac0      	subs	r0, r0, r3
   b6af6:	68a3      	ldr	r3, [r4, #8]
   b6af8:	4298      	cmp	r0, r3
   b6afa:	d3f2      	bcc.n	b6ae2 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b6afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b6b00:	bd10      	pop	{r4, pc}
	...

000b6b04 <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
   b6b04:	b538      	push	{r3, r4, r5, lr}
   b6b06:	460d      	mov	r5, r1
  String ret;
   b6b08:	4907      	ldr	r1, [pc, #28]	; (b6b28 <_ZN6Stream10readStringEv+0x24>)
{
   b6b0a:	4604      	mov	r4, r0
  String ret;
   b6b0c:	f000 f859 	bl	b6bc2 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b6b10:	4628      	mov	r0, r5
   b6b12:	f7ff ffe1 	bl	b6ad8 <_ZN6Stream9timedReadEv>
  while (c >= 0)
   b6b16:	2800      	cmp	r0, #0
   b6b18:	db04      	blt.n	b6b24 <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b6b1a:	b2c1      	uxtb	r1, r0
   b6b1c:	4620      	mov	r0, r4
   b6b1e:	f000 f8cb 	bl	b6cb8 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b6b22:	e7f5      	b.n	b6b10 <_ZN6Stream10readStringEv+0xc>
  }
  return ret;
}
   b6b24:	4620      	mov	r0, r4
   b6b26:	bd38      	pop	{r3, r4, r5, pc}
   b6b28:	000b8118 	.word	0x000b8118

000b6b2c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6b2c:	b510      	push	{r4, lr}
   b6b2e:	4604      	mov	r4, r0
{
	free(buffer);
   b6b30:	6800      	ldr	r0, [r0, #0]
   b6b32:	f7ff fbd7 	bl	b62e4 <free>
}
   b6b36:	4620      	mov	r0, r4
   b6b38:	bd10      	pop	{r4, pc}

000b6b3a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6b3a:	b510      	push	{r4, lr}
   b6b3c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6b3e:	6800      	ldr	r0, [r0, #0]
   b6b40:	b108      	cbz	r0, b6b46 <_ZN6String10invalidateEv+0xc>
   b6b42:	f7ff fbcf 	bl	b62e4 <free>
	buffer = NULL;
   b6b46:	2300      	movs	r3, #0
	capacity = len = 0;
   b6b48:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6b4c:	6023      	str	r3, [r4, #0]
}
   b6b4e:	bd10      	pop	{r4, pc}

000b6b50 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6b50:	b538      	push	{r3, r4, r5, lr}
   b6b52:	4604      	mov	r4, r0
   b6b54:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6b56:	6800      	ldr	r0, [r0, #0]
   b6b58:	3101      	adds	r1, #1
   b6b5a:	f7ff fbcb 	bl	b62f4 <realloc>
	if (newbuffer) {
   b6b5e:	b110      	cbz	r0, b6b66 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6b60:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6b64:	2001      	movs	r0, #1
	}
	return 0;
}
   b6b66:	bd38      	pop	{r3, r4, r5, pc}

000b6b68 <_ZN6String7reserveEj>:
{
   b6b68:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6b6a:	6803      	ldr	r3, [r0, #0]
{
   b6b6c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6b6e:	b123      	cbz	r3, b6b7a <_ZN6String7reserveEj+0x12>
   b6b70:	6843      	ldr	r3, [r0, #4]
   b6b72:	428b      	cmp	r3, r1
   b6b74:	d301      	bcc.n	b6b7a <_ZN6String7reserveEj+0x12>
   b6b76:	2001      	movs	r0, #1
}
   b6b78:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b6b7a:	4620      	mov	r0, r4
   b6b7c:	f7ff ffe8 	bl	b6b50 <_ZN6String12changeBufferEj>
   b6b80:	2800      	cmp	r0, #0
   b6b82:	d0f9      	beq.n	b6b78 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6b84:	68a3      	ldr	r3, [r4, #8]
   b6b86:	2b00      	cmp	r3, #0
   b6b88:	d1f5      	bne.n	b6b76 <_ZN6String7reserveEj+0xe>
   b6b8a:	6822      	ldr	r2, [r4, #0]
   b6b8c:	7013      	strb	r3, [r2, #0]
   b6b8e:	e7f2      	b.n	b6b76 <_ZN6String7reserveEj+0xe>

000b6b90 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6b90:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6b92:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6b94:	4611      	mov	r1, r2
   b6b96:	9201      	str	r2, [sp, #4]
{
   b6b98:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6b9a:	f7ff ffe5 	bl	b6b68 <_ZN6String7reserveEj>
   b6b9e:	9a01      	ldr	r2, [sp, #4]
   b6ba0:	b928      	cbnz	r0, b6bae <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6ba2:	4620      	mov	r0, r4
   b6ba4:	f7ff ffc9 	bl	b6b3a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6ba8:	4620      	mov	r0, r4
   b6baa:	b003      	add	sp, #12
   b6bac:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6bae:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6bb0:	4629      	mov	r1, r5
   b6bb2:	6820      	ldr	r0, [r4, #0]
   b6bb4:	f000 ffcc 	bl	b7b50 <memcpy>
	buffer[len] = 0;
   b6bb8:	6822      	ldr	r2, [r4, #0]
   b6bba:	68a3      	ldr	r3, [r4, #8]
   b6bbc:	2100      	movs	r1, #0
   b6bbe:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6bc0:	e7f2      	b.n	b6ba8 <_ZN6String4copyEPKcj+0x18>

000b6bc2 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b6bc2:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6bc4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b6bc6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6bca:	4604      	mov	r4, r0
	len = 0;
   b6bcc:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6bce:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6bd0:	b141      	cbz	r1, b6be4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b6bd2:	4608      	mov	r0, r1
   b6bd4:	9101      	str	r1, [sp, #4]
   b6bd6:	f001 f811 	bl	b7bfc <strlen>
   b6bda:	9901      	ldr	r1, [sp, #4]
   b6bdc:	4602      	mov	r2, r0
   b6bde:	4620      	mov	r0, r4
   b6be0:	f7ff ffd6 	bl	b6b90 <_ZN6String4copyEPKcj>
}
   b6be4:	4620      	mov	r0, r4
   b6be6:	b002      	add	sp, #8
   b6be8:	bd10      	pop	{r4, pc}

000b6bea <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b6bea:	4288      	cmp	r0, r1
{
   b6bec:	b510      	push	{r4, lr}
   b6bee:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b6bf0:	d005      	beq.n	b6bfe <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b6bf2:	680b      	ldr	r3, [r1, #0]
   b6bf4:	b12b      	cbz	r3, b6c02 <_ZN6StringaSERKS_+0x18>
   b6bf6:	688a      	ldr	r2, [r1, #8]
   b6bf8:	4619      	mov	r1, r3
   b6bfa:	f7ff ffc9 	bl	b6b90 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6bfe:	4620      	mov	r0, r4
   b6c00:	bd10      	pop	{r4, pc}
	else invalidate();
   b6c02:	f7ff ff9a 	bl	b6b3a <_ZN6String10invalidateEv>
   b6c06:	e7fa      	b.n	b6bfe <_ZN6StringaSERKS_+0x14>

000b6c08 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b6c08:	b510      	push	{r4, lr}
	buffer = NULL;
   b6c0a:	2300      	movs	r3, #0
String::String(const String &value)
   b6c0c:	4604      	mov	r4, r0
	capacity = 0;
   b6c0e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b6c12:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6c14:	7303      	strb	r3, [r0, #12]
	*this = value;
   b6c16:	f7ff ffe8 	bl	b6bea <_ZN6StringaSERKS_>
}
   b6c1a:	4620      	mov	r0, r4
   b6c1c:	bd10      	pop	{r4, pc}

000b6c1e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b6c1e:	b513      	push	{r0, r1, r4, lr}
   b6c20:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b6c22:	b159      	cbz	r1, b6c3c <_ZN6StringaSEPKc+0x1e>
   b6c24:	4608      	mov	r0, r1
   b6c26:	9101      	str	r1, [sp, #4]
   b6c28:	f000 ffe8 	bl	b7bfc <strlen>
   b6c2c:	9901      	ldr	r1, [sp, #4]
   b6c2e:	4602      	mov	r2, r0
   b6c30:	4620      	mov	r0, r4
   b6c32:	f7ff ffad 	bl	b6b90 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6c36:	4620      	mov	r0, r4
   b6c38:	b002      	add	sp, #8
   b6c3a:	bd10      	pop	{r4, pc}
	else invalidate();
   b6c3c:	f7ff ff7d 	bl	b6b3a <_ZN6String10invalidateEv>
   b6c40:	e7f9      	b.n	b6c36 <_ZN6StringaSEPKc+0x18>

000b6c42 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b6c42:	b510      	push	{r4, lr}
   b6c44:	4604      	mov	r4, r0
   b6c46:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b6c48:	2300      	movs	r3, #0
	capacity = 0;
   b6c4a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b6c4e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b6c50:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b6c52:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b6c54:	a901      	add	r1, sp, #4
   b6c56:	f000 fc8f 	bl	b7578 <itoa>
	*this = buf;
   b6c5a:	a901      	add	r1, sp, #4
   b6c5c:	4620      	mov	r0, r4
   b6c5e:	f7ff ffde 	bl	b6c1e <_ZN6StringaSEPKc>
}
   b6c62:	4620      	mov	r0, r4
   b6c64:	b00a      	add	sp, #40	; 0x28
   b6c66:	bd10      	pop	{r4, pc}

000b6c68 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b6c68:	b570      	push	{r4, r5, r6, lr}
   b6c6a:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b6c6c:	460e      	mov	r6, r1
   b6c6e:	b909      	cbnz	r1, b6c74 <_ZN6String6concatEPKcj+0xc>
   b6c70:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b6c72:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b6c74:	b16a      	cbz	r2, b6c92 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b6c76:	6884      	ldr	r4, [r0, #8]
   b6c78:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b6c7a:	4621      	mov	r1, r4
   b6c7c:	f7ff ff74 	bl	b6b68 <_ZN6String7reserveEj>
   b6c80:	2800      	cmp	r0, #0
   b6c82:	d0f5      	beq.n	b6c70 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b6c84:	6828      	ldr	r0, [r5, #0]
   b6c86:	68ab      	ldr	r3, [r5, #8]
   b6c88:	4631      	mov	r1, r6
   b6c8a:	4418      	add	r0, r3
   b6c8c:	f000 ffae 	bl	b7bec <strcpy>
	len = newlen;
   b6c90:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b6c92:	2001      	movs	r0, #1
   b6c94:	e7ed      	b.n	b6c72 <_ZN6String6concatEPKcj+0xa>

000b6c96 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   b6c96:	b513      	push	{r0, r1, r4, lr}
   b6c98:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   b6c9a:	4608      	mov	r0, r1
	if (!cstr) return 0;
   b6c9c:	b151      	cbz	r1, b6cb4 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   b6c9e:	9101      	str	r1, [sp, #4]
   b6ca0:	f000 ffac 	bl	b7bfc <strlen>
   b6ca4:	9901      	ldr	r1, [sp, #4]
   b6ca6:	4602      	mov	r2, r0
   b6ca8:	4620      	mov	r0, r4
}
   b6caa:	b002      	add	sp, #8
   b6cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   b6cb0:	f7ff bfda 	b.w	b6c68 <_ZN6String6concatEPKcj>
}
   b6cb4:	b002      	add	sp, #8
   b6cb6:	bd10      	pop	{r4, pc}

000b6cb8 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b6cb8:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b6cba:	2300      	movs	r3, #0
	buf[0] = c;
   b6cbc:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b6cc0:	2201      	movs	r2, #1
   b6cc2:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b6cc4:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b6cc8:	f7ff ffce 	bl	b6c68 <_ZN6String6concatEPKcj>
}
   b6ccc:	b003      	add	sp, #12
   b6cce:	f85d fb04 	ldr.w	pc, [sp], #4

000b6cd2 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b6cd2:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b6cd4:	688a      	ldr	r2, [r1, #8]
   b6cd6:	6809      	ldr	r1, [r1, #0]
{
   b6cd8:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b6cda:	f7ff ffc5 	bl	b6c68 <_ZN6String6concatEPKcj>
   b6cde:	b910      	cbnz	r0, b6ce6 <_ZplRK15StringSumHelperRK6String+0x14>
   b6ce0:	4620      	mov	r0, r4
   b6ce2:	f7ff ff2a 	bl	b6b3a <_ZN6String10invalidateEv>
	return a;
}
   b6ce6:	4620      	mov	r0, r4
   b6ce8:	bd10      	pop	{r4, pc}

000b6cea <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b6cea:	b513      	push	{r0, r1, r4, lr}
   b6cec:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b6cee:	b929      	cbnz	r1, b6cfc <_ZplRK15StringSumHelperPKc+0x12>
   b6cf0:	4620      	mov	r0, r4
   b6cf2:	f7ff ff22 	bl	b6b3a <_ZN6String10invalidateEv>
	return a;
}
   b6cf6:	4620      	mov	r0, r4
   b6cf8:	b002      	add	sp, #8
   b6cfa:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b6cfc:	4608      	mov	r0, r1
   b6cfe:	9101      	str	r1, [sp, #4]
   b6d00:	f000 ff7c 	bl	b7bfc <strlen>
   b6d04:	9901      	ldr	r1, [sp, #4]
   b6d06:	4602      	mov	r2, r0
   b6d08:	4620      	mov	r0, r4
   b6d0a:	f7ff ffad 	bl	b6c68 <_ZN6String6concatEPKcj>
   b6d0e:	2800      	cmp	r0, #0
   b6d10:	d0ee      	beq.n	b6cf0 <_ZplRK15StringSumHelperPKc+0x6>
   b6d12:	e7f0      	b.n	b6cf6 <_ZplRK15StringSumHelperPKc+0xc>

000b6d14 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6d14:	4b05      	ldr	r3, [pc, #20]	; (b6d2c <_GLOBAL__sub_I_System+0x18>)
   b6d16:	2202      	movs	r2, #2
   b6d18:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6d1a:	4b05      	ldr	r3, [pc, #20]	; (b6d30 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6d1c:	4a05      	ldr	r2, [pc, #20]	; (b6d34 <_GLOBAL__sub_I_System+0x20>)
   b6d1e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6d20:	2000      	movs	r0, #0
   b6d22:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6d26:	f7ff ba41 	b.w	b61ac <set_system_mode>
   b6d2a:	bf00      	nop
   b6d2c:	2003e6f8 	.word	0x2003e6f8
   b6d30:	2003e6ec 	.word	0x2003e6ec
   b6d34:	ffff0000 	.word	0xffff0000

000b6d38 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b6d38:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6d3a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b6d3c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6d40:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6d42:	2201      	movs	r2, #1
   b6d44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6d48:	f10d 0107 	add.w	r1, sp, #7
   b6d4c:	47a0      	blx	r4
}
   b6d4e:	b002      	add	sp, #8
   b6d50:	bd10      	pop	{r4, pc}

000b6d52 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b6d52:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6d54:	6803      	ldr	r3, [r0, #0]
   b6d56:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6d58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6d5c:	46a4      	mov	ip, r4
}
   b6d5e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6d62:	4760      	bx	ip

000b6d64 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6d64:	b513      	push	{r0, r1, r4, lr}
   b6d66:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b6d68:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6d6a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b6d6e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b6d70:	f10d 0107 	add.w	r1, sp, #7
   b6d74:	2201      	movs	r2, #1
   b6d76:	47a0      	blx	r4
}
   b6d78:	b002      	add	sp, #8
   b6d7a:	bd10      	pop	{r4, pc}

000b6d7c <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b6d7c:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6d7e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6d80:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6d84:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6d88:	429a      	cmp	r2, r3
int TCPClient::read() {
   b6d8a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6d8c:	d008      	beq.n	b6da0 <_ZN9TCPClient4readEv+0x24>
   b6d8e:	6963      	ldr	r3, [r4, #20]
   b6d90:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6d94:	1c51      	adds	r1, r2, #1
   b6d96:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b6d9a:	4413      	add	r3, r2
   b6d9c:	7918      	ldrb	r0, [r3, #4]
}
   b6d9e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6da0:	6803      	ldr	r3, [r0, #0]
   b6da2:	691b      	ldr	r3, [r3, #16]
   b6da4:	4798      	blx	r3
   b6da6:	2800      	cmp	r0, #0
   b6da8:	d1f1      	bne.n	b6d8e <_ZN9TCPClient4readEv+0x12>
   b6daa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6dae:	e7f6      	b.n	b6d9e <_ZN9TCPClient4readEv+0x22>

000b6db0 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b6db0:	4770      	bx	lr

000b6db2 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b6db2:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b6db4:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b6db6:	43c0      	mvns	r0, r0
   b6db8:	0fc0      	lsrs	r0, r0, #31
   b6dba:	4770      	bx	lr

000b6dbc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6dbc:	4770      	bx	lr
	...

000b6dc0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6dc0:	4b06      	ldr	r3, [pc, #24]	; (b6ddc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6dc2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6dc4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6dc6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6dca:	d005      	beq.n	b6dd8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6dcc:	4608      	mov	r0, r1
   b6dce:	f000 fda7 	bl	b7920 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6dd2:	2800      	cmp	r0, #0
   b6dd4:	bf08      	it	eq
   b6dd6:	2400      	moveq	r4, #0
      }
   b6dd8:	4620      	mov	r0, r4
   b6dda:	bd10      	pop	{r4, pc}
   b6ddc:	000b8794 	.word	0x000b8794

000b6de0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6de0:	b510      	push	{r4, lr}
   b6de2:	21ac      	movs	r1, #172	; 0xac
   b6de4:	4604      	mov	r4, r0
   b6de6:	f7fd f958 	bl	b409a <_ZdlPvj>
   b6dea:	4620      	mov	r0, r4
   b6dec:	bd10      	pop	{r4, pc}

000b6dee <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6dee:	21ac      	movs	r1, #172	; 0xac
   b6df0:	f7fd b953 	b.w	b409a <_ZdlPvj>

000b6df4 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b6df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b6df8:	f04f 0800 	mov.w	r8, #0
   b6dfc:	b086      	sub	sp, #24
   b6dfe:	461c      	mov	r4, r3
   b6e00:	f8c0 8004 	str.w	r8, [r0, #4]
   b6e04:	4605      	mov	r5, r0
   b6e06:	460e      	mov	r6, r1
   b6e08:	4617      	mov	r7, r2
    struct timeval tv = {};
   b6e0a:	4641      	mov	r1, r8
   b6e0c:	2210      	movs	r2, #16
   b6e0e:	a802      	add	r0, sp, #8
   b6e10:	f000 feac 	bl	b7b6c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b6e14:	1c63      	adds	r3, r4, #1
   b6e16:	d009      	beq.n	b6e2c <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b6e18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6e1c:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b6e20:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b6e24:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b6e28:	435c      	muls	r4, r3
   b6e2a:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b6e2c:	6968      	ldr	r0, [r5, #20]
   b6e2e:	2310      	movs	r3, #16
   b6e30:	9300      	str	r3, [sp, #0]
   b6e32:	6800      	ldr	r0, [r0, #0]
   b6e34:	ab02      	add	r3, sp, #8
   b6e36:	f241 0205 	movw	r2, #4101	; 0x1005
   b6e3a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6e3e:	f7ff f8ad 	bl	b5f9c <sock_setsockopt>
    if (ret < 0) {
   b6e42:	2800      	cmp	r0, #0
   b6e44:	da07      	bge.n	b6e56 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b6e46:	f7ff fa6d 	bl	b6324 <__errno>
   b6e4a:	6803      	ldr	r3, [r0, #0]
   b6e4c:	606b      	str	r3, [r5, #4]
        return 0;
   b6e4e:	2000      	movs	r0, #0
}
   b6e50:	b006      	add	sp, #24
   b6e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b6e56:	6968      	ldr	r0, [r5, #20]
   b6e58:	2300      	movs	r3, #0
   b6e5a:	6800      	ldr	r0, [r0, #0]
   b6e5c:	463a      	mov	r2, r7
   b6e5e:	4631      	mov	r1, r6
   b6e60:	f7ff f8bc 	bl	b5fdc <sock_send>
    if (ret < 0) {
   b6e64:	1e03      	subs	r3, r0, #0
   b6e66:	dbee      	blt.n	b6e46 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b6e68:	4618      	mov	r0, r3
   b6e6a:	e7f1      	b.n	b6e50 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b6e6c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b6e6c:	b530      	push	{r4, r5, lr}
   b6e6e:	b087      	sub	sp, #28
   b6e70:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b6e72:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b6e74:	4668      	mov	r0, sp
   b6e76:	f7ff fc0b 	bl	b6690 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6e7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6e7c:	3404      	adds	r4, #4
   b6e7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6e80:	682b      	ldr	r3, [r5, #0]
   b6e82:	7023      	strb	r3, [r4, #0]
    }
   b6e84:	b007      	add	sp, #28
   b6e86:	bd30      	pop	{r4, r5, pc}

000b6e88 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b6e88:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b6e8a:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b6e8c:	4b05      	ldr	r3, [pc, #20]	; (b6ea4 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b6e8e:	4604      	mov	r4, r0
   b6e90:	358c      	adds	r5, #140	; 0x8c
   b6e92:	f844 3b04 	str.w	r3, [r4], #4
   b6e96:	4606      	mov	r6, r0
   b6e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6e9c:	682b      	ldr	r3, [r5, #0]
   b6e9e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b6ea0:	4630      	mov	r0, r6
   b6ea2:	bd70      	pop	{r4, r5, r6, pc}
   b6ea4:	000b8808 	.word	0x000b8808

000b6ea8 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6ea8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6eac:	4698      	mov	r8, r3
    stop();
   b6eae:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6eb0:	b093      	sub	sp, #76	; 0x4c
   b6eb2:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b6eb4:	2400      	movs	r4, #0
    stop();
   b6eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6eb8:	4606      	mov	r6, r0
   b6eba:	4617      	mov	r7, r2
    stop();
   b6ebc:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6ebe:	4628      	mov	r0, r5
   b6ec0:	466b      	mov	r3, sp
   b6ec2:	4622      	mov	r2, r4
   b6ec4:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b6ec6:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6ec8:	f7ff f860 	bl	b5f8c <netdb_getaddrinfo>
   b6ecc:	4605      	mov	r5, r0
   b6ece:	2800      	cmp	r0, #0
   b6ed0:	d163      	bne.n	b6f9a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b6ed2:	9b00      	ldr	r3, [sp, #0]
   b6ed4:	2b00      	cmp	r3, #0
   b6ed6:	d04b      	beq.n	b6f70 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6ed8:	695b      	ldr	r3, [r3, #20]
   b6eda:	2b00      	cmp	r3, #0
   b6edc:	d048      	beq.n	b6f70 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b6ede:	a806      	add	r0, sp, #24
   b6ee0:	f7ff fb92 	bl	b6608 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b6ee4:	9b00      	ldr	r3, [sp, #0]
   b6ee6:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b6ee8:	7863      	ldrb	r3, [r4, #1]
   b6eea:	2b02      	cmp	r3, #2
   b6eec:	d104      	bne.n	b6ef8 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b6eee:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b6ef0:	a806      	add	r0, sp, #24
   b6ef2:	f7ff ffbb 	bl	b6e6c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b6ef6:	e026      	b.n	b6f46 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b6ef8:	2b0a      	cmp	r3, #10
   b6efa:	d124      	bne.n	b6f46 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b6efc:	2211      	movs	r2, #17
   b6efe:	4629      	mov	r1, r5
   b6f00:	a801      	add	r0, sp, #4
   b6f02:	f000 fe33 	bl	b7b6c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6f06:	68a3      	ldr	r3, [r4, #8]
   b6f08:	2b00      	cmp	r3, #0
   b6f0a:	d038      	beq.n	b6f7e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6f0c:	f104 0308 	add.w	r3, r4, #8
   b6f10:	f10d 0c04 	add.w	ip, sp, #4
   b6f14:	3418      	adds	r4, #24
   b6f16:	6818      	ldr	r0, [r3, #0]
   b6f18:	6859      	ldr	r1, [r3, #4]
   b6f1a:	4662      	mov	r2, ip
   b6f1c:	c203      	stmia	r2!, {r0, r1}
   b6f1e:	3308      	adds	r3, #8
   b6f20:	42a3      	cmp	r3, r4
   b6f22:	4694      	mov	ip, r2
   b6f24:	d1f7      	bne.n	b6f16 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b6f26:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b6f28:	a901      	add	r1, sp, #4
   b6f2a:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b6f2c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b6f30:	f7ff fb78 	bl	b6624 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6f34:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b6f38:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6f3c:	ac07      	add	r4, sp, #28
   b6f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6f40:	f8dc 3000 	ldr.w	r3, [ip]
   b6f44:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b6f46:	a806      	add	r0, sp, #24
   b6f48:	f7ff fb7e 	bl	b6648 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b6f4c:	b180      	cbz	r0, b6f70 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b6f4e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b6f50:	ad07      	add	r5, sp, #28
   b6f52:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b6f56:	4b12      	ldr	r3, [pc, #72]	; (b6fa0 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b6f58:	930c      	str	r3, [sp, #48]	; 0x30
   b6f5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6f5c:	ac0d      	add	r4, sp, #52	; 0x34
   b6f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6f60:	682b      	ldr	r3, [r5, #0]
   b6f62:	7023      	strb	r3, [r4, #0]
   b6f64:	463a      	mov	r2, r7
   b6f66:	4643      	mov	r3, r8
   b6f68:	a90c      	add	r1, sp, #48	; 0x30
   b6f6a:	4630      	mov	r0, r6
   b6f6c:	47c8      	blx	r9
   b6f6e:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b6f70:	9800      	ldr	r0, [sp, #0]
   b6f72:	f7ff f803 	bl	b5f7c <netdb_freeaddrinfo>
}
   b6f76:	4628      	mov	r0, r5
   b6f78:	b013      	add	sp, #76	; 0x4c
   b6f7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6f7e:	68e3      	ldr	r3, [r4, #12]
   b6f80:	2b00      	cmp	r3, #0
   b6f82:	d1c3      	bne.n	b6f0c <_ZN9TCPClient7connectEPKctm+0x64>
   b6f84:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b6f88:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b6f8c:	f7fe ffe6 	bl	b5f5c <inet_htonl>
   b6f90:	4581      	cmp	r9, r0
   b6f92:	d1bb      	bne.n	b6f0c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b6f94:	f104 0114 	add.w	r1, r4, #20
   b6f98:	e7aa      	b.n	b6ef0 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6f9a:	4625      	mov	r5, r4
   b6f9c:	e7e8      	b.n	b6f70 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6f9e:	bf00      	nop
   b6fa0:	000b8808 	.word	0x000b8808

000b6fa4 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b6fa4:	b538      	push	{r3, r4, r5, lr}
   b6fa6:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b6fa8:	681a      	ldr	r2, [r3, #0]
   b6faa:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b6fac:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b6fae:	da10      	bge.n	b6fd2 <_ZN9TCPClient9connectedEv+0x2e>
   b6fb0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6fb4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6fb8:	429a      	cmp	r2, r3
   b6fba:	d10a      	bne.n	b6fd2 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b6fbc:	6803      	ldr	r3, [r0, #0]
   b6fbe:	691b      	ldr	r3, [r3, #16]
   b6fc0:	4798      	blx	r3
        if (!rv) {
   b6fc2:	4604      	mov	r4, r0
   b6fc4:	b928      	cbnz	r0, b6fd2 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b6fc6:	682b      	ldr	r3, [r5, #0]
   b6fc8:	4628      	mov	r0, r5
   b6fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6fcc:	4798      	blx	r3
        rv = available();
   b6fce:	4620      	mov	r0, r4
}
   b6fd0:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b6fd2:	2001      	movs	r0, #1
   b6fd4:	e7fc      	b.n	b6fd0 <_ZN9TCPClient9connectedEv+0x2c>

000b6fd6 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b6fd6:	b510      	push	{r4, lr}
   b6fd8:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6fda:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6fde:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6fe2:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b6fe4:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6fe6:	d005      	beq.n	b6ff4 <_ZN9TCPClient4peekEv+0x1e>
   b6fe8:	6963      	ldr	r3, [r4, #20]
   b6fea:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6fee:	4413      	add	r3, r2
   b6ff0:	7918      	ldrb	r0, [r3, #4]
}
   b6ff2:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6ff4:	6803      	ldr	r3, [r0, #0]
   b6ff6:	691b      	ldr	r3, [r3, #16]
   b6ff8:	4798      	blx	r3
   b6ffa:	2800      	cmp	r0, #0
   b6ffc:	d1f4      	bne.n	b6fe8 <_ZN9TCPClient4peekEv+0x12>
   b6ffe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7002:	e7f6      	b.n	b6ff2 <_ZN9TCPClient4peekEv+0x1c>

000b7004 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7006:	6943      	ldr	r3, [r0, #20]
   b7008:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b700a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b700e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7012:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7014:	4605      	mov	r5, r0
   b7016:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b7018:	d016      	beq.n	b7048 <_ZN9TCPClient4readEPhj+0x44>
   b701a:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b701c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b7020:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b7024:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b7026:	42bc      	cmp	r4, r7
   b7028:	bf28      	it	cs
   b702a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b702c:	3304      	adds	r3, #4
   b702e:	4622      	mov	r2, r4
   b7030:	4419      	add	r1, r3
   b7032:	4630      	mov	r0, r6
   b7034:	f000 fd8c 	bl	b7b50 <memcpy>
   b7038:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b703a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b703e:	4423      	add	r3, r4
   b7040:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b7044:	4620      	mov	r0, r4
   b7046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b7048:	6803      	ldr	r3, [r0, #0]
   b704a:	691b      	ldr	r3, [r3, #16]
   b704c:	4798      	blx	r3
   b704e:	2800      	cmp	r0, #0
   b7050:	d1e3      	bne.n	b701a <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b7052:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b7056:	e7f5      	b.n	b7044 <_ZN9TCPClient4readEPhj+0x40>

000b7058 <_ZN9TCPClient12flush_bufferEv>:
   b7058:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b705a:	2300      	movs	r3, #0
   b705c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b7060:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b7062:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b7066:	4770      	bx	lr

000b7068 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b706c:	461f      	mov	r7, r3
    stop();
   b706e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7070:	460c      	mov	r4, r1
    stop();
   b7072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7074:	b08a      	sub	sp, #40	; 0x28
   b7076:	4605      	mov	r5, r0
   b7078:	4616      	mov	r6, r2
    stop();
   b707a:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b707c:	7d23      	ldrb	r3, [r4, #20]
   b707e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b7082:	2b04      	cmp	r3, #4
   b7084:	bf0c      	ite	eq
   b7086:	2002      	moveq	r0, #2
   b7088:	200a      	movne	r0, #10
   b708a:	2206      	movs	r2, #6
   b708c:	2101      	movs	r1, #1
   b708e:	f7fe ffad 	bl	b5fec <sock_socket>
   b7092:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b7096:	696b      	ldr	r3, [r5, #20]
   b7098:	681b      	ldr	r3, [r3, #0]
   b709a:	2b00      	cmp	r3, #0
   b709c:	da08      	bge.n	b70b0 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b709e:	682b      	ldr	r3, [r5, #0]
   b70a0:	4628      	mov	r0, r5
   b70a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b70a4:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b70a6:	4798      	blx	r3
}
   b70a8:	4620      	mov	r0, r4
   b70aa:	b00a      	add	sp, #40	; 0x28
   b70ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b70b0:	4628      	mov	r0, r5
   b70b2:	f7ff ffd1 	bl	b7058 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b70b6:	b1b7      	cbz	r7, b70e6 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b70b8:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b70ba:	a903      	add	r1, sp, #12
   b70bc:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b70be:	9303      	str	r3, [sp, #12]
   b70c0:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b70c4:	f7fe ff3a 	bl	b5f3c <if_index_to_name>
   b70c8:	2800      	cmp	r0, #0
   b70ca:	d1e8      	bne.n	b709e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b70cc:	6968      	ldr	r0, [r5, #20]
   b70ce:	2306      	movs	r3, #6
   b70d0:	9300      	str	r3, [sp, #0]
   b70d2:	6800      	ldr	r0, [r0, #0]
   b70d4:	ab03      	add	r3, sp, #12
   b70d6:	f241 020b 	movw	r2, #4107	; 0x100b
   b70da:	f640 71ff 	movw	r1, #4095	; 0xfff
   b70de:	f7fe ff5d 	bl	b5f9c <sock_setsockopt>
   b70e2:	2800      	cmp	r0, #0
   b70e4:	d1db      	bne.n	b709e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b70e6:	221c      	movs	r2, #28
   b70e8:	2100      	movs	r1, #0
   b70ea:	a803      	add	r0, sp, #12
   b70ec:	f000 fd3e 	bl	b7b6c <memset>
    if (ip.version() == 4) {
   b70f0:	7d23      	ldrb	r3, [r4, #20]
   b70f2:	2b04      	cmp	r3, #4
   b70f4:	d11d      	bne.n	b7132 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b70f6:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b70fa:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b70fc:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b7100:	f7fe ff34 	bl	b5f6c <inet_htons>
   b7104:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b7108:	6860      	ldr	r0, [r4, #4]
   b710a:	f7fe ff27 	bl	b5f5c <inet_htonl>
   b710e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b7110:	696b      	ldr	r3, [r5, #20]
   b7112:	221c      	movs	r2, #28
   b7114:	6818      	ldr	r0, [r3, #0]
   b7116:	a903      	add	r1, sp, #12
   b7118:	f7fe ff50 	bl	b5fbc <sock_connect>
   b711c:	2800      	cmp	r0, #0
   b711e:	d1be      	bne.n	b709e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b7120:	3404      	adds	r4, #4
   b7122:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7124:	696d      	ldr	r5, [r5, #20]
   b7126:	358c      	adds	r5, #140	; 0x8c
   b7128:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b712a:	6823      	ldr	r3, [r4, #0]
   b712c:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b712e:	2401      	movs	r4, #1
   b7130:	e7ba      	b.n	b70a8 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b7132:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b7136:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b7138:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b713c:	f7fe ff16 	bl	b5f6c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7140:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b7142:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7146:	1d23      	adds	r3, r4, #4
   b7148:	f104 0714 	add.w	r7, r4, #20
   b714c:	6818      	ldr	r0, [r3, #0]
   b714e:	6859      	ldr	r1, [r3, #4]
   b7150:	4632      	mov	r2, r6
   b7152:	c203      	stmia	r2!, {r0, r1}
   b7154:	3308      	adds	r3, #8
   b7156:	42bb      	cmp	r3, r7
   b7158:	4616      	mov	r6, r2
   b715a:	d1f7      	bne.n	b714c <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b715c:	e7d8      	b.n	b7110 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b7160 <_ZN9TCPClient9availableEv>:
{
   b7160:	b530      	push	{r4, r5, lr}
   b7162:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b7164:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b7168:	b08b      	sub	sp, #44	; 0x2c
   b716a:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b716c:	b12b      	cbz	r3, b717a <_ZN9TCPClient9availableEv+0x1a>
   b716e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b7172:	429a      	cmp	r2, r3
   b7174:	d101      	bne.n	b717a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b7176:	f7ff ff6f 	bl	b7058 <_ZN9TCPClient12flush_bufferEv>
   b717a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b717c:	6808      	ldr	r0, [r1, #0]
   b717e:	2800      	cmp	r0, #0
   b7180:	db18      	blt.n	b71b4 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b7182:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b7186:	2d7f      	cmp	r5, #127	; 0x7f
   b7188:	d814      	bhi.n	b71b4 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b718a:	3104      	adds	r1, #4
   b718c:	2308      	movs	r3, #8
   b718e:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b7192:	4429      	add	r1, r5
   b7194:	f7fe ff1a 	bl	b5fcc <sock_recv>
            if (ret > 0) {
   b7198:	2800      	cmp	r0, #0
   b719a:	dd13      	ble.n	b71c4 <_ZN9TCPClient9availableEv+0x64>
   b719c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b719e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b71a2:	b90a      	cbnz	r2, b71a8 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b71a4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b71a8:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b71aa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b71ae:	4410      	add	r0, r2
   b71b0:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b71b4:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b71b6:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b71ba:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b71be:	1ac0      	subs	r0, r0, r3
   b71c0:	b00b      	add	sp, #44	; 0x2c
   b71c2:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b71c4:	f7ff f8ae 	bl	b6324 <__errno>
   b71c8:	6803      	ldr	r3, [r0, #0]
   b71ca:	2b0b      	cmp	r3, #11
   b71cc:	d0f2      	beq.n	b71b4 <_ZN9TCPClient9availableEv+0x54>
   b71ce:	f7ff f8a9 	bl	b6324 <__errno>
   b71d2:	6803      	ldr	r3, [r0, #0]
   b71d4:	2b0b      	cmp	r3, #11
   b71d6:	d0ed      	beq.n	b71b4 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b71d8:	2320      	movs	r3, #32
   b71da:	2500      	movs	r5, #0
   b71dc:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b71e0:	f7ff f8a0 	bl	b6324 <__errno>
   b71e4:	6803      	ldr	r3, [r0, #0]
   b71e6:	9301      	str	r3, [sp, #4]
   b71e8:	4b08      	ldr	r3, [pc, #32]	; (b720c <_ZN9TCPClient9availableEv+0xac>)
   b71ea:	4909      	ldr	r1, [pc, #36]	; (b7210 <_ZN9TCPClient9availableEv+0xb0>)
   b71ec:	9300      	str	r3, [sp, #0]
   b71ee:	aa02      	add	r2, sp, #8
   b71f0:	462b      	mov	r3, r5
   b71f2:	2032      	movs	r0, #50	; 0x32
   b71f4:	f7fe ffd2 	bl	b619c <log_message>
                    sock_close(d_->sock);
   b71f8:	6963      	ldr	r3, [r4, #20]
   b71fa:	6818      	ldr	r0, [r3, #0]
   b71fc:	f7fe fed6 	bl	b5fac <sock_close>
   b7200:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b7202:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7206:	601a      	str	r2, [r3, #0]
   b7208:	e7d4      	b.n	b71b4 <_ZN9TCPClient9availableEv+0x54>
   b720a:	bf00      	nop
   b720c:	000b8863 	.word	0x000b8863
   b7210:	000b885c 	.word	0x000b885c

000b7214 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b7214:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b7216:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b7218:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b721a:	6818      	ldr	r0, [r3, #0]
   b721c:	2800      	cmp	r0, #0
   b721e:	db01      	blt.n	b7224 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b7220:	f7fe fec4 	bl	b5fac <sock_close>
   b7224:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b7226:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b722a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b722c:	6960      	ldr	r0, [r4, #20]
   b722e:	2211      	movs	r2, #17
   b7230:	2100      	movs	r1, #0
   b7232:	308c      	adds	r0, #140	; 0x8c
   b7234:	f000 fc9a 	bl	b7b6c <memset>
    flush_buffer();
   b7238:	4620      	mov	r0, r4
}
   b723a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b723e:	f7ff bf0b 	b.w	b7058 <_ZN9TCPClient12flush_bufferEv>

000b7242 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b7242:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b7244:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b7246:	4604      	mov	r4, r0
          total(0) {
   b7248:	6001      	str	r1, [r0, #0]
   b724a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b724e:	3088      	adds	r0, #136	; 0x88
   b7250:	f7ff f9da 	bl	b6608 <_ZN9IPAddressC1Ev>
}
   b7254:	4620      	mov	r0, r4
   b7256:	bd10      	pop	{r4, pc}

000b7258 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b7258:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b725a:	2300      	movs	r3, #0
   b725c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7260:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b7264:	4a0e      	ldr	r2, [pc, #56]	; (b72a0 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b7266:	6103      	str	r3, [r0, #16]
   b7268:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b726a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b726c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b726e:	20ac      	movs	r0, #172	; 0xac
   b7270:	9101      	str	r1, [sp, #4]
   b7272:	f7fc ff0e 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b7276:	1e05      	subs	r5, r0, #0
   b7278:	f105 060c 	add.w	r6, r5, #12
   b727c:	d008      	beq.n	b7290 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b727e:	2301      	movs	r3, #1
   b7280:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b7284:	4b07      	ldr	r3, [pc, #28]	; (b72a4 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7286:	9901      	ldr	r1, [sp, #4]
   b7288:	602b      	str	r3, [r5, #0]
   b728a:	4630      	mov	r0, r6
   b728c:	f7ff ffd9 	bl	b7242 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b7290:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b7292:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b7296:	f7ff fedf 	bl	b7058 <_ZN9TCPClient12flush_bufferEv>
}
   b729a:	b002      	add	sp, #8
   b729c:	bd70      	pop	{r4, r5, r6, pc}
   b729e:	bf00      	nop
   b72a0:	000b8898 	.word	0x000b8898
   b72a4:	000b887c 	.word	0x000b887c

000b72a8 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b72a8:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b72aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b72ae:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b72b0:	f7ff ffd2 	bl	b7258 <_ZN9TCPClientC1Ei>
}
   b72b4:	4620      	mov	r0, r4
   b72b6:	bd10      	pop	{r4, pc}

000b72b8 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b72b8:	b510      	push	{r4, lr}
   b72ba:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b72bc:	6800      	ldr	r0, [r0, #0]
   b72be:	2800      	cmp	r0, #0
   b72c0:	db01      	blt.n	b72c6 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b72c2:	f7fe fe73 	bl	b5fac <sock_close>
    }
}
   b72c6:	4620      	mov	r0, r4
   b72c8:	bd10      	pop	{r4, pc}

000b72ca <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b72ca:	300c      	adds	r0, #12
   b72cc:	f7ff bff4 	b.w	b72b8 <_ZN9TCPClient4DataD1Ev>

000b72d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b72d0:	4b02      	ldr	r3, [pc, #8]	; (b72dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b72d2:	681a      	ldr	r2, [r3, #0]
   b72d4:	4b02      	ldr	r3, [pc, #8]	; (b72e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b72d6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b72d8:	4770      	bx	lr
   b72da:	bf00      	nop
   b72dc:	2003e484 	.word	0x2003e484
   b72e0:	2003e6fc 	.word	0x2003e6fc

000b72e4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b72e4:	4770      	bx	lr

000b72e6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b72e6:	7441      	strb	r1, [r0, #17]
}
   b72e8:	4770      	bx	lr

000b72ea <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b72ea:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b72ec:	7c00      	ldrb	r0, [r0, #16]
   b72ee:	f7fe ff05 	bl	b60fc <hal_usart_available_data_for_write>
}
   b72f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b72f6:	bd08      	pop	{r3, pc}

000b72f8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b72f8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b72fa:	7c00      	ldrb	r0, [r0, #16]
   b72fc:	f7fe fed6 	bl	b60ac <hal_usart_available>
}
   b7300:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7304:	bd08      	pop	{r3, pc}

000b7306 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7306:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7308:	7c00      	ldrb	r0, [r0, #16]
   b730a:	f7fe fedf 	bl	b60cc <hal_usart_peek>
}
   b730e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7312:	bd08      	pop	{r3, pc}

000b7314 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7314:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7316:	7c00      	ldrb	r0, [r0, #16]
   b7318:	f7fe fed0 	bl	b60bc <hal_usart_read>
}
   b731c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7320:	bd08      	pop	{r3, pc}

000b7322 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7322:	7c00      	ldrb	r0, [r0, #16]
   b7324:	f7fe beda 	b.w	b60dc <hal_usart_flush>

000b7328 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7328:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b732a:	7c45      	ldrb	r5, [r0, #17]
{
   b732c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b732e:	b12d      	cbz	r5, b733c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7330:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7332:	b003      	add	sp, #12
   b7334:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7338:	f7fe beb0 	b.w	b609c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b733c:	7c00      	ldrb	r0, [r0, #16]
   b733e:	9101      	str	r1, [sp, #4]
   b7340:	f7fe fedc 	bl	b60fc <hal_usart_available_data_for_write>
   b7344:	2800      	cmp	r0, #0
   b7346:	9901      	ldr	r1, [sp, #4]
   b7348:	dcf2      	bgt.n	b7330 <_ZN11USARTSerial5writeEh+0x8>
}
   b734a:	4628      	mov	r0, r5
   b734c:	b003      	add	sp, #12
   b734e:	bd30      	pop	{r4, r5, pc}

000b7350 <_ZN11USARTSerialD0Ev>:
   b7350:	b510      	push	{r4, lr}
   b7352:	2114      	movs	r1, #20
   b7354:	4604      	mov	r4, r0
   b7356:	f7fc fea0 	bl	b409a <_ZdlPvj>
   b735a:	4620      	mov	r0, r4
   b735c:	bd10      	pop	{r4, pc}
	...

000b7360 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7360:	b510      	push	{r4, lr}
   b7362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7366:	4604      	mov	r4, r0
   b7368:	4608      	mov	r0, r1
   b736a:	4611      	mov	r1, r2
   b736c:	2200      	movs	r2, #0
   b736e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7372:	4b04      	ldr	r3, [pc, #16]	; (b7384 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7374:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7376:	2301      	movs	r3, #1
  _serial = serial;
   b7378:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b737a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b737c:	f7fe fec6 	bl	b610c <hal_usart_init_ex>
}
   b7380:	4620      	mov	r0, r4
   b7382:	bd10      	pop	{r4, pc}
   b7384:	000b8900 	.word	0x000b8900

000b7388 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7388:	7441      	strb	r1, [r0, #17]
}
   b738a:	4770      	bx	lr

000b738c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b738c:	4770      	bx	lr

000b738e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b738e:	4770      	bx	lr

000b7390 <_ZN9USBSerial4readEv>:
{
   b7390:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7392:	2100      	movs	r1, #0
   b7394:	7c00      	ldrb	r0, [r0, #16]
   b7396:	f7fe fee1 	bl	b615c <HAL_USB_USART_Receive_Data>
}
   b739a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b739e:	bd08      	pop	{r3, pc}

000b73a0 <_ZN9USBSerial4peekEv>:
{
   b73a0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b73a2:	2101      	movs	r1, #1
   b73a4:	7c00      	ldrb	r0, [r0, #16]
   b73a6:	f7fe fed9 	bl	b615c <HAL_USB_USART_Receive_Data>
}
   b73aa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b73ae:	bd08      	pop	{r3, pc}

000b73b0 <_ZN9USBSerial17availableForWriteEv>:
{
   b73b0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b73b2:	7c00      	ldrb	r0, [r0, #16]
   b73b4:	f7fe feca 	bl	b614c <HAL_USB_USART_Available_Data_For_Write>
}
   b73b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b73bc:	bd08      	pop	{r3, pc}

000b73be <_ZN9USBSerial9availableEv>:
{
   b73be:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b73c0:	7c00      	ldrb	r0, [r0, #16]
   b73c2:	f7fe febb 	bl	b613c <HAL_USB_USART_Available_Data>
}
   b73c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b73ca:	bd08      	pop	{r3, pc}

000b73cc <_ZN9USBSerial5writeEh>:
{
   b73cc:	b513      	push	{r0, r1, r4, lr}
   b73ce:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b73d0:	7c00      	ldrb	r0, [r0, #16]
{
   b73d2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b73d4:	f7fe feba 	bl	b614c <HAL_USB_USART_Available_Data_For_Write>
   b73d8:	2800      	cmp	r0, #0
   b73da:	9901      	ldr	r1, [sp, #4]
   b73dc:	dc01      	bgt.n	b73e2 <_ZN9USBSerial5writeEh+0x16>
   b73de:	7c60      	ldrb	r0, [r4, #17]
   b73e0:	b120      	cbz	r0, b73ec <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b73e2:	7c20      	ldrb	r0, [r4, #16]
   b73e4:	f7fe fec2 	bl	b616c <HAL_USB_USART_Send_Data>
   b73e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b73ec:	b002      	add	sp, #8
   b73ee:	bd10      	pop	{r4, pc}

000b73f0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b73f0:	7c00      	ldrb	r0, [r0, #16]
   b73f2:	f7fe bec3 	b.w	b617c <HAL_USB_USART_Flush_Data>

000b73f6 <_ZN9USBSerialD0Ev>:
   b73f6:	b510      	push	{r4, lr}
   b73f8:	2114      	movs	r1, #20
   b73fa:	4604      	mov	r4, r0
   b73fc:	f7fc fe4d 	bl	b409a <_ZdlPvj>
   b7400:	4620      	mov	r0, r4
   b7402:	bd10      	pop	{r4, pc}

000b7404 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7404:	b510      	push	{r4, lr}
   b7406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b740a:	4604      	mov	r4, r0
   b740c:	4608      	mov	r0, r1
   b740e:	2100      	movs	r1, #0
   b7410:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7414:	4b04      	ldr	r3, [pc, #16]	; (b7428 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7416:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7418:	2301      	movs	r3, #1
  _serial = serial;
   b741a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b741c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b741e:	4611      	mov	r1, r2
   b7420:	f7fe fe7c 	bl	b611c <HAL_USB_USART_Init>
}
   b7424:	4620      	mov	r0, r4
   b7426:	bd10      	pop	{r4, pc}
   b7428:	000b8930 	.word	0x000b8930

000b742c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b742c:	7c00      	ldrb	r0, [r0, #16]
   b742e:	2200      	movs	r2, #0
   b7430:	f7fe be7c 	b.w	b612c <HAL_USB_USART_Begin>

000b7434 <_Z19acquireSerialBufferv>:
{
   b7434:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7436:	2214      	movs	r2, #20
{
   b7438:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b743a:	2100      	movs	r1, #0
   b743c:	f000 fb96 	bl	b7b6c <memset>
}
   b7440:	4620      	mov	r0, r4
   b7442:	bd10      	pop	{r4, pc}

000b7444 <_Z16_fetch_usbserialv>:
{
   b7444:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7446:	4c0f      	ldr	r4, [pc, #60]	; (b7484 <_Z16_fetch_usbserialv+0x40>)
{
   b7448:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b744a:	a803      	add	r0, sp, #12
   b744c:	f7ff fff2 	bl	b7434 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7450:	7821      	ldrb	r1, [r4, #0]
   b7452:	f3bf 8f5b 	dmb	ish
   b7456:	f011 0101 	ands.w	r1, r1, #1
   b745a:	d10f      	bne.n	b747c <_Z16_fetch_usbserialv+0x38>
   b745c:	4620      	mov	r0, r4
   b745e:	9101      	str	r1, [sp, #4]
   b7460:	f7fc fe2a 	bl	b40b8 <__cxa_guard_acquire>
   b7464:	9901      	ldr	r1, [sp, #4]
   b7466:	b148      	cbz	r0, b747c <_Z16_fetch_usbserialv+0x38>
   b7468:	aa03      	add	r2, sp, #12
   b746a:	4807      	ldr	r0, [pc, #28]	; (b7488 <_Z16_fetch_usbserialv+0x44>)
   b746c:	f7ff ffca 	bl	b7404 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7470:	4620      	mov	r0, r4
   b7472:	f7fc fe26 	bl	b40c2 <__cxa_guard_release>
   b7476:	4805      	ldr	r0, [pc, #20]	; (b748c <_Z16_fetch_usbserialv+0x48>)
   b7478:	f000 fb64 	bl	b7b44 <atexit>
	return _usbserial;
}
   b747c:	4802      	ldr	r0, [pc, #8]	; (b7488 <_Z16_fetch_usbserialv+0x44>)
   b747e:	b008      	add	sp, #32
   b7480:	bd10      	pop	{r4, pc}
   b7482:	bf00      	nop
   b7484:	2003e700 	.word	0x2003e700
   b7488:	2003e704 	.word	0x2003e704
   b748c:	000b738d 	.word	0x000b738d

000b7490 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7490:	2200      	movs	r2, #0
   b7492:	6840      	ldr	r0, [r0, #4]
   b7494:	4611      	mov	r1, r2
   b7496:	f7fe becd 	b.w	b6234 <network_ready>

000b749a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b749a:	2200      	movs	r2, #0
   b749c:	6840      	ldr	r0, [r0, #4]
   b749e:	4611      	mov	r1, r2
   b74a0:	f7fe bee8 	b.w	b6274 <network_listening>

000b74a4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b74a4:	2200      	movs	r2, #0
   b74a6:	6840      	ldr	r0, [r0, #4]
   b74a8:	4611      	mov	r1, r2
   b74aa:	f7fe befb 	b.w	b62a4 <network_get_listen_timeout>

000b74ae <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b74ae:	6840      	ldr	r0, [r0, #4]
   b74b0:	2200      	movs	r2, #0
   b74b2:	f7fe beef 	b.w	b6294 <network_set_listen_timeout>

000b74b6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b74b6:	6840      	ldr	r0, [r0, #4]
   b74b8:	2200      	movs	r2, #0
   b74ba:	f081 0101 	eor.w	r1, r1, #1
   b74be:	f7fe bed1 	b.w	b6264 <network_listen>

000b74c2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b74c2:	2300      	movs	r3, #0
   b74c4:	6840      	ldr	r0, [r0, #4]
   b74c6:	461a      	mov	r2, r3
   b74c8:	4619      	mov	r1, r3
   b74ca:	f7fe bec3 	b.w	b6254 <network_off>

000b74ce <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b74ce:	2300      	movs	r3, #0
   b74d0:	6840      	ldr	r0, [r0, #4]
   b74d2:	461a      	mov	r2, r3
   b74d4:	4619      	mov	r1, r3
   b74d6:	f7fe beb5 	b.w	b6244 <network_on>

000b74da <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b74da:	2200      	movs	r2, #0
   b74dc:	6840      	ldr	r0, [r0, #4]
   b74de:	4611      	mov	r1, r2
   b74e0:	f7fe be98 	b.w	b6214 <network_connecting>

000b74e4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b74e4:	6840      	ldr	r0, [r0, #4]
   b74e6:	2200      	movs	r2, #0
   b74e8:	2102      	movs	r1, #2
   b74ea:	f7fe be9b 	b.w	b6224 <network_disconnect>

000b74ee <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b74ee:	2300      	movs	r3, #0
   b74f0:	6840      	ldr	r0, [r0, #4]
   b74f2:	461a      	mov	r2, r3
   b74f4:	f7fe be86 	b.w	b6204 <network_connect>

000b74f8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b74f8:	4b02      	ldr	r3, [pc, #8]	; (b7504 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b74fa:	2204      	movs	r2, #4
   b74fc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b74fe:	4a02      	ldr	r2, [pc, #8]	; (b7508 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7500:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b7502:	4770      	bx	lr
   b7504:	2003e718 	.word	0x2003e718
   b7508:	000b8960 	.word	0x000b8960

000b750c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b750c:	b510      	push	{r4, lr}
   b750e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b7510:	f000 fb74 	bl	b7bfc <strlen>
   b7514:	3801      	subs	r0, #1
   b7516:	1823      	adds	r3, r4, r0
   b7518:	4620      	mov	r0, r4
	while(i<j){
   b751a:	4283      	cmp	r3, r0
   b751c:	d906      	bls.n	b752c <_Z11str_reversePc+0x20>
		c = *i;
   b751e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b7520:	7819      	ldrb	r1, [r3, #0]
   b7522:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b7526:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b752a:	e7f6      	b.n	b751a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b752c:	bd10      	pop	{r4, pc}

000b752e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b752e:	b570      	push	{r4, r5, r6, lr}
   b7530:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b7532:	1e91      	subs	r1, r2, #2
   b7534:	2922      	cmp	r1, #34	; 0x22
   b7536:	d81d      	bhi.n	b7574 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b7538:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b753a:	b930      	cbnz	r0, b754a <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b753c:	4423      	add	r3, r4
            *ptr++ = '0';
   b753e:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b7540:	429d      	cmp	r5, r3
   b7542:	d210      	bcs.n	b7566 <ultoa+0x38>
            *ptr++ = '0';
   b7544:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b7548:	e7fa      	b.n	b7540 <ultoa+0x12>
            result.quot = a/radix;
   b754a:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b754e:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b7552:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b7554:	2809      	cmp	r0, #9
                *ptr += '0';
   b7556:	bf94      	ite	ls
   b7558:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b755a:	3157      	addhi	r1, #87	; 0x57
   b755c:	b2c9      	uxtb	r1, r1
   b755e:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b7562:	4630      	mov	r0, r6
	while(a){
   b7564:	e7e9      	b.n	b753a <ultoa+0xc>

	*ptr = '\0';
   b7566:	2300      	movs	r3, #0
	str_reverse(buffer);
   b7568:	4620      	mov	r0, r4
	*ptr = '\0';
   b756a:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b756c:	f7ff ffce 	bl	b750c <_Z11str_reversePc>
	return buffer;
   b7570:	4620      	mov	r0, r4
}
   b7572:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b7574:	2000      	movs	r0, #0
   b7576:	e7fc      	b.n	b7572 <ultoa+0x44>

000b7578 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7578:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b757a:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b757c:	460c      	mov	r4, r1
   b757e:	4615      	mov	r5, r2
	if(a<0){
   b7580:	da0e      	bge.n	b75a0 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b7582:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b7586:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b758a:	bf14      	ite	ne
   b758c:	4258      	negne	r0, r3
   b758e:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b7590:	2301      	movs	r3, #1
		*buffer = '-';
   b7592:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b7594:	462a      	mov	r2, r5
   b7596:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b7598:	f7ff ffc9 	bl	b752e <ultoa>
	}
	return buffer;
}
   b759c:	4620      	mov	r0, r4
   b759e:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b75a0:	2301      	movs	r3, #1
   b75a2:	e7f9      	b.n	b7598 <itoa+0x20>

000b75a4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b75a4:	4b01      	ldr	r3, [pc, #4]	; (b75ac <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b75a6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b75a8:	4770      	bx	lr
   b75aa:	bf00      	nop
   b75ac:	2003e488 	.word	0x2003e488

000b75b0 <serialEventRun>:
{
   b75b0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b75b2:	4b0b      	ldr	r3, [pc, #44]	; (b75e0 <serialEventRun+0x30>)
   b75b4:	b143      	cbz	r3, b75c8 <serialEventRun+0x18>
   b75b6:	f7ff ff45 	bl	b7444 <_Z16_fetch_usbserialv>
   b75ba:	6803      	ldr	r3, [r0, #0]
   b75bc:	691b      	ldr	r3, [r3, #16]
   b75be:	4798      	blx	r3
   b75c0:	2800      	cmp	r0, #0
   b75c2:	dd01      	ble.n	b75c8 <serialEventRun+0x18>
        serialEvent();
   b75c4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b75c8:	4b06      	ldr	r3, [pc, #24]	; (b75e4 <serialEventRun+0x34>)
   b75ca:	b143      	cbz	r3, b75de <serialEventRun+0x2e>
   b75cc:	f000 f97e 	bl	b78cc <_Z22__fetch_global_Serial1v>
   b75d0:	6803      	ldr	r3, [r0, #0]
   b75d2:	691b      	ldr	r3, [r3, #16]
   b75d4:	4798      	blx	r3
   b75d6:	2800      	cmp	r0, #0
   b75d8:	dd01      	ble.n	b75de <serialEventRun+0x2e>
        serialEvent1();
   b75da:	f3af 8000 	nop.w
}
   b75de:	bd08      	pop	{r3, pc}
	...

000b75e8 <_post_loop>:
{
   b75e8:	b508      	push	{r3, lr}
	serialEventRun();
   b75ea:	f7ff ffe1 	bl	b75b0 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b75ee:	f7fe fc05 	bl	b5dfc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b75f2:	4b01      	ldr	r3, [pc, #4]	; (b75f8 <_post_loop+0x10>)
   b75f4:	6018      	str	r0, [r3, #0]
}
   b75f6:	bd08      	pop	{r3, pc}
   b75f8:	2003e728 	.word	0x2003e728

000b75fc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b75fc:	4805      	ldr	r0, [pc, #20]	; (b7614 <_Z33system_initialize_user_backup_ramv+0x18>)
   b75fe:	4a06      	ldr	r2, [pc, #24]	; (b7618 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7600:	4906      	ldr	r1, [pc, #24]	; (b761c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7602:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7604:	1a12      	subs	r2, r2, r0
   b7606:	f000 faa3 	bl	b7b50 <memcpy>
    __backup_sram_signature = signature;
   b760a:	4b05      	ldr	r3, [pc, #20]	; (b7620 <_Z33system_initialize_user_backup_ramv+0x24>)
   b760c:	4a05      	ldr	r2, [pc, #20]	; (b7624 <_Z33system_initialize_user_backup_ramv+0x28>)
   b760e:	601a      	str	r2, [r3, #0]
}
   b7610:	bd08      	pop	{r3, pc}
   b7612:	bf00      	nop
   b7614:	2003f400 	.word	0x2003f400
   b7618:	2003f404 	.word	0x2003f404
   b761c:	000b8b54 	.word	0x000b8b54
   b7620:	2003f400 	.word	0x2003f400
   b7624:	9a271c1e 	.word	0x9a271c1e

000b7628 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7628:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b762a:	2300      	movs	r3, #0
   b762c:	9300      	str	r3, [sp, #0]
   b762e:	461a      	mov	r2, r3
   b7630:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7634:	f7fe fdd4 	bl	b61e0 <system_ctrl_set_result>
}
   b7638:	b003      	add	sp, #12
   b763a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7640 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7640:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7642:	8843      	ldrh	r3, [r0, #2]
   b7644:	2b0a      	cmp	r3, #10
   b7646:	d008      	beq.n	b765a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7648:	2b50      	cmp	r3, #80	; 0x50
   b764a:	d10b      	bne.n	b7664 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b764c:	4b09      	ldr	r3, [pc, #36]	; (b7674 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b764e:	681b      	ldr	r3, [r3, #0]
   b7650:	b14b      	cbz	r3, b7666 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7652:	b003      	add	sp, #12
   b7654:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7658:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b765a:	f7ff ffe5 	bl	b7628 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b765e:	b003      	add	sp, #12
   b7660:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7664:	2300      	movs	r3, #0
   b7666:	9300      	str	r3, [sp, #0]
   b7668:	461a      	mov	r2, r3
   b766a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b766e:	f7fe fdb7 	bl	b61e0 <system_ctrl_set_result>
}
   b7672:	e7f4      	b.n	b765e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7674:	2003e724 	.word	0x2003e724

000b7678 <module_user_init_hook>:
{
   b7678:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b767a:	4812      	ldr	r0, [pc, #72]	; (b76c4 <module_user_init_hook+0x4c>)
   b767c:	2100      	movs	r1, #0
   b767e:	f7fe fe61 	bl	b6344 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7682:	4b11      	ldr	r3, [pc, #68]	; (b76c8 <module_user_init_hook+0x50>)
   b7684:	681a      	ldr	r2, [r3, #0]
   b7686:	4b11      	ldr	r3, [pc, #68]	; (b76cc <module_user_init_hook+0x54>)
   b7688:	429a      	cmp	r2, r3
   b768a:	4b11      	ldr	r3, [pc, #68]	; (b76d0 <module_user_init_hook+0x58>)
   b768c:	bf0c      	ite	eq
   b768e:	2201      	moveq	r2, #1
   b7690:	2200      	movne	r2, #0
   b7692:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7694:	d001      	beq.n	b769a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7696:	f7ff ffb1 	bl	b75fc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b769a:	f7fe fb97 	bl	b5dcc <HAL_RNG_GetRandomNumber>
   b769e:	4604      	mov	r4, r0
    srand(seed);
   b76a0:	f000 fa6c 	bl	b7b7c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b76a4:	4b0b      	ldr	r3, [pc, #44]	; (b76d4 <module_user_init_hook+0x5c>)
   b76a6:	b113      	cbz	r3, b76ae <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b76a8:	4620      	mov	r0, r4
   b76aa:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b76ae:	2100      	movs	r1, #0
   b76b0:	4808      	ldr	r0, [pc, #32]	; (b76d4 <module_user_init_hook+0x5c>)
   b76b2:	f7fe fd9f 	bl	b61f4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b76b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b76ba:	4807      	ldr	r0, [pc, #28]	; (b76d8 <module_user_init_hook+0x60>)
   b76bc:	2100      	movs	r1, #0
   b76be:	f7fe bd85 	b.w	b61cc <system_ctrl_set_app_request_handler>
   b76c2:	bf00      	nop
   b76c4:	000b75a5 	.word	0x000b75a5
   b76c8:	2003f400 	.word	0x2003f400
   b76cc:	9a271c1e 	.word	0x9a271c1e
   b76d0:	2003e720 	.word	0x2003e720
   b76d4:	00000000 	.word	0x00000000
   b76d8:	000b7641 	.word	0x000b7641

000b76dc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b76dc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b76de:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b76e0:	d902      	bls.n	b76e8 <pinAvailable+0xc>
    return false;
   b76e2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b76e4:	b002      	add	sp, #8
   b76e6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b76e8:	f1a0 030b 	sub.w	r3, r0, #11
   b76ec:	2b02      	cmp	r3, #2
   b76ee:	d81a      	bhi.n	b7726 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b76f0:	4c17      	ldr	r4, [pc, #92]	; (b7750 <pinAvailable+0x74>)
   b76f2:	7821      	ldrb	r1, [r4, #0]
   b76f4:	f3bf 8f5b 	dmb	ish
   b76f8:	f011 0101 	ands.w	r1, r1, #1
   b76fc:	d10b      	bne.n	b7716 <pinAvailable+0x3a>
   b76fe:	4620      	mov	r0, r4
   b7700:	9101      	str	r1, [sp, #4]
   b7702:	f7fc fcd9 	bl	b40b8 <__cxa_guard_acquire>
   b7706:	9901      	ldr	r1, [sp, #4]
   b7708:	b128      	cbz	r0, b7716 <pinAvailable+0x3a>
   b770a:	4812      	ldr	r0, [pc, #72]	; (b7754 <pinAvailable+0x78>)
   b770c:	f7ff f92a 	bl	b6964 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7710:	4620      	mov	r0, r4
   b7712:	f7fc fcd6 	bl	b40c2 <__cxa_guard_release>
   b7716:	4b0f      	ldr	r3, [pc, #60]	; (b7754 <pinAvailable+0x78>)
   b7718:	7818      	ldrb	r0, [r3, #0]
   b771a:	f7fe fc9f 	bl	b605c <hal_spi_is_enabled>
   b771e:	2800      	cmp	r0, #0
   b7720:	d1df      	bne.n	b76e2 <pinAvailable+0x6>
  return true; // 'pin' is available
   b7722:	2001      	movs	r0, #1
   b7724:	e7de      	b.n	b76e4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7726:	2801      	cmp	r0, #1
   b7728:	d809      	bhi.n	b773e <pinAvailable+0x62>
   b772a:	f000 f88f 	bl	b784c <_Z19__fetch_global_Wirev>
   b772e:	2100      	movs	r1, #0
   b7730:	7c00      	ldrb	r0, [r0, #16]
   b7732:	f7fe fbf3 	bl	b5f1c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7736:	f080 0001 	eor.w	r0, r0, #1
   b773a:	b2c0      	uxtb	r0, r0
   b773c:	e7d2      	b.n	b76e4 <pinAvailable+0x8>
   b773e:	3809      	subs	r0, #9
   b7740:	2801      	cmp	r0, #1
   b7742:	d8ee      	bhi.n	b7722 <pinAvailable+0x46>
   b7744:	f000 f8c2 	bl	b78cc <_Z22__fetch_global_Serial1v>
   b7748:	7c00      	ldrb	r0, [r0, #16]
   b774a:	f7fe fccf 	bl	b60ec <hal_usart_is_enabled>
   b774e:	e7f2      	b.n	b7736 <pinAvailable+0x5a>
   b7750:	2003e624 	.word	0x2003e624
   b7754:	2003e628 	.word	0x2003e628

000b7758 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7758:	2823      	cmp	r0, #35	; 0x23
{
   b775a:	b538      	push	{r3, r4, r5, lr}
   b775c:	4604      	mov	r4, r0
   b775e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7760:	d80a      	bhi.n	b7778 <pinMode+0x20>
   b7762:	29ff      	cmp	r1, #255	; 0xff
   b7764:	d008      	beq.n	b7778 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7766:	f7ff ffb9 	bl	b76dc <pinAvailable>
   b776a:	b128      	cbz	r0, b7778 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b776c:	4629      	mov	r1, r5
   b776e:	4620      	mov	r0, r4
}
   b7770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b7774:	f7fe bb52 	b.w	b5e1c <HAL_Pin_Mode>
}
   b7778:	bd38      	pop	{r3, r4, r5, pc}

000b777a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b777a:	b538      	push	{r3, r4, r5, lr}
   b777c:	4604      	mov	r4, r0
   b777e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7780:	f7fe fb54 	bl	b5e2c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7784:	28ff      	cmp	r0, #255	; 0xff
   b7786:	d010      	beq.n	b77aa <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7788:	2806      	cmp	r0, #6
   b778a:	d804      	bhi.n	b7796 <digitalWrite+0x1c>
   b778c:	234d      	movs	r3, #77	; 0x4d
   b778e:	fa23 f000 	lsr.w	r0, r3, r0
   b7792:	07c3      	lsls	r3, r0, #31
   b7794:	d409      	bmi.n	b77aa <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7796:	4620      	mov	r0, r4
   b7798:	f7ff ffa0 	bl	b76dc <pinAvailable>
   b779c:	b128      	cbz	r0, b77aa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b779e:	4629      	mov	r1, r5
   b77a0:	4620      	mov	r0, r4
}
   b77a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b77a6:	f7fe bb49 	b.w	b5e3c <HAL_GPIO_Write>
}
   b77aa:	bd38      	pop	{r3, r4, r5, pc}

000b77ac <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b77ac:	b510      	push	{r4, lr}
   b77ae:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b77b0:	f7fe fb3c 	bl	b5e2c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b77b4:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b77b6:	b2db      	uxtb	r3, r3
   b77b8:	2b01      	cmp	r3, #1
   b77ba:	d908      	bls.n	b77ce <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b77bc:	4620      	mov	r0, r4
   b77be:	f7ff ff8d 	bl	b76dc <pinAvailable>
   b77c2:	b120      	cbz	r0, b77ce <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b77c4:	4620      	mov	r0, r4
}
   b77c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b77ca:	f7fe bb3f 	b.w	b5e4c <HAL_GPIO_Read>
}
   b77ce:	2000      	movs	r0, #0
   b77d0:	bd10      	pop	{r4, pc}

000b77d2 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b77d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b77d6:	4690      	mov	r8, r2
   b77d8:	461f      	mov	r7, r3
   b77da:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b77dc:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b77de:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b77e0:	f1c4 0107 	rsb	r1, r4, #7
   b77e4:	f1b8 0f00 	cmp.w	r8, #0
   b77e8:	d112      	bne.n	b7810 <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b77ea:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b77ee:	f001 0101 	and.w	r1, r1, #1
   b77f2:	4630      	mov	r0, r6
   b77f4:	f7ff ffc1 	bl	b777a <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b77f8:	2101      	movs	r1, #1
   b77fa:	4628      	mov	r0, r5
   b77fc:	f7ff ffbd 	bl	b777a <digitalWrite>
    digitalWrite(clockPin, LOW);
   b7800:	2100      	movs	r1, #0
   b7802:	4628      	mov	r0, r5
   b7804:	f7ff ffb9 	bl	b777a <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b7808:	3c01      	subs	r4, #1
   b780a:	d2e9      	bcs.n	b77e0 <shiftOut+0xe>
  }
}
   b780c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b7810:	fa47 f104 	asr.w	r1, r7, r4
   b7814:	e7eb      	b.n	b77ee <shiftOut+0x1c>

000b7816 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7816:	4770      	bx	lr

000b7818 <_Z17acquireWireBufferv>:
{
   b7818:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b781a:	4b0a      	ldr	r3, [pc, #40]	; (b7844 <_Z17acquireWireBufferv+0x2c>)
   b781c:	6003      	str	r3, [r0, #0]
   b781e:	2301      	movs	r3, #1
{
   b7820:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7822:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7824:	4908      	ldr	r1, [pc, #32]	; (b7848 <_Z17acquireWireBufferv+0x30>)
   b7826:	2020      	movs	r0, #32
   b7828:	f000 f874 	bl	b7914 <_ZnajRKSt9nothrow_t>
	};
   b782c:	2520      	movs	r5, #32
   b782e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7830:	4905      	ldr	r1, [pc, #20]	; (b7848 <_Z17acquireWireBufferv+0x30>)
	};
   b7832:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7834:	4628      	mov	r0, r5
   b7836:	f000 f86d 	bl	b7914 <_ZnajRKSt9nothrow_t>
	};
   b783a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b783e:	4620      	mov	r0, r4
   b7840:	bd38      	pop	{r3, r4, r5, pc}
   b7842:	bf00      	nop
   b7844:	00010018 	.word	0x00010018
   b7848:	000b8994 	.word	0x000b8994

000b784c <_Z19__fetch_global_Wirev>:
{
   b784c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b784e:	4d0e      	ldr	r5, [pc, #56]	; (b7888 <_Z19__fetch_global_Wirev+0x3c>)
   b7850:	7829      	ldrb	r1, [r5, #0]
   b7852:	f3bf 8f5b 	dmb	ish
   b7856:	f011 0401 	ands.w	r4, r1, #1
{
   b785a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b785c:	d111      	bne.n	b7882 <_Z19__fetch_global_Wirev+0x36>
   b785e:	4628      	mov	r0, r5
   b7860:	f7fc fc2a 	bl	b40b8 <__cxa_guard_acquire>
   b7864:	b168      	cbz	r0, b7882 <_Z19__fetch_global_Wirev+0x36>
   b7866:	4668      	mov	r0, sp
   b7868:	f7ff ffd6 	bl	b7818 <_Z17acquireWireBufferv>
   b786c:	466a      	mov	r2, sp
   b786e:	4621      	mov	r1, r4
   b7870:	4806      	ldr	r0, [pc, #24]	; (b788c <_Z19__fetch_global_Wirev+0x40>)
   b7872:	f7fe fdf9 	bl	b6468 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7876:	4628      	mov	r0, r5
   b7878:	f7fc fc23 	bl	b40c2 <__cxa_guard_release>
   b787c:	4804      	ldr	r0, [pc, #16]	; (b7890 <_Z19__fetch_global_Wirev+0x44>)
   b787e:	f000 f961 	bl	b7b44 <atexit>
	return wire;
}
   b7882:	4802      	ldr	r0, [pc, #8]	; (b788c <_Z19__fetch_global_Wirev+0x40>)
   b7884:	b007      	add	sp, #28
   b7886:	bd30      	pop	{r4, r5, pc}
   b7888:	2003e72c 	.word	0x2003e72c
   b788c:	2003e730 	.word	0x2003e730
   b7890:	000b7817 	.word	0x000b7817

000b7894 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7894:	4770      	bx	lr
	...

000b7898 <_Z20acquireSerial1Bufferv>:
{
   b7898:	b538      	push	{r3, r4, r5, lr}
   b789a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b789c:	2514      	movs	r5, #20
   b789e:	462a      	mov	r2, r5
   b78a0:	2100      	movs	r1, #0
   b78a2:	f000 f963 	bl	b7b6c <memset>
   b78a6:	8025      	strh	r5, [r4, #0]
   b78a8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b78aa:	4907      	ldr	r1, [pc, #28]	; (b78c8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b78ac:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b78ae:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b78b0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b78b2:	f000 f82f 	bl	b7914 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b78b6:	4904      	ldr	r1, [pc, #16]	; (b78c8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b78b8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b78ba:	4628      	mov	r0, r5
   b78bc:	f000 f82a 	bl	b7914 <_ZnajRKSt9nothrow_t>
    };
   b78c0:	60e0      	str	r0, [r4, #12]
}
   b78c2:	4620      	mov	r0, r4
   b78c4:	bd38      	pop	{r3, r4, r5, pc}
   b78c6:	bf00      	nop
   b78c8:	000b8994 	.word	0x000b8994

000b78cc <_Z22__fetch_global_Serial1v>:
{
   b78cc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b78ce:	4d0e      	ldr	r5, [pc, #56]	; (b7908 <_Z22__fetch_global_Serial1v+0x3c>)
   b78d0:	7829      	ldrb	r1, [r5, #0]
   b78d2:	f3bf 8f5b 	dmb	ish
   b78d6:	f011 0401 	ands.w	r4, r1, #1
{
   b78da:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b78dc:	d111      	bne.n	b7902 <_Z22__fetch_global_Serial1v+0x36>
   b78de:	4628      	mov	r0, r5
   b78e0:	f7fc fbea 	bl	b40b8 <__cxa_guard_acquire>
   b78e4:	b168      	cbz	r0, b7902 <_Z22__fetch_global_Serial1v+0x36>
   b78e6:	a801      	add	r0, sp, #4
   b78e8:	f7ff ffd6 	bl	b7898 <_Z20acquireSerial1Bufferv>
   b78ec:	aa01      	add	r2, sp, #4
   b78ee:	4621      	mov	r1, r4
   b78f0:	4806      	ldr	r0, [pc, #24]	; (b790c <_Z22__fetch_global_Serial1v+0x40>)
   b78f2:	f7ff fd35 	bl	b7360 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b78f6:	4628      	mov	r0, r5
   b78f8:	f7fc fbe3 	bl	b40c2 <__cxa_guard_release>
   b78fc:	4804      	ldr	r0, [pc, #16]	; (b7910 <_Z22__fetch_global_Serial1v+0x44>)
   b78fe:	f000 f921 	bl	b7b44 <atexit>
    return serial1;
}
   b7902:	4802      	ldr	r0, [pc, #8]	; (b790c <_Z22__fetch_global_Serial1v+0x40>)
   b7904:	b007      	add	sp, #28
   b7906:	bd30      	pop	{r4, r5, pc}
   b7908:	2003e744 	.word	0x2003e744
   b790c:	2003e748 	.word	0x2003e748
   b7910:	000b7895 	.word	0x000b7895

000b7914 <_ZnajRKSt9nothrow_t>:
   b7914:	f7fc bbbf 	b.w	b4096 <_Znaj>

000b7918 <_ZSt25__throw_bad_function_callv>:
   b7918:	b508      	push	{r3, lr}
   b791a:	f7fe fcfb 	bl	b6314 <abort>
	...

000b7920 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b7920:	4901      	ldr	r1, [pc, #4]	; (b7928 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b7922:	f000 b8f9 	b.w	b7b18 <_ZNKSt9type_infoeqERKS_>
   b7926:	bf00      	nop
   b7928:	000b89b0 	.word	0x000b89b0

000b792c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b792c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b792e:	2400      	movs	r4, #0
   b7930:	2310      	movs	r3, #16
   b7932:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b7936:	6803      	ldr	r3, [r0, #0]
   b7938:	4615      	mov	r5, r2
   b793a:	699e      	ldr	r6, [r3, #24]
   b793c:	6812      	ldr	r2, [r2, #0]
   b793e:	466b      	mov	r3, sp
   b7940:	e9cd 4400 	strd	r4, r4, [sp]
   b7944:	47b0      	blx	r6
   b7946:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b794a:	f003 0306 	and.w	r3, r3, #6
   b794e:	2b06      	cmp	r3, #6
   b7950:	bf03      	ittte	eq
   b7952:	9b00      	ldreq	r3, [sp, #0]
   b7954:	602b      	streq	r3, [r5, #0]
   b7956:	2001      	moveq	r0, #1
   b7958:	4620      	movne	r0, r4
   b795a:	b004      	add	sp, #16
   b795c:	bd70      	pop	{r4, r5, r6, pc}

000b795e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b795e:	9800      	ldr	r0, [sp, #0]
   b7960:	4290      	cmp	r0, r2
   b7962:	bf14      	ite	ne
   b7964:	2001      	movne	r0, #1
   b7966:	2006      	moveq	r0, #6
   b7968:	4770      	bx	lr
	...

000b796c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b796c:	b510      	push	{r4, lr}
   b796e:	4b03      	ldr	r3, [pc, #12]	; (b797c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7970:	6003      	str	r3, [r0, #0]
   b7972:	4604      	mov	r4, r0
   b7974:	f000 f8cd 	bl	b7b12 <_ZNSt9type_infoD1Ev>
   b7978:	4620      	mov	r0, r4
   b797a:	bd10      	pop	{r4, pc}
   b797c:	000b89f0 	.word	0x000b89f0

000b7980 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b7980:	b510      	push	{r4, lr}
   b7982:	4604      	mov	r4, r0
   b7984:	f7ff fff2 	bl	b796c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7988:	4620      	mov	r0, r4
   b798a:	2108      	movs	r1, #8
   b798c:	f7fc fb85 	bl	b409a <_ZdlPvj>
   b7990:	4620      	mov	r0, r4
   b7992:	bd10      	pop	{r4, pc}

000b7994 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b7994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7998:	461f      	mov	r7, r3
   b799a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b799e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b79a2:	4598      	cmp	r8, r3
   b79a4:	4606      	mov	r6, r0
   b79a6:	4615      	mov	r5, r2
   b79a8:	d107      	bne.n	b79ba <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b79aa:	9907      	ldr	r1, [sp, #28]
   b79ac:	f000 f8b4 	bl	b7b18 <_ZNKSt9type_infoeqERKS_>
   b79b0:	b118      	cbz	r0, b79ba <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b79b2:	7165      	strb	r5, [r4, #5]
   b79b4:	2000      	movs	r0, #0
   b79b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b79ba:	4639      	mov	r1, r7
   b79bc:	4630      	mov	r0, r6
   b79be:	f000 f8ab 	bl	b7b18 <_ZNKSt9type_infoeqERKS_>
   b79c2:	2800      	cmp	r0, #0
   b79c4:	d0f6      	beq.n	b79b4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b79c6:	2301      	movs	r3, #1
   b79c8:	f8c4 8000 	str.w	r8, [r4]
   b79cc:	7125      	strb	r5, [r4, #4]
   b79ce:	71a3      	strb	r3, [r4, #6]
   b79d0:	e7f0      	b.n	b79b4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b79d2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b79d2:	b538      	push	{r3, r4, r5, lr}
   b79d4:	4615      	mov	r5, r2
   b79d6:	461c      	mov	r4, r3
   b79d8:	f000 f89e 	bl	b7b18 <_ZNKSt9type_infoeqERKS_>
   b79dc:	b120      	cbz	r0, b79e8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b79de:	2308      	movs	r3, #8
   b79e0:	60e3      	str	r3, [r4, #12]
   b79e2:	2306      	movs	r3, #6
   b79e4:	6025      	str	r5, [r4, #0]
   b79e6:	7123      	strb	r3, [r4, #4]
   b79e8:	bd38      	pop	{r3, r4, r5, pc}

000b79ea <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b79ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b79ec:	4605      	mov	r5, r0
   b79ee:	460c      	mov	r4, r1
   b79f0:	9201      	str	r2, [sp, #4]
   b79f2:	461e      	mov	r6, r3
   b79f4:	f000 f890 	bl	b7b18 <_ZNKSt9type_infoeqERKS_>
   b79f8:	b950      	cbnz	r0, b7a10 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b79fa:	2e03      	cmp	r6, #3
   b79fc:	d808      	bhi.n	b7a10 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b79fe:	6823      	ldr	r3, [r4, #0]
   b7a00:	9a01      	ldr	r2, [sp, #4]
   b7a02:	695b      	ldr	r3, [r3, #20]
   b7a04:	4629      	mov	r1, r5
   b7a06:	4620      	mov	r0, r4
   b7a08:	b002      	add	sp, #8
   b7a0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7a0e:	4718      	bx	r3
   b7a10:	b002      	add	sp, #8
   b7a12:	bd70      	pop	{r4, r5, r6, pc}

000b7a14 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b7a14:	b510      	push	{r4, lr}
   b7a16:	4b03      	ldr	r3, [pc, #12]	; (b7a24 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b7a18:	6003      	str	r3, [r0, #0]
   b7a1a:	4604      	mov	r4, r0
   b7a1c:	f7ff ffa6 	bl	b796c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7a20:	4620      	mov	r0, r4
   b7a22:	bd10      	pop	{r4, pc}
   b7a24:	000b8a50 	.word	0x000b8a50

000b7a28 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b7a28:	b510      	push	{r4, lr}
   b7a2a:	4604      	mov	r4, r0
   b7a2c:	f7ff fff2 	bl	b7a14 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7a30:	4620      	mov	r0, r4
   b7a32:	210c      	movs	r1, #12
   b7a34:	f7fc fb31 	bl	b409a <_ZdlPvj>
   b7a38:	4620      	mov	r0, r4
   b7a3a:	bd10      	pop	{r4, pc}

000b7a3c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7a3e:	9f08      	ldr	r7, [sp, #32]
   b7a40:	4297      	cmp	r7, r2
   b7a42:	4605      	mov	r5, r0
   b7a44:	460e      	mov	r6, r1
   b7a46:	4614      	mov	r4, r2
   b7a48:	d00a      	beq.n	b7a60 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b7a4a:	68a8      	ldr	r0, [r5, #8]
   b7a4c:	6802      	ldr	r2, [r0, #0]
   b7a4e:	9708      	str	r7, [sp, #32]
   b7a50:	6a15      	ldr	r5, [r2, #32]
   b7a52:	4631      	mov	r1, r6
   b7a54:	4622      	mov	r2, r4
   b7a56:	46ac      	mov	ip, r5
   b7a58:	b003      	add	sp, #12
   b7a5a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7a5e:	4760      	bx	ip
   b7a60:	4619      	mov	r1, r3
   b7a62:	9301      	str	r3, [sp, #4]
   b7a64:	f000 f858 	bl	b7b18 <_ZNKSt9type_infoeqERKS_>
   b7a68:	9b01      	ldr	r3, [sp, #4]
   b7a6a:	2800      	cmp	r0, #0
   b7a6c:	d0ed      	beq.n	b7a4a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b7a6e:	2006      	movs	r0, #6
   b7a70:	b003      	add	sp, #12
   b7a72:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7a74 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7a74:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7a78:	460d      	mov	r5, r1
   b7a7a:	4619      	mov	r1, r3
   b7a7c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7a80:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b7a84:	4681      	mov	r9, r0
   b7a86:	4617      	mov	r7, r2
   b7a88:	4698      	mov	r8, r3
   b7a8a:	f000 f845 	bl	b7b18 <_ZNKSt9type_infoeqERKS_>
   b7a8e:	b190      	cbz	r0, b7ab6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b7a90:	2d00      	cmp	r5, #0
   b7a92:	6034      	str	r4, [r6, #0]
   b7a94:	7137      	strb	r7, [r6, #4]
   b7a96:	db09      	blt.n	b7aac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b7a98:	1961      	adds	r1, r4, r5
   b7a9a:	458a      	cmp	sl, r1
   b7a9c:	bf0c      	ite	eq
   b7a9e:	2106      	moveq	r1, #6
   b7aa0:	2101      	movne	r1, #1
   b7aa2:	71b1      	strb	r1, [r6, #6]
   b7aa4:	2000      	movs	r0, #0
   b7aa6:	b001      	add	sp, #4
   b7aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7aac:	3502      	adds	r5, #2
   b7aae:	d1f9      	bne.n	b7aa4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7ab0:	2301      	movs	r3, #1
   b7ab2:	71b3      	strb	r3, [r6, #6]
   b7ab4:	e7f6      	b.n	b7aa4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7ab6:	4554      	cmp	r4, sl
   b7ab8:	d106      	bne.n	b7ac8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7aba:	4659      	mov	r1, fp
   b7abc:	4648      	mov	r0, r9
   b7abe:	f000 f82b 	bl	b7b18 <_ZNKSt9type_infoeqERKS_>
   b7ac2:	b108      	cbz	r0, b7ac8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7ac4:	7177      	strb	r7, [r6, #5]
   b7ac6:	e7ed      	b.n	b7aa4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7ac8:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7acc:	6803      	ldr	r3, [r0, #0]
   b7ace:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b7ad2:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b7ad6:	69dc      	ldr	r4, [r3, #28]
   b7ad8:	463a      	mov	r2, r7
   b7ada:	4643      	mov	r3, r8
   b7adc:	4629      	mov	r1, r5
   b7ade:	46a4      	mov	ip, r4
   b7ae0:	b001      	add	sp, #4
   b7ae2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7ae6:	4760      	bx	ip

000b7ae8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b7ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7aec:	4607      	mov	r7, r0
   b7aee:	460c      	mov	r4, r1
   b7af0:	4615      	mov	r5, r2
   b7af2:	461e      	mov	r6, r3
   b7af4:	f7ff ff6d 	bl	b79d2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b7af8:	b948      	cbnz	r0, b7b0e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b7afa:	68b8      	ldr	r0, [r7, #8]
   b7afc:	6803      	ldr	r3, [r0, #0]
   b7afe:	699f      	ldr	r7, [r3, #24]
   b7b00:	462a      	mov	r2, r5
   b7b02:	4633      	mov	r3, r6
   b7b04:	4621      	mov	r1, r4
   b7b06:	46bc      	mov	ip, r7
   b7b08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7b0c:	4760      	bx	ip
   b7b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7b12 <_ZNSt9type_infoD1Ev>:
   b7b12:	4770      	bx	lr

000b7b14 <_ZNKSt9type_info14__is_pointer_pEv>:
   b7b14:	2000      	movs	r0, #0
   b7b16:	4770      	bx	lr

000b7b18 <_ZNKSt9type_infoeqERKS_>:
   b7b18:	4281      	cmp	r1, r0
   b7b1a:	b508      	push	{r3, lr}
   b7b1c:	d00e      	beq.n	b7b3c <_ZNKSt9type_infoeqERKS_+0x24>
   b7b1e:	6840      	ldr	r0, [r0, #4]
   b7b20:	7803      	ldrb	r3, [r0, #0]
   b7b22:	2b2a      	cmp	r3, #42	; 0x2a
   b7b24:	d00c      	beq.n	b7b40 <_ZNKSt9type_infoeqERKS_+0x28>
   b7b26:	6849      	ldr	r1, [r1, #4]
   b7b28:	780b      	ldrb	r3, [r1, #0]
   b7b2a:	2b2a      	cmp	r3, #42	; 0x2a
   b7b2c:	bf08      	it	eq
   b7b2e:	3101      	addeq	r1, #1
   b7b30:	f000 f852 	bl	b7bd8 <strcmp>
   b7b34:	fab0 f080 	clz	r0, r0
   b7b38:	0940      	lsrs	r0, r0, #5
   b7b3a:	bd08      	pop	{r3, pc}
   b7b3c:	2001      	movs	r0, #1
   b7b3e:	e7fc      	b.n	b7b3a <_ZNKSt9type_infoeqERKS_+0x22>
   b7b40:	2000      	movs	r0, #0
   b7b42:	e7fa      	b.n	b7b3a <_ZNKSt9type_infoeqERKS_+0x22>

000b7b44 <atexit>:
   b7b44:	2300      	movs	r3, #0
   b7b46:	4601      	mov	r1, r0
   b7b48:	461a      	mov	r2, r3
   b7b4a:	4618      	mov	r0, r3
   b7b4c:	f000 b85e 	b.w	b7c0c <__register_exitproc>

000b7b50 <memcpy>:
   b7b50:	440a      	add	r2, r1
   b7b52:	4291      	cmp	r1, r2
   b7b54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b7b58:	d100      	bne.n	b7b5c <memcpy+0xc>
   b7b5a:	4770      	bx	lr
   b7b5c:	b510      	push	{r4, lr}
   b7b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7b62:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7b66:	4291      	cmp	r1, r2
   b7b68:	d1f9      	bne.n	b7b5e <memcpy+0xe>
   b7b6a:	bd10      	pop	{r4, pc}

000b7b6c <memset>:
   b7b6c:	4402      	add	r2, r0
   b7b6e:	4603      	mov	r3, r0
   b7b70:	4293      	cmp	r3, r2
   b7b72:	d100      	bne.n	b7b76 <memset+0xa>
   b7b74:	4770      	bx	lr
   b7b76:	f803 1b01 	strb.w	r1, [r3], #1
   b7b7a:	e7f9      	b.n	b7b70 <memset+0x4>

000b7b7c <srand>:
   b7b7c:	b538      	push	{r3, r4, r5, lr}
   b7b7e:	4b10      	ldr	r3, [pc, #64]	; (b7bc0 <srand+0x44>)
   b7b80:	681d      	ldr	r5, [r3, #0]
   b7b82:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7b84:	4604      	mov	r4, r0
   b7b86:	b9b3      	cbnz	r3, b7bb6 <srand+0x3a>
   b7b88:	2018      	movs	r0, #24
   b7b8a:	f7fe fba3 	bl	b62d4 <malloc>
   b7b8e:	4602      	mov	r2, r0
   b7b90:	63a8      	str	r0, [r5, #56]	; 0x38
   b7b92:	b920      	cbnz	r0, b7b9e <srand+0x22>
   b7b94:	4b0b      	ldr	r3, [pc, #44]	; (b7bc4 <srand+0x48>)
   b7b96:	480c      	ldr	r0, [pc, #48]	; (b7bc8 <srand+0x4c>)
   b7b98:	2142      	movs	r1, #66	; 0x42
   b7b9a:	f7fe fbcb 	bl	b6334 <__assert_func>
   b7b9e:	490b      	ldr	r1, [pc, #44]	; (b7bcc <srand+0x50>)
   b7ba0:	4b0b      	ldr	r3, [pc, #44]	; (b7bd0 <srand+0x54>)
   b7ba2:	e9c0 1300 	strd	r1, r3, [r0]
   b7ba6:	4b0b      	ldr	r3, [pc, #44]	; (b7bd4 <srand+0x58>)
   b7ba8:	6083      	str	r3, [r0, #8]
   b7baa:	230b      	movs	r3, #11
   b7bac:	8183      	strh	r3, [r0, #12]
   b7bae:	2100      	movs	r1, #0
   b7bb0:	2001      	movs	r0, #1
   b7bb2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7bb6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7bb8:	2200      	movs	r2, #0
   b7bba:	611c      	str	r4, [r3, #16]
   b7bbc:	615a      	str	r2, [r3, #20]
   b7bbe:	bd38      	pop	{r3, r4, r5, pc}
   b7bc0:	2003e488 	.word	0x2003e488
   b7bc4:	000b8a89 	.word	0x000b8a89
   b7bc8:	000b8aa0 	.word	0x000b8aa0
   b7bcc:	abcd330e 	.word	0xabcd330e
   b7bd0:	e66d1234 	.word	0xe66d1234
   b7bd4:	0005deec 	.word	0x0005deec

000b7bd8 <strcmp>:
   b7bd8:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7bdc:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7be0:	2a01      	cmp	r2, #1
   b7be2:	bf28      	it	cs
   b7be4:	429a      	cmpcs	r2, r3
   b7be6:	d0f7      	beq.n	b7bd8 <strcmp>
   b7be8:	1ad0      	subs	r0, r2, r3
   b7bea:	4770      	bx	lr

000b7bec <strcpy>:
   b7bec:	4603      	mov	r3, r0
   b7bee:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7bf2:	f803 2b01 	strb.w	r2, [r3], #1
   b7bf6:	2a00      	cmp	r2, #0
   b7bf8:	d1f9      	bne.n	b7bee <strcpy+0x2>
   b7bfa:	4770      	bx	lr

000b7bfc <strlen>:
   b7bfc:	4603      	mov	r3, r0
   b7bfe:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7c02:	2a00      	cmp	r2, #0
   b7c04:	d1fb      	bne.n	b7bfe <strlen+0x2>
   b7c06:	1a18      	subs	r0, r3, r0
   b7c08:	3801      	subs	r0, #1
   b7c0a:	4770      	bx	lr

000b7c0c <__register_exitproc>:
   b7c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7c10:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7ccc <__register_exitproc+0xc0>
   b7c14:	4606      	mov	r6, r0
   b7c16:	f8d8 0000 	ldr.w	r0, [r8]
   b7c1a:	461f      	mov	r7, r3
   b7c1c:	460d      	mov	r5, r1
   b7c1e:	4691      	mov	r9, r2
   b7c20:	f000 f856 	bl	b7cd0 <__retarget_lock_acquire_recursive>
   b7c24:	4b25      	ldr	r3, [pc, #148]	; (b7cbc <__register_exitproc+0xb0>)
   b7c26:	681c      	ldr	r4, [r3, #0]
   b7c28:	b934      	cbnz	r4, b7c38 <__register_exitproc+0x2c>
   b7c2a:	4c25      	ldr	r4, [pc, #148]	; (b7cc0 <__register_exitproc+0xb4>)
   b7c2c:	601c      	str	r4, [r3, #0]
   b7c2e:	4b25      	ldr	r3, [pc, #148]	; (b7cc4 <__register_exitproc+0xb8>)
   b7c30:	b113      	cbz	r3, b7c38 <__register_exitproc+0x2c>
   b7c32:	681b      	ldr	r3, [r3, #0]
   b7c34:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7c38:	6863      	ldr	r3, [r4, #4]
   b7c3a:	2b1f      	cmp	r3, #31
   b7c3c:	dd07      	ble.n	b7c4e <__register_exitproc+0x42>
   b7c3e:	f8d8 0000 	ldr.w	r0, [r8]
   b7c42:	f000 f847 	bl	b7cd4 <__retarget_lock_release_recursive>
   b7c46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7c4e:	b34e      	cbz	r6, b7ca4 <__register_exitproc+0x98>
   b7c50:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7c54:	b988      	cbnz	r0, b7c7a <__register_exitproc+0x6e>
   b7c56:	4b1c      	ldr	r3, [pc, #112]	; (b7cc8 <__register_exitproc+0xbc>)
   b7c58:	b923      	cbnz	r3, b7c64 <__register_exitproc+0x58>
   b7c5a:	f8d8 0000 	ldr.w	r0, [r8]
   b7c5e:	f000 f838 	bl	b7cd2 <__retarget_lock_release>
   b7c62:	e7f0      	b.n	b7c46 <__register_exitproc+0x3a>
   b7c64:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7c68:	f7fe fb34 	bl	b62d4 <malloc>
   b7c6c:	2800      	cmp	r0, #0
   b7c6e:	d0f4      	beq.n	b7c5a <__register_exitproc+0x4e>
   b7c70:	2300      	movs	r3, #0
   b7c72:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7c76:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7c7a:	6863      	ldr	r3, [r4, #4]
   b7c7c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7c80:	2201      	movs	r2, #1
   b7c82:	409a      	lsls	r2, r3
   b7c84:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7c88:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7c8c:	4313      	orrs	r3, r2
   b7c8e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7c92:	2e02      	cmp	r6, #2
   b7c94:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7c98:	bf02      	ittt	eq
   b7c9a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7c9e:	4313      	orreq	r3, r2
   b7ca0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7ca4:	6863      	ldr	r3, [r4, #4]
   b7ca6:	f8d8 0000 	ldr.w	r0, [r8]
   b7caa:	1c5a      	adds	r2, r3, #1
   b7cac:	3302      	adds	r3, #2
   b7cae:	6062      	str	r2, [r4, #4]
   b7cb0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7cb4:	f000 f80e 	bl	b7cd4 <__retarget_lock_release_recursive>
   b7cb8:	2000      	movs	r0, #0
   b7cba:	e7c6      	b.n	b7c4a <__register_exitproc+0x3e>
   b7cbc:	2003e7e8 	.word	0x2003e7e8
   b7cc0:	2003e75c 	.word	0x2003e75c
   b7cc4:	00000000 	.word	0x00000000
   b7cc8:	000b62d5 	.word	0x000b62d5
   b7ccc:	2003e4ec 	.word	0x2003e4ec

000b7cd0 <__retarget_lock_acquire_recursive>:
   b7cd0:	4770      	bx	lr

000b7cd2 <__retarget_lock_release>:
   b7cd2:	4770      	bx	lr

000b7cd4 <__retarget_lock_release_recursive>:
   b7cd4:	4770      	bx	lr

000b7cd6 <link_code_end>:
	...

000b7cd8 <dynalib_user>:
   b7cd8:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b7ce8:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b7cf8:	7620 7269 7574 6c61 4100 7373 7265 6974      virtual.Asserti
   b7d08:	6e6f 6146 6c69 7275 2065 702a 705f 6e69     onFailure *p_pin
   b7d18:	3c20 2820 3233 2b20 3120 2936 4e00 206f      < (32 + 16).No 
   b7d28:	6843 6e61 6567 2d20 4320 6e61 6563 6c6c     Change - Cancell
   b7d38:	6e69 2067 4d43 0a44 7b00 6f22 226e 743a     ing CMD..{"on":t
   b7d48:	7572 2c65 7322 7461 3a22 2c00 6222 6972     rue,"sat":.,"bri
   b7d58:	3a22 2c00 6822 6575 3a22 7b00 6f22 226e     ":.,"hue":.{"on"
   b7d68:	663a 6c61 6573 007d 6553 646e 6e69 2067     :false}.Sending 
   b7d78:	6f43 6d6d 6e61 2064 6f74 4820 6575 5000     Command to Hue.P
   b7d88:	5455 2f20 7061 2f69 2f00 696c 6867 7374     UT /api/./lights
   b7d98:	002f 732f 6174 6574 4820 5454 2f50 2e31     /./state HTTP/1.
   b7da8:	0031 6f48 7473 203a 4300 6e6f 6574 746e     1.Host: .Content
   b7db8:	4c2d 6e65 7467 3a68 0020 6f43 746e 6e65     -Length: .Conten
   b7dc8:	2d74 7954 6570 203a 6574 7478 702f 616c     t-Type: text/pla
   b7dd8:	6e69 633b 6168 7372 7465 553d 4654 382d     in;charset=UTF-8
   b7de8:	4600 6f72 206d 7548 0065 7753 7469 6863     .From Hue.Switch
   b7df8:	4e4f 2520 2069 000a 3f3c 6d78 206c 6576     ON %i ..<?xml ve
   b7e08:	7372 6f69 3d6e 3122 302e 2022 6e65 6f63     rsion="1.0" enco
   b7e18:	6964 676e 223d 7475 2d66 2238 3e3f 733c     ding="utf-8"?><s
   b7e28:	453a 766e 6c65 706f 2065 6d78 6e6c 3a73     :Envelope xmlns:
   b7e38:	3d73 6822 7474 3a70 2f2f 6373 6568 616d     s="http://schema
   b7e48:	2e73 6d78 736c 616f 2e70 726f 2f67 6f73     s.xmlsoap.org/so
   b7e58:	7061 652f 766e 6c65 706f 2f65 2022 3a73     ap/envelope/" s:
   b7e68:	6e65 6f63 6964 676e 7453 6c79 3d65 6822     encodingStyle="h
   b7e78:	7474 3a70 2f2f 6373 6568 616d 2e73 6d78     ttp://schemas.xm
   b7e88:	736c 616f 2e70 726f 2f67 6f73 7061 652f     lsoap.org/soap/e
   b7e98:	636e 646f 6e69 2f67 3e22 733c 423a 646f     ncoding/"><s:Bod
   b7ea8:	3e79 753c 533a 7465 6942 616e 7972 7453     y><u:SetBinarySt
   b7eb8:	7461 2065 6d78 6e6c 3a73 3d75 7522 6e72     ate xmlns:u="urn
   b7ec8:	423a 6c65 696b 3a6e 6573 7672 6369 3a65     :Belkin:service:
   b7ed8:	6162 6973 6563 6576 746e 313a 3e22 423c     basicevent:1"><B
   b7ee8:	6e69 7261 5379 6174 6574 313e 2f3c 6942     inaryState>1</Bi
   b7ef8:	616e 7972 7453 7461 3e65 2f3c 3a75 6553     naryState></u:Se
   b7f08:	4274 6e69 7261 5379 6174 6574 3c3e 732f     tBinaryState></s
   b7f18:	423a 646f 3e79 2f3c 3a73 6e45 6576 6f6c     :Body></s:Envelo
   b7f28:	6570 003e 4f50 5453 2f20 7075 706e 632f     pe>.POST /upnp/c
   b7f38:	6e6f 7274 6c6f 622f 7361 6369 7665 6e65     ontrol/basiceven
   b7f48:	3174 4820 5454 2f50 2e31 0031 6f43 746e     t1 HTTP/1.1.Cont
   b7f58:	6e65 2d74 7954 6570 203a 6574 7478 782f     ent-Type: text/x
   b7f68:	6c6d 203b 6863 7261 6573 3d74 7475 2d66     ml; charset=utf-
   b7f78:	0038 4f53 5041 4341 4954 4e4f 203a 7522     8.SOAPACTION: "u
   b7f88:	6e72 423a 6c65 696b 3a6e 6573 7672 6369     rn:Belkin:servic
   b7f98:	3a65 6162 6973 6563 6576 746e 313a 5323     e:basicevent:1#S
   b7fa8:	7465 6942 616e 7972 7453 7461 2265 4300     etBinaryState".C
   b7fb8:	6e6f 656e 7463 6f69 3a6e 6b20 6565 2d70     onnection: keep-
   b7fc8:	6c61 7669 0065 7773 7469 6863 464f 2046     alive.switchOFF 
   b7fd8:	6925 0a20 3c00 783f 6c6d 7620 7265 6973     %i ..<?xml versi
   b7fe8:	6e6f 223d 2e31 2230 6520 636e 646f 6e69     on="1.0" encodin
   b7ff8:	3d67 7522 6674 382d 3f22 3c3e 3a73 6e45     g="utf-8"?><s:En
   b8008:	6576 6f6c 6570 7820 6c6d 736e 733a 223d     velope xmlns:s="
   b8018:	7468 7074 2f3a 732f 6863 6d65 7361 782e     http://schemas.x
   b8028:	6c6d 6f73 7061 6f2e 6772 732f 616f 2f70     mlsoap.org/soap/
   b8038:	6e65 6576 6f6c 6570 222f 7320 653a 636e     envelope/" s:enc
   b8048:	646f 6e69 5367 7974 656c 223d 7468 7074     odingStyle="http
   b8058:	2f3a 732f 6863 6d65 7361 782e 6c6d 6f73     ://schemas.xmlso
   b8068:	7061 6f2e 6772 732f 616f 2f70 6e65 6f63     ap.org/soap/enco
   b8078:	6964 676e 222f 3c3e 3a73 6f42 7964 3c3e     ding/"><s:Body><
   b8088:	3a75 6553 4274 6e69 7261 5379 6174 6574     u:SetBinaryState
   b8098:	7820 6c6d 736e 753a 223d 7275 3a6e 6542      xmlns:u="urn:Be
   b80a8:	6b6c 6e69 733a 7265 6976 6563 623a 7361     lkin:service:bas
   b80b8:	6369 7665 6e65 3a74 2231 3c3e 6942 616e     icevent:1"><Bina
   b80c8:	7972 7453 7461 3e65 3c30 422f 6e69 7261     ryState>0</Binar
   b80d8:	5379 6174 6574 3c3e 752f 533a 7465 6942     yState></u:SetBi
   b80e8:	616e 7972 7453 7461 3e65 2f3c 3a73 6f42     naryState></s:Bo
   b80f8:	7964 3c3e 732f 453a 766e 6c65 706f 3e65     dy></s:Envelope>
   b8108:	4900 546f 654e 7774 726f 006b 002c 0a0a     .IoTNetwork.,...
   b8118:	2500 0063 4548 4c4c 204f 4c20 564f 0a45     .%c.HELLO  LOVE.
   b8128:	005d 7562 7474 6e6f 3420 6920 2073 7270     ].button 4 is pr
   b8138:	7365 6573 0d64 4100 5455 004f 4857 5441     essed..AUTO.WHAT
   b8148:	4420 204f 0a55 5720 4e41 0054 7542 7474      DO U. WANT.Butt
   b8158:	6e6f 2073 7261 2065 6c63 6369 456b 0d44     ons are clickED.
   b8168:	5300 5548 2054 5245 4420 574f 0a4e 7300     .SHUT ER DOWN..s
   b8178:	7465 6974 676e 6320 6c6f 726f 6f20 2066     etting color of 
   b8188:	7562 626c 2520 2069 6f74 6320 6c6f 726f     bulb %i to color
   b8198:	2520 3630 0a69 3100 3239 312e 3836 312e      %06i..192.168.1
   b81a8:	332e 0030 3931 2e32 3631 2e38 2e31 3133     .30.192.168.1.31
   b81b8:	3100 3239 312e 3836 312e 332e 0032 3931     .192.168.1.32.19
   b81c8:	2e32 3631 2e38 2e31 3333 3100 3239 312e     2.168.1.33.192.1
   b81d8:	3836 312e 332e 0034                         68.1.34.

000b81e0 <_ZL11hueUsername>:
   b81e0:	514d 5a6c 697a 4f52 5730 6961 4d35 4d73     MQlZziRO0Wai5MsM
   b81f0:	6c48 386c 4178 4155 7151 3877 5135 7272     Hll8xAUAQqw85Qrr
   b8200:	7438 334d 4637 5433                          8tM37F3T.

000b8209 <_ZL8hueHubIP>:
   b8209:	3931 2e32 3631 2e38 2e31 0035               192.168.1.5.

000b8215 <_ZL4font>:
   b8215:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b8225:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b8235:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b8245:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b8255:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b8265:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b8275:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b8285:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b8295:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b82a5:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b82b5:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b82c5:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b82d5:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b82e5:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b82f5:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b8305:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b8315:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b8325:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b8335:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b8345:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b8355:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b8365:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b8375:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b8385:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b8395:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b83a5:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b83b5:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b83c5:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b83d5:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b83e5:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b83f5:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b8405:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b8415:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b8425:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b8435:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b8445:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b8455:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b8465:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b8475:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b8485:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b8495:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b84a5:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   b84b5:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b84c5:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b84d5:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   b84e5:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b84f5:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   b8505:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   b8515:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   b8525:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b8535:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b8545:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b8555:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b8565:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b8575:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b8585:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   b8595:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   b85a5:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   b85b5:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   b85c5:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   b85d5:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   b85e5:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   b85f5:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   b8605:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   b8615:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   b8625:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   b8635:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   b8645:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   b8655:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   b8665:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   b8675:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   b8685:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   b8695:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   b86a5:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   b86b5:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   b86c5:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   b86d5:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   b86e5:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   b86f5:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   b8705:	0012 3c3c 3c3c 0000 0000                     ..<<<<.....

000b8710 <_ZTV12Adafruit_GFX>:
	...
   b8720:	5145 000b 6825 000b 40a1 000b 4e5d 000b     EQ..%h...@..]N..
   b8730:	4f83 000b 4f9f 000b 4f1b 000b 4fb9 000b     .O...O...O...O..
   b8740:	4fef 000b 500b 000b                         .O...P..

000b8748 <_ZTV16Adafruit_SSD1306>:
	...
   b8750:	54b5 000b 5545 000b 5145 000b 6825 000b     .T..EU..EQ..%h..
   b8760:	54b9 000b 4e5d 000b 5341 000b 51d1 000b     .T..]N..AS...Q..
   b8770:	4f1b 000b 4fb9 000b 4fef 000b 500b 000b     .O...O...O...P..

000b8780 <CSWTCH.88>:
   b8780:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   b8790:	0050 0000                                   P...

000b8794 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b879c <_ZTVN5spark13EthernetClassE>:
	...
   b87a4:	63f3 000b 63e9 000b 63df 000b 63d5 000b     .c...c...c...c..
   b87b4:	63c9 000b 63bd 000b 6701 000b 6709 000b     .c...c...g...g..
   b87c4:	63b1 000b 63a9 000b 639f 000b 6395 000b     .c...c...c...c..
   b87d4:	6739 000b                                   9g..

000b87d8 <_ZTV7TwoWire>:
	...
   b87e0:	6411 000b 645b 000b 6433 000b 6413 000b     .d..[d..3d...d..
   b87f0:	643b 000b 6443 000b 644b 000b 6453 000b     ;d..Cd..Kd..Sd..

000b8800 <_ZTV9IPAddress>:
	...
   b8808:	65a5 000b 6595 000b 6597 000b 7061 0070     .e...e...e..app.

000b8818 <_ZTVN5spark12NetworkClassE>:
	...
   b8820:	66c1 000b 66cb 000b 66d5 000b 66df 000b     .f...f...f...f..
   b8830:	66e9 000b 66f5 000b 6701 000b 6709 000b     .f...f...g...g..
   b8840:	6711 000b 671d 000b 6725 000b 672f 000b     .g...g..%g../g..
   b8850:	6739 000b                                   9g..

000b8854 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b8854:	0800 1810 2820 3830 6977 6972 676e 7200     .... (08wiring.r
   b8864:	6365 2076 7265 6f72 2072 203d 6425 0000     ecv error = %d..

000b8874 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b887c:	6dbd 000b 6de1 000b 72cb 000b 6def 000b     .m...m...r...m..
   b888c:	6dc1 000b                                   .m..

000b8890 <_ZTV9TCPClient>:
	...
   b8898:	4349 000b 437d 000b 6d39 000b 6d53 000b     IC..}C..9m..Sm..
   b88a8:	7161 000b 6d7d 000b 6fd7 000b 6db1 000b     aq..}m...o...m..
   b88b8:	7069 000b 6ea9 000b 7005 000b 7215 000b     ip...n...p...r..
   b88c8:	6fa5 000b 6db3 000b 6d65 000b 6df5 000b     .o...m..em...m..
   b88d8:	6e89 000b 5925 252d 2d6d 6425 2554 3a48     .n..%Y-%m-%dT%H:
   b88e8:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b88f8 <_ZTV11USARTSerial>:
	...
   b8900:	72e5 000b 7351 000b 7329 000b 6825 000b     .r..Qs..)s..%h..
   b8910:	72f9 000b 7315 000b 7307 000b 7323 000b     .r...s...s..#s..
   b8920:	72e7 000b 72eb 000b                         .r...r..

000b8928 <_ZTV9USBSerial>:
	...
   b8930:	738f 000b 73f7 000b 73cd 000b 6825 000b     .s...s...s..%h..
   b8940:	73bf 000b 7391 000b 73a1 000b 73f1 000b     .s...s...s...s..
   b8950:	73b1 000b 7389 000b                         .s...s..

000b8958 <_ZTVN5spark9WiFiClassE>:
	...
   b8960:	74ef 000b 74e5 000b 74db 000b 7491 000b     .t...t...t...t..
   b8970:	74cf 000b 74c3 000b 6701 000b 6709 000b     .t...t...g...g..
   b8980:	74b7 000b 74af 000b 74a5 000b 749b 000b     .t...t...t...t..
   b8990:	6739 000b                                   9g..

000b8994 <_ZSt7nothrow>:
	...

000b8995 <_ZTSSt19_Sp_make_shared_tag>:
   b8995:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b89a5:	6572 5f64 6174 0067 0000                     red_tag....

000b89b0 <_ZTISt19_Sp_make_shared_tag>:
   b89b0:	89f0 000b 8995 000b                         ........

000b89b8 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b89b8:	8a50 000b 89c4 000b 8a74 000b               P.......t...

000b89c4 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b89c4:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b89d4:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b89e4:	0045 0000                                   E...

000b89e8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b89e8:	0000 0000 89b8 000b 796d 000b 7981 000b     ........my...y..
   b89f8:	7b15 000b 7b15 000b 79eb 000b 792d 000b     .{...{...y..-y..
   b8a08:	79d3 000b 7995 000b 795f 000b               .y...y.._y..

000b8a14 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b8a14:	8a50 000b 8a20 000b 89b8 000b               P... .......

000b8a20 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b8a20:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b8a30:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b8a40:	666e 456f 0000 0000                         nfoE....

000b8a48 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b8a48:	0000 0000 8a14 000b 7a15 000b 7a29 000b     .........z..)z..
   b8a58:	7b15 000b 7b15 000b 79eb 000b 792d 000b     .{...{...y..-y..
   b8a68:	7ae9 000b 7a75 000b 7a3d 000b               .z..uz..=z..

000b8a74 <_ZTISt9type_info>:
   b8a74:	89f0 000b 8a7c 000b                         ....|...

000b8a7c <_ZTSSt9type_info>:
   b8a7c:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b8a8c:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b8a9c:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   b8aac:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   b8abc:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   b8acc:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   b8adc:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   b8aec:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000b8af9 <link_const_variable_data_end>:
   b8af9:	00          	.byte	0x00
	...

000b8afc <link_constructors_location>:
   b8afc:	000b4d05 	.word	0x000b4d05
   b8b00:	000b5dad 	.word	0x000b5dad
   b8b04:	000b6385 	.word	0x000b6385
   b8b08:	000b63fd 	.word	0x000b63fd
   b8b0c:	000b66b1 	.word	0x000b66b1
   b8b10:	000b6811 	.word	0x000b6811
   b8b14:	000b694d 	.word	0x000b694d
   b8b18:	000b6d15 	.word	0x000b6d15
   b8b1c:	000b72d1 	.word	0x000b72d1
   b8b20:	000b74f9 	.word	0x000b74f9

000b8b24 <link_constructors_end>:
	...
