
/Users/owenschwab/Documents/IoT/smartRoom/smartRoom_v01/target/4.0.2/argon/smartRoom_v01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000031e4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7200  000b7200  00007200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b7224  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000009c  2003e490  000b7228  0001e490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002c4  2003e52c  2003e52c  0002e52c  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b72c4  000b72c4  000272c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b72ec  000b72ec  000272ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0012ae0b  00000000  00000000  000272f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00015254  00000000  00000000  001520fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003d9ef  00000000  00000000  0016734f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003198  00000000  00000000  001a4d3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000ade0  00000000  00000000  001a7ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d41d  00000000  00000000  001b2cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00046f29  00000000  00000000  001f00d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013a16e  00000000  00000000  00236ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008b5c  00000000  00000000  0037116c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f002 fbed 	bl	b680c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f002 fbf5 	bl	b6828 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e490 	.word	0x2003e490
   b4048:	000b7228 	.word	0x000b7228
   b404c:	2003e52c 	.word	0x2003e52c
   b4050:	2003e52c 	.word	0x2003e52c
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f002 f9a3 	bl	b63a8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b71cc 	.word	0x000b71cc
   b407c:	000b71f4 	.word	0x000b71f4

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 bc34 	b.w	b48ec <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 fcb7 	bl	b49f8 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f002 b943 	b.w	b6318 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f001 b833 	b.w	b50fc <malloc>

000b4096 <_Znaj>:
   b4096:	f001 b831 	b.w	b50fc <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f001 b837 	b.w	b510c <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr
	...

000b40b0 <nrf_gpio_pin_read>:
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b40b0:	282f      	cmp	r0, #47	; 0x2f
    }
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
   b40b2:	b510      	push	{r4, lr}
   b40b4:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b40b6:	d90d      	bls.n	b40d4 <nrf_gpio_pin_read+0x24>
   b40b8:	4a09      	ldr	r2, [pc, #36]	; (b40e0 <nrf_gpio_pin_read+0x30>)
   b40ba:	490a      	ldr	r1, [pc, #40]	; (b40e4 <nrf_gpio_pin_read+0x34>)
   b40bc:	200a      	movs	r0, #10
   b40be:	f000 ff71 	bl	b4fa4 <panic_>
        return NRF_P1;
   b40c2:	4b09      	ldr	r3, [pc, #36]	; (b40e8 <nrf_gpio_pin_read+0x38>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b40c4:	f004 041f 	and.w	r4, r4, #31
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   b40c8:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   b40cc:	40e0      	lsrs	r0, r4
}
   b40ce:	f000 0001 	and.w	r0, r0, #1
   b40d2:	bd10      	pop	{r4, pc}
    if (*p_pin < P0_PIN_NUM)
   b40d4:	281f      	cmp	r0, #31
   b40d6:	d8f4      	bhi.n	b40c2 <nrf_gpio_pin_read+0x12>
        return NRF_P0;
   b40d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   b40dc:	e7f4      	b.n	b40c8 <nrf_gpio_pin_read+0x18>
   b40de:	bf00      	nop
   b40e0:	000b4c75 	.word	0x000b4c75
   b40e4:	000b69a8 	.word	0x000b69a8
   b40e8:	50000300 	.word	0x50000300

000b40ec <_ZN7Encoder16interruptHandlerEv>:
		state = (s >> 2);
	}
*/

private:
	void interruptHandler() {
   b40ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#ifdef	__cplusplus
extern "C" {
#endif

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b40f0:	f8df 812c 	ldr.w	r8, [pc, #300]	; b4220 <_ZN7Encoder16interruptHandlerEv+0x134>
		uint8_t p1val = DIRECT_PIN_READ(pin1_register, pin1_bitmask);
   b40f4:	6887      	ldr	r7, [r0, #8]
   b40f6:	f898 3000 	ldrb.w	r3, [r8]
   b40fa:	4d48      	ldr	r5, [pc, #288]	; (b421c <_ZN7Encoder16interruptHandlerEv+0x130>)
   b40fc:	f3bf 8f5b 	dmb	ish
   b4100:	f013 0f01 	tst.w	r3, #1
	void interruptHandler() {
   b4104:	4604      	mov	r4, r0
   b4106:	d109      	bne.n	b411c <_ZN7Encoder16interruptHandlerEv+0x30>
   b4108:	4640      	mov	r0, r8
   b410a:	f7ff ffc8 	bl	b409e <__cxa_guard_acquire>
   b410e:	b128      	cbz	r0, b411c <_ZN7Encoder16interruptHandlerEv+0x30>
   b4110:	f000 fdc8 	bl	b4ca4 <HAL_Pin_Map>
   b4114:	6028      	str	r0, [r5, #0]
   b4116:	4640      	mov	r0, r8
   b4118:	f7ff ffc6 	bl	b40a8 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b411c:	b2bf      	uxth	r7, r7
   b411e:	682b      	ldr	r3, [r5, #0]
   b4120:	013f      	lsls	r7, r7, #4
   b4122:	5dde      	ldrb	r6, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4124:	f898 3000 	ldrb.w	r3, [r8]
   b4128:	f3bf 8f5b 	dmb	ish
   b412c:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b412e:	ea4f 1946 	mov.w	r9, r6, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4132:	d409      	bmi.n	b4148 <_ZN7Encoder16interruptHandlerEv+0x5c>
   b4134:	483a      	ldr	r0, [pc, #232]	; (b4220 <_ZN7Encoder16interruptHandlerEv+0x134>)
   b4136:	f7ff ffb2 	bl	b409e <__cxa_guard_acquire>
   b413a:	b128      	cbz	r0, b4148 <_ZN7Encoder16interruptHandlerEv+0x5c>
   b413c:	f000 fdb2 	bl	b4ca4 <HAL_Pin_Map>
   b4140:	6028      	str	r0, [r5, #0]
   b4142:	4837      	ldr	r0, [pc, #220]	; (b4220 <_ZN7Encoder16interruptHandlerEv+0x134>)
   b4144:	f7ff ffb0 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4148:	682b      	ldr	r3, [r5, #0]
   b414a:	443b      	add	r3, r7
   b414c:	785e      	ldrb	r6, [r3, #1]
   b414e:	f006 061f 	and.w	r6, r6, #31
   b4152:	ea46 0609 	orr.w	r6, r6, r9
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   b4156:	4630      	mov	r0, r6
   b4158:	f7ff ffaa 	bl	b40b0 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   b415c:	4630      	mov	r0, r6
   b415e:	f7ff ffa7 	bl	b40b0 <nrf_gpio_pin_read>
		uint8_t p2val = DIRECT_PIN_READ(pin2_register, pin2_bitmask);
   b4162:	68e7      	ldr	r7, [r4, #12]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4164:	f898 3000 	ldrb.w	r3, [r8]
   b4168:	f3bf 8f5b 	dmb	ish
   b416c:	07da      	lsls	r2, r3, #31
		uint8_t p1val = DIRECT_PIN_READ(pin1_register, pin1_bitmask);
   b416e:	b2c6      	uxtb	r6, r0
   b4170:	d409      	bmi.n	b4186 <_ZN7Encoder16interruptHandlerEv+0x9a>
   b4172:	482b      	ldr	r0, [pc, #172]	; (b4220 <_ZN7Encoder16interruptHandlerEv+0x134>)
   b4174:	f7ff ff93 	bl	b409e <__cxa_guard_acquire>
   b4178:	b128      	cbz	r0, b4186 <_ZN7Encoder16interruptHandlerEv+0x9a>
   b417a:	f000 fd93 	bl	b4ca4 <HAL_Pin_Map>
   b417e:	6028      	str	r0, [r5, #0]
   b4180:	4827      	ldr	r0, [pc, #156]	; (b4220 <_ZN7Encoder16interruptHandlerEv+0x134>)
   b4182:	f7ff ff91 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4186:	b2bf      	uxth	r7, r7
   b4188:	682b      	ldr	r3, [r5, #0]
   b418a:	013f      	lsls	r7, r7, #4
   b418c:	f813 9007 	ldrb.w	r9, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4190:	f898 3000 	ldrb.w	r3, [r8]
   b4194:	f3bf 8f5b 	dmb	ish
   b4198:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b419a:	ea4f 1949 	mov.w	r9, r9, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b419e:	d409      	bmi.n	b41b4 <_ZN7Encoder16interruptHandlerEv+0xc8>
   b41a0:	481f      	ldr	r0, [pc, #124]	; (b4220 <_ZN7Encoder16interruptHandlerEv+0x134>)
   b41a2:	f7ff ff7c 	bl	b409e <__cxa_guard_acquire>
   b41a6:	b128      	cbz	r0, b41b4 <_ZN7Encoder16interruptHandlerEv+0xc8>
   b41a8:	f000 fd7c 	bl	b4ca4 <HAL_Pin_Map>
   b41ac:	6028      	str	r0, [r5, #0]
   b41ae:	481c      	ldr	r0, [pc, #112]	; (b4220 <_ZN7Encoder16interruptHandlerEv+0x134>)
   b41b0:	f7ff ff7a 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b41b4:	682b      	ldr	r3, [r5, #0]
   b41b6:	441f      	add	r7, r3
   b41b8:	787d      	ldrb	r5, [r7, #1]
   b41ba:	f005 051f 	and.w	r5, r5, #31
   b41be:	ea45 0509 	orr.w	r5, r5, r9
    (void)nrf_gpio_pin_read(nrf_pin);
   b41c2:	4628      	mov	r0, r5
   b41c4:	f7ff ff74 	bl	b40b0 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   b41c8:	4628      	mov	r0, r5
   b41ca:	f7ff ff71 	bl	b40b0 <nrf_gpio_pin_read>
		uint8_t newState = state & 3;
   b41ce:	7c23      	ldrb	r3, [r4, #16]
		uint8_t p2val = DIRECT_PIN_READ(pin2_register, pin2_bitmask);
   b41d0:	b2c0      	uxtb	r0, r0
		uint8_t newState = state & 3;
   b41d2:	f003 0303 	and.w	r3, r3, #3
		if (p1val) newState |= 4;
   b41d6:	b10e      	cbz	r6, b41dc <_ZN7Encoder16interruptHandlerEv+0xf0>
   b41d8:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) newState |= 8;
   b41dc:	b108      	cbz	r0, b41e2 <_ZN7Encoder16interruptHandlerEv+0xf6>
   b41de:	f043 0308 	orr.w	r3, r3, #8
		state = (newState >> 2);
   b41e2:	089a      	lsrs	r2, r3, #2
   b41e4:	3b01      	subs	r3, #1
   b41e6:	7422      	strb	r2, [r4, #16]
		switch (newState) {
   b41e8:	2b0d      	cmp	r3, #13
   b41ea:	d80b      	bhi.n	b4204 <_ZN7Encoder16interruptHandlerEv+0x118>
   b41ec:	e8df f003 	tbb	[pc, r3]
   b41f0:	0c0f0c07 	.word	0x0c0f0c07
   b41f4:	0707120a 	.word	0x0707120a
   b41f8:	0f0c0a12 	.word	0x0f0c0a12
   b41fc:	070c      	.short	0x070c
			case 1: case 7: case 8: case 14:
				position++;
   b41fe:	6963      	ldr	r3, [r4, #20]
   b4200:	3301      	adds	r3, #1
				return;
			case 3: case 12:
				position += 2;
				return;
			case 6: case 9:
				position -= 2;
   b4202:	6163      	str	r3, [r4, #20]
				return;
		}
	}
   b4204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				position--;
   b4208:	6963      	ldr	r3, [r4, #20]
   b420a:	3b01      	subs	r3, #1
   b420c:	e7f9      	b.n	b4202 <_ZN7Encoder16interruptHandlerEv+0x116>
				position += 2;
   b420e:	6963      	ldr	r3, [r4, #20]
   b4210:	3302      	adds	r3, #2
   b4212:	e7f6      	b.n	b4202 <_ZN7Encoder16interruptHandlerEv+0x116>
				position -= 2;
   b4214:	6963      	ldr	r3, [r4, #20]
   b4216:	3b02      	subs	r3, #2
   b4218:	e7f3      	b.n	b4202 <_ZN7Encoder16interruptHandlerEv+0x116>
   b421a:	bf00      	nop
   b421c:	2003e530 	.word	0x2003e530
   b4220:	2003e52c 	.word	0x2003e52c

000b4224 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b4224:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b4226:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b4228:	4606      	mov	r6, r0
   b422a:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b422c:	da0b      	bge.n	b4246 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b422e:	2a0a      	cmp	r2, #10
   b4230:	d109      	bne.n	b4246 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b4232:	212d      	movs	r1, #45	; 0x2d
   b4234:	f001 fa22 	bl	b567c <_ZN5Print5printEc>
            val = -n;
   b4238:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b423a:	b2ea      	uxtb	r2, r5
   b423c:	4630      	mov	r0, r6
    }
}
   b423e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b4242:	f001 ba34 	b.w	b56ae <_ZN5Print11printNumberEmh>
            val = n;
   b4246:	4621      	mov	r1, r4
   b4248:	e7f7      	b.n	b423a <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>

000b424a <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b424a:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
   b424c:	6803      	ldr	r3, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   b424e:	685a      	ldr	r2, [r3, #4]
   b4250:	6899      	ldr	r1, [r3, #8]
   b4252:	681b      	ldr	r3, [r3, #0]
   b4254:	1054      	asrs	r4, r2, #1
   b4256:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b425a:	07d2      	lsls	r2, r2, #31
   b425c:	bf48      	it	mi
   b425e:	590a      	ldrmi	r2, [r1, r4]
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b4260:	f85d 4b04 	ldr.w	r4, [sp], #4
   b4264:	bf48      	it	mi
   b4266:	58d3      	ldrmi	r3, [r2, r3]
   b4268:	4718      	bx	r3

000b426a <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	switch (__op)
   b426a:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b426c:	b538      	push	{r3, r4, r5, lr}
   b426e:	4604      	mov	r4, r0
	switch (__op)
   b4270:	d102      	bne.n	b4278 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b4272:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b4274:	6023      	str	r3, [r4, #0]
	}
   b4276:	e003      	b.n	b4280 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	  switch (__op)
   b4278:	2a02      	cmp	r2, #2
   b427a:	d003      	beq.n	b4284 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
   b427c:	2a03      	cmp	r2, #3
   b427e:	d00d      	beq.n	b429c <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
      }
   b4280:	2000      	movs	r0, #0
   b4282:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b4284:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b4286:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4288:	f7ff ff03 	bl	b4092 <_Znwj>
   b428c:	4603      	mov	r3, r0
   b428e:	2800      	cmp	r0, #0
   b4290:	d0f0      	beq.n	b4274 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
   b4292:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b4296:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b429a:	e7eb      	b.n	b4274 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b429c:	6800      	ldr	r0, [r0, #0]
   b429e:	2800      	cmp	r0, #0
   b42a0:	d0ee      	beq.n	b4280 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
   b42a2:	210c      	movs	r1, #12
   b42a4:	f7ff fef9 	bl	b409a <_ZdlPvj>
   b42a8:	e7ea      	b.n	b4280 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	...

000b42ac <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0>:
 * GPIO Interrupts
 */
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
   b42ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   b42ae:	b08d      	sub	sp, #52	; 0x34
   b42b0:	ad02      	add	r5, sp, #8
   b42b2:	e885 0006 	stmia.w	r5, {r1, r2}
   b42b6:	4606      	mov	r6, r0

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b42b8:	e895 0003 	ldmia.w	r5, {r0, r1}
   b42bc:	ac05      	add	r4, sp, #20
   b42be:	e884 0005 	stmia.w	r4, {r0, r2}
   b42c2:	461f      	mov	r7, r3
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b42c4:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b42c6:	2300      	movs	r3, #0
   b42c8:	930a      	str	r3, [sp, #40]	; 0x28
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b42ca:	f7ff fee2 	bl	b4092 <_Znwj>
   b42ce:	4602      	mov	r2, r0
   b42d0:	b120      	cbz	r0, b42dc <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0+0x30>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b42d2:	e894 0003 	ldmia.w	r4, {r0, r1}
   b42d6:	e882 0003 	stmia.w	r2, {r0, r1}
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b42da:	6097      	str	r7, [r2, #8]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   b42dc:	4b0b      	ldr	r3, [pc, #44]	; (b430c <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0+0x60>)
   b42de:	930b      	str	r3, [sp, #44]	; 0x2c
	    _M_manager = &_My_handler::_M_manager;
   b42e0:	4b0b      	ldr	r3, [pc, #44]	; (b4310 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0+0x64>)
   b42e2:	930a      	str	r3, [sp, #40]	; 0x28
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
   b42e4:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b42e8:	9208      	str	r2, [sp, #32]
   b42ea:	9300      	str	r3, [sp, #0]
   b42ec:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   b42f0:	f99d 304c 	ldrsb.w	r3, [sp, #76]	; 0x4c
   b42f4:	a908      	add	r1, sp, #32
   b42f6:	4630      	mov	r0, r6
   b42f8:	f001 f816 	bl	b5328 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>
      if (_M_manager)
   b42fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b42fe:	b11b      	cbz	r3, b4308 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0+0x5c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4300:	a908      	add	r1, sp, #32
   b4302:	2203      	movs	r2, #3
   b4304:	4608      	mov	r0, r1
   b4306:	4798      	blx	r3
}
   b4308:	b00d      	add	sp, #52	; 0x34
   b430a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b430c:	000b424b 	.word	0x000b424b
   b4310:	000b426b 	.word	0x000b426b

000b4314 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4314:	b40e      	push	{r1, r2, r3}
   b4316:	b503      	push	{r0, r1, lr}
   b4318:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b431a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b431c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4320:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4322:	f001 f9e2 	bl	b56ea <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4326:	b002      	add	sp, #8
   b4328:	f85d eb04 	ldr.w	lr, [sp], #4
   b432c:	b003      	add	sp, #12
   b432e:	4770      	bx	lr

000b4330 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b4330:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4332:	6984      	ldr	r4, [r0, #24]
   b4334:	4b0a      	ldr	r3, [pc, #40]	; (b4360 <_ZN9TCPClientD1Ev+0x30>)
   b4336:	6003      	str	r3, [r0, #0]
   b4338:	4605      	mov	r5, r0
   b433a:	b17c      	cbz	r4, b435c <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b433c:	6863      	ldr	r3, [r4, #4]
   b433e:	3b01      	subs	r3, #1
   b4340:	6063      	str	r3, [r4, #4]
   b4342:	b95b      	cbnz	r3, b435c <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b4344:	6823      	ldr	r3, [r4, #0]
   b4346:	4620      	mov	r0, r4
   b4348:	689b      	ldr	r3, [r3, #8]
   b434a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b434c:	68a3      	ldr	r3, [r4, #8]
   b434e:	3b01      	subs	r3, #1
   b4350:	60a3      	str	r3, [r4, #8]
   b4352:	b91b      	cbnz	r3, b435c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b4354:	6823      	ldr	r3, [r4, #0]
   b4356:	4620      	mov	r0, r4
   b4358:	68db      	ldr	r3, [r3, #12]
   b435a:	4798      	blx	r3
   b435c:	4628      	mov	r0, r5
   b435e:	bd38      	pop	{r3, r4, r5, pc}
   b4360:	000b6f68 	.word	0x000b6f68

000b4364 <_ZN9TCPClientD0Ev>:
   b4364:	b510      	push	{r4, lr}
   b4366:	4604      	mov	r4, r0
   b4368:	f7ff ffe2 	bl	b4330 <_ZN9TCPClientD1Ev>
   b436c:	4620      	mov	r0, r4
   b436e:	211c      	movs	r1, #28
   b4370:	f7ff fe93 	bl	b409a <_ZdlPvj>
   b4374:	4620      	mov	r0, r4
   b4376:	bd10      	pop	{r4, pc}

000b4378 <_ZN7EncoderC1Ett>:
	Encoder(pin_t pin1, pin_t pin2) {
   b4378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b437c:	460f      	mov	r7, r1
   b437e:	4604      	mov	r4, r0
   b4380:	4616      	mov	r6, r2
   b4382:	b089      	sub	sp, #36	; 0x24
		pinMode(pin1, INPUT_PULLUP);
   b4384:	2102      	movs	r1, #2
   b4386:	4638      	mov	r0, r7
   b4388:	f002 f87e 	bl	b6488 <pinMode>
		pinMode(pin2, INPUT_PULLUP);
   b438c:	2102      	movs	r1, #2
   b438e:	4630      	mov	r0, r6
   b4390:	f002 f87a 	bl	b6488 <pinMode>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4394:	f8df b158 	ldr.w	fp, [pc, #344]	; b44f0 <_ZN7EncoderC1Ett+0x178>
		pin2_bitmask = PIN_TO_BITMASK(pin2);
   b4398:	60e6      	str	r6, [r4, #12]
		pin1_register = PIN_TO_BASEREG(pin1);
   b439a:	2300      	movs	r3, #0
		pin2_register = PIN_TO_BASEREG(pin2);
   b439c:	e9c4 3701 	strd	r3, r7, [r4, #4]
		pin1_register = PIN_TO_BASEREG(pin1);
   b43a0:	6023      	str	r3, [r4, #0]
		position = 0;
   b43a2:	6163      	str	r3, [r4, #20]
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b43a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b43a8:	f000 fc64 	bl	b4c74 <HAL_Delay_Microseconds>
		if (DIRECT_PIN_READ(pin1_register, pin1_bitmask)) s |= 1;
   b43ac:	f8d4 a008 	ldr.w	sl, [r4, #8]
   b43b0:	f89b 3000 	ldrb.w	r3, [fp]
   b43b4:	4d4d      	ldr	r5, [pc, #308]	; (b44ec <_ZN7EncoderC1Ett+0x174>)
   b43b6:	f3bf 8f5b 	dmb	ish
   b43ba:	f013 0f01 	tst.w	r3, #1
   b43be:	d109      	bne.n	b43d4 <_ZN7EncoderC1Ett+0x5c>
   b43c0:	4658      	mov	r0, fp
   b43c2:	f7ff fe6c 	bl	b409e <__cxa_guard_acquire>
   b43c6:	b128      	cbz	r0, b43d4 <_ZN7EncoderC1Ett+0x5c>
   b43c8:	f000 fc6c 	bl	b4ca4 <HAL_Pin_Map>
   b43cc:	6028      	str	r0, [r5, #0]
   b43ce:	4658      	mov	r0, fp
   b43d0:	f7ff fe6a 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b43d4:	fa1f fa8a 	uxth.w	sl, sl
   b43d8:	682b      	ldr	r3, [r5, #0]
   b43da:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
   b43de:	f813 800a 	ldrb.w	r8, [r3, sl]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b43e2:	f89b 3000 	ldrb.w	r3, [fp]
   b43e6:	f3bf 8f5b 	dmb	ish
   b43ea:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b43ec:	ea4f 1948 	mov.w	r9, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b43f0:	d409      	bmi.n	b4406 <_ZN7EncoderC1Ett+0x8e>
   b43f2:	483f      	ldr	r0, [pc, #252]	; (b44f0 <_ZN7EncoderC1Ett+0x178>)
   b43f4:	f7ff fe53 	bl	b409e <__cxa_guard_acquire>
   b43f8:	b128      	cbz	r0, b4406 <_ZN7EncoderC1Ett+0x8e>
   b43fa:	f000 fc53 	bl	b4ca4 <HAL_Pin_Map>
   b43fe:	6028      	str	r0, [r5, #0]
   b4400:	483b      	ldr	r0, [pc, #236]	; (b44f0 <_ZN7EncoderC1Ett+0x178>)
   b4402:	f7ff fe51 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4406:	682b      	ldr	r3, [r5, #0]
   b4408:	4453      	add	r3, sl
   b440a:	f893 8001 	ldrb.w	r8, [r3, #1]
   b440e:	f008 081f 	and.w	r8, r8, #31
   b4412:	ea48 0809 	orr.w	r8, r8, r9
    (void)nrf_gpio_pin_read(nrf_pin);
   b4416:	4640      	mov	r0, r8
   b4418:	f7ff fe4a 	bl	b40b0 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   b441c:	4640      	mov	r0, r8
   b441e:	f7ff fe47 	bl	b40b0 <nrf_gpio_pin_read>
		if (DIRECT_PIN_READ(pin2_register, pin2_bitmask)) s |= 2;
   b4422:	f8d4 a00c 	ldr.w	sl, [r4, #12]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4426:	f89b 3000 	ldrb.w	r3, [fp]
   b442a:	f3bf 8f5b 	dmb	ish
		uint8_t s = 0;
   b442e:	f1b0 0800 	subs.w	r8, r0, #0
   b4432:	bf18      	it	ne
   b4434:	f04f 0801 	movne.w	r8, #1
   b4438:	07da      	lsls	r2, r3, #31
   b443a:	d409      	bmi.n	b4450 <_ZN7EncoderC1Ett+0xd8>
   b443c:	482c      	ldr	r0, [pc, #176]	; (b44f0 <_ZN7EncoderC1Ett+0x178>)
   b443e:	f7ff fe2e 	bl	b409e <__cxa_guard_acquire>
   b4442:	b128      	cbz	r0, b4450 <_ZN7EncoderC1Ett+0xd8>
   b4444:	f000 fc2e 	bl	b4ca4 <HAL_Pin_Map>
   b4448:	6028      	str	r0, [r5, #0]
   b444a:	4829      	ldr	r0, [pc, #164]	; (b44f0 <_ZN7EncoderC1Ett+0x178>)
   b444c:	f7ff fe2c 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4450:	fa1f fa8a 	uxth.w	sl, sl
   b4454:	682b      	ldr	r3, [r5, #0]
   b4456:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
   b445a:	f813 900a 	ldrb.w	r9, [r3, sl]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b445e:	f89b 3000 	ldrb.w	r3, [fp]
   b4462:	f3bf 8f5b 	dmb	ish
   b4466:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4468:	ea4f 1949 	mov.w	r9, r9, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b446c:	d409      	bmi.n	b4482 <_ZN7EncoderC1Ett+0x10a>
   b446e:	4820      	ldr	r0, [pc, #128]	; (b44f0 <_ZN7EncoderC1Ett+0x178>)
   b4470:	f7ff fe15 	bl	b409e <__cxa_guard_acquire>
   b4474:	b128      	cbz	r0, b4482 <_ZN7EncoderC1Ett+0x10a>
   b4476:	f000 fc15 	bl	b4ca4 <HAL_Pin_Map>
   b447a:	6028      	str	r0, [r5, #0]
   b447c:	481c      	ldr	r0, [pc, #112]	; (b44f0 <_ZN7EncoderC1Ett+0x178>)
   b447e:	f7ff fe13 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4482:	682b      	ldr	r3, [r5, #0]
   b4484:	449a      	add	sl, r3
   b4486:	f89a 5001 	ldrb.w	r5, [sl, #1]
   b448a:	f005 051f 	and.w	r5, r5, #31
   b448e:	ea45 0509 	orr.w	r5, r5, r9
    (void)nrf_gpio_pin_read(nrf_pin);
   b4492:	4628      	mov	r0, r5
   b4494:	f7ff fe0c 	bl	b40b0 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   b4498:	4628      	mov	r0, r5
   b449a:	f7ff fe09 	bl	b40b0 <nrf_gpio_pin_read>
		if (DIRECT_PIN_READ(pin2_register, pin2_bitmask)) s |= 2;
   b449e:	b108      	cbz	r0, b44a4 <_ZN7EncoderC1Ett+0x12c>
   b44a0:	f048 0802 	orr.w	r8, r8, #2
		attachInterrupt(pin1, &Encoder::interruptHandler, this, CHANGE);
   b44a4:	f8df 904c 	ldr.w	r9, [pc, #76]	; b44f4 <_ZN7EncoderC1Ett+0x17c>
		state = s;
   b44a8:	f884 8010 	strb.w	r8, [r4, #16]
		attachInterrupt(pin1, &Encoder::interruptHandler, this, CHANGE);
   b44ac:	2500      	movs	r5, #0
   b44ae:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   b44b2:	4623      	mov	r3, r4
   b44b4:	462a      	mov	r2, r5
   b44b6:	4649      	mov	r1, r9
   b44b8:	4638      	mov	r0, r7
   b44ba:	e9cd 5800 	strd	r5, r8, [sp]
   b44be:	9502      	str	r5, [sp, #8]
   b44c0:	f8cd 9010 	str.w	r9, [sp, #16]
   b44c4:	9505      	str	r5, [sp, #20]
   b44c6:	f7ff fef1 	bl	b42ac <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0>
		attachInterrupt(pin2, &Encoder::interruptHandler, this, CHANGE);
   b44ca:	e9cd 9506 	strd	r9, r5, [sp, #24]
   b44ce:	e9cd 8501 	strd	r8, r5, [sp, #4]
   b44d2:	9500      	str	r5, [sp, #0]
   b44d4:	aa08      	add	r2, sp, #32
   b44d6:	4630      	mov	r0, r6
   b44d8:	e912 0006 	ldmdb	r2, {r1, r2}
   b44dc:	4623      	mov	r3, r4
   b44de:	f7ff fee5 	bl	b42ac <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0>
	}
   b44e2:	4620      	mov	r0, r4
   b44e4:	b009      	add	sp, #36	; 0x24
   b44e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b44ea:	bf00      	nop
   b44ec:	2003e530 	.word	0x2003e530
   b44f0:	2003e52c 	.word	0x2003e52c
   b44f4:	000b40ed 	.word	0x000b40ed

000b44f8 <_Z6setHueibiii>:
TCPClient HueClient;

bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat);
bool getHue(int lightNum);

bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
   b44f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b44fc:	b08c      	sub	sp, #48	; 0x30
   b44fe:	4605      	mov	r5, r0
   b4500:	460f      	mov	r7, r1

  static int PrevLightNum,PrevOn, PrevColor, PrevBright, PrevSat;

  String command = "";  
   b4502:	4668      	mov	r0, sp
   b4504:	4977      	ldr	r1, [pc, #476]	; (b46e4 <_Z6setHueibiii+0x1ec>)
bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
   b4506:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   b450a:	4614      	mov	r4, r2
   b450c:	461e      	mov	r6, r3
  String command = "";  
   b450e:	f001 f9ec 	bl	b58ea <_ZN6StringC1EPK19__FlashStringHelper>

  if((lightNum==PrevLightNum)&&(HueOn==PrevOn)&&(HueColor==PrevColor)&&(HueBright==PrevBright)&&(HueSat==PrevSat)) {
   b4512:	f8df e228 	ldr.w	lr, [pc, #552]	; b473c <_Z6setHueibiii+0x244>
   b4516:	4974      	ldr	r1, [pc, #464]	; (b46e8 <_Z6setHueibiii+0x1f0>)
   b4518:	f8de 3000 	ldr.w	r3, [lr]
   b451c:	4873      	ldr	r0, [pc, #460]	; (b46ec <_Z6setHueibiii+0x1f4>)
   b451e:	4a74      	ldr	r2, [pc, #464]	; (b46f0 <_Z6setHueibiii+0x1f8>)
   b4520:	f8df c21c 	ldr.w	ip, [pc, #540]	; b4740 <_Z6setHueibiii+0x248>
   b4524:	42ab      	cmp	r3, r5
   b4526:	d119      	bne.n	b455c <_Z6setHueibiii+0x64>
   b4528:	680b      	ldr	r3, [r1, #0]
   b452a:	42bb      	cmp	r3, r7
   b452c:	d116      	bne.n	b455c <_Z6setHueibiii+0x64>
   b452e:	6803      	ldr	r3, [r0, #0]
   b4530:	42a3      	cmp	r3, r4
   b4532:	d113      	bne.n	b455c <_Z6setHueibiii+0x64>
   b4534:	6813      	ldr	r3, [r2, #0]
   b4536:	42b3      	cmp	r3, r6
   b4538:	d110      	bne.n	b455c <_Z6setHueibiii+0x64>
   b453a:	f8dc 3000 	ldr.w	r3, [ip]
   b453e:	4543      	cmp	r3, r8
   b4540:	d10c      	bne.n	b455c <_Z6setHueibiii+0x64>
    Serial.printf("No Change - Cancelling CMD\n");
   b4542:	f001 fe17 	bl	b6174 <_Z16_fetch_usbserialv>
   b4546:	496b      	ldr	r1, [pc, #428]	; (b46f4 <_Z6setHueibiii+0x1fc>)
   b4548:	f7ff fee4 	bl	b4314 <_ZN5Print6printfEPKcz>
    return false;
   b454c:	2400      	movs	r4, #0
  String command = "";  
   b454e:	4668      	mov	r0, sp
   b4550:	f001 f980 	bl	b5854 <_ZN6StringD1Ev>
    HueClient.stop();
    return true;  // command executed
  }
  else
    return false;  // command failed
}
   b4554:	4620      	mov	r0, r4
   b4556:	b00c      	add	sp, #48	; 0x30
   b4558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  PrevLightNum = lightNum;
   b455c:	f8ce 5000 	str.w	r5, [lr]
  PrevOn = HueOn;
   b4560:	600f      	str	r7, [r1, #0]
  PrevColor=HueColor;
   b4562:	6004      	str	r4, [r0, #0]
  PrevBright=HueBright;
   b4564:	6016      	str	r6, [r2, #0]
  PrevSat=HueSat;
   b4566:	f8cc 8000 	str.w	r8, [ip]
  if(HueOn == true) {
   b456a:	2f00      	cmp	r7, #0
   b456c:	f000 80b5 	beq.w	b46da <_Z6setHueibiii+0x1e2>
    command = "{\"on\":true,\"sat\":";
   b4570:	4961      	ldr	r1, [pc, #388]	; (b46f8 <_Z6setHueibiii+0x200>)
   b4572:	4668      	mov	r0, sp
   b4574:	f001 f9e7 	bl	b5946 <_ZN6StringaSEPKc>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b4578:	4669      	mov	r1, sp
   b457a:	a808      	add	r0, sp, #32
   b457c:	f001 f9d8 	bl	b5930 <_ZN6StringC1ERKS_>
    command = command + String(HueSat) + ",\"bri\":";
   b4580:	220a      	movs	r2, #10
   b4582:	4641      	mov	r1, r8
   b4584:	a804      	add	r0, sp, #16
   b4586:	f001 f9f0 	bl	b596a <_ZN6StringC1Eih>
   b458a:	a904      	add	r1, sp, #16
   b458c:	a808      	add	r0, sp, #32
   b458e:	f001 fa34 	bl	b59fa <_ZplRK15StringSumHelperRK6String>
   b4592:	495a      	ldr	r1, [pc, #360]	; (b46fc <_Z6setHueibiii+0x204>)
   b4594:	f001 fa3d 	bl	b5a12 <_ZplRK15StringSumHelperPKc>
   b4598:	4601      	mov	r1, r0
   b459a:	4668      	mov	r0, sp
   b459c:	f001 f9b9 	bl	b5912 <_ZN6StringaSERKS_>
   b45a0:	a804      	add	r0, sp, #16
   b45a2:	f001 f957 	bl	b5854 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b45a6:	a808      	add	r0, sp, #32
   b45a8:	f001 f954 	bl	b5854 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b45ac:	4669      	mov	r1, sp
   b45ae:	a808      	add	r0, sp, #32
   b45b0:	f001 f9be 	bl	b5930 <_ZN6StringC1ERKS_>
    command = command + String(HueBright) + ",\"hue\":";
   b45b4:	220a      	movs	r2, #10
   b45b6:	4631      	mov	r1, r6
   b45b8:	a804      	add	r0, sp, #16
   b45ba:	f001 f9d6 	bl	b596a <_ZN6StringC1Eih>
   b45be:	a904      	add	r1, sp, #16
   b45c0:	a808      	add	r0, sp, #32
   b45c2:	f001 fa1a 	bl	b59fa <_ZplRK15StringSumHelperRK6String>
   b45c6:	494e      	ldr	r1, [pc, #312]	; (b4700 <_Z6setHueibiii+0x208>)
   b45c8:	f001 fa23 	bl	b5a12 <_ZplRK15StringSumHelperPKc>
   b45cc:	4601      	mov	r1, r0
   b45ce:	4668      	mov	r0, sp
   b45d0:	f001 f99f 	bl	b5912 <_ZN6StringaSERKS_>
   b45d4:	a804      	add	r0, sp, #16
   b45d6:	f001 f93d 	bl	b5854 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b45da:	a808      	add	r0, sp, #32
   b45dc:	f001 f93a 	bl	b5854 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b45e0:	4669      	mov	r1, sp
   b45e2:	a808      	add	r0, sp, #32
   b45e4:	f001 f9a4 	bl	b5930 <_ZN6StringC1ERKS_>
    command = command + String(HueColor) + "}";
   b45e8:	220a      	movs	r2, #10
   b45ea:	4621      	mov	r1, r4
   b45ec:	a804      	add	r0, sp, #16
   b45ee:	f001 f9bc 	bl	b596a <_ZN6StringC1Eih>
   b45f2:	a904      	add	r1, sp, #16
   b45f4:	a808      	add	r0, sp, #32
   b45f6:	f001 fa00 	bl	b59fa <_ZplRK15StringSumHelperRK6String>
   b45fa:	4942      	ldr	r1, [pc, #264]	; (b4704 <_Z6setHueibiii+0x20c>)
   b45fc:	f001 fa09 	bl	b5a12 <_ZplRK15StringSumHelperPKc>
   b4600:	4601      	mov	r1, r0
   b4602:	4668      	mov	r0, sp
   b4604:	f001 f985 	bl	b5912 <_ZN6StringaSERKS_>
   b4608:	a804      	add	r0, sp, #16
   b460a:	f001 f923 	bl	b5854 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b460e:	a808      	add	r0, sp, #32
   b4610:	f001 f920 	bl	b5854 <_ZN6StringD1Ev>
  if (HueClient.connect(hueHubIP, hueHubPort)) {
   b4614:	493c      	ldr	r1, [pc, #240]	; (b4708 <_Z6setHueibiii+0x210>)
   b4616:	483d      	ldr	r0, [pc, #244]	; (b470c <_Z6setHueibiii+0x214>)
   b4618:	2300      	movs	r3, #0
   b461a:	2250      	movs	r2, #80	; 0x50
   b461c:	f001 fad8 	bl	b5bd0 <_ZN9TCPClient7connectEPKctm>
   b4620:	4604      	mov	r4, r0
   b4622:	2800      	cmp	r0, #0
   b4624:	d093      	beq.n	b454e <_Z6setHueibiii+0x56>
      Serial.println("Sending Command to Hue");
   b4626:	f001 fda5 	bl	b6174 <_Z16_fetch_usbserialv>
   b462a:	4939      	ldr	r1, [pc, #228]	; (b4710 <_Z6setHueibiii+0x218>)
   b462c:	f001 f835 	bl	b569a <_ZN5Print7printlnEPKc>
      Serial.println(command);
   b4630:	f001 fda0 	bl	b6174 <_Z16_fetch_usbserialv>
   b4634:	9900      	ldr	r1, [sp, #0]
   b4636:	f001 f830 	bl	b569a <_ZN5Print7printlnEPKc>
      HueClient.print("PUT /api/");
   b463a:	4936      	ldr	r1, [pc, #216]	; (b4714 <_Z6setHueibiii+0x21c>)
   b463c:	4833      	ldr	r0, [pc, #204]	; (b470c <_Z6setHueibiii+0x214>)
   b463e:	f001 f819 	bl	b5674 <_ZN5Print5printEPKc>
      HueClient.print(hueUsername);
   b4642:	4935      	ldr	r1, [pc, #212]	; (b4718 <_Z6setHueibiii+0x220>)
   b4644:	4831      	ldr	r0, [pc, #196]	; (b470c <_Z6setHueibiii+0x214>)
   b4646:	f001 f815 	bl	b5674 <_ZN5Print5printEPKc>
      HueClient.print("/lights/");
   b464a:	4934      	ldr	r1, [pc, #208]	; (b471c <_Z6setHueibiii+0x224>)
   b464c:	482f      	ldr	r0, [pc, #188]	; (b470c <_Z6setHueibiii+0x214>)
   b464e:	f001 f811 	bl	b5674 <_ZN5Print5printEPKc>
size_t Print::print(T n, int base)
   b4652:	220a      	movs	r2, #10
   b4654:	482d      	ldr	r0, [pc, #180]	; (b470c <_Z6setHueibiii+0x214>)
   b4656:	4629      	mov	r1, r5
   b4658:	f7ff fde4 	bl	b4224 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
      HueClient.println("/state HTTP/1.1");
   b465c:	4930      	ldr	r1, [pc, #192]	; (b4720 <_Z6setHueibiii+0x228>)
   b465e:	482b      	ldr	r0, [pc, #172]	; (b470c <_Z6setHueibiii+0x214>)
   b4660:	f001 f81b 	bl	b569a <_ZN5Print7printlnEPKc>
      HueClient.println("keep-alive");
   b4664:	492f      	ldr	r1, [pc, #188]	; (b4724 <_Z6setHueibiii+0x22c>)
   b4666:	4829      	ldr	r0, [pc, #164]	; (b470c <_Z6setHueibiii+0x214>)
   b4668:	f001 f817 	bl	b569a <_ZN5Print7printlnEPKc>
      HueClient.print("Host: ");
   b466c:	492e      	ldr	r1, [pc, #184]	; (b4728 <_Z6setHueibiii+0x230>)
   b466e:	4827      	ldr	r0, [pc, #156]	; (b470c <_Z6setHueibiii+0x214>)
   b4670:	f001 f800 	bl	b5674 <_ZN5Print5printEPKc>
      HueClient.println(hueHubIP);
   b4674:	4924      	ldr	r1, [pc, #144]	; (b4708 <_Z6setHueibiii+0x210>)
   b4676:	4825      	ldr	r0, [pc, #148]	; (b470c <_Z6setHueibiii+0x214>)
   b4678:	f001 f80f 	bl	b569a <_ZN5Print7printlnEPKc>
      HueClient.print("Content-Length: ");
   b467c:	492b      	ldr	r1, [pc, #172]	; (b472c <_Z6setHueibiii+0x234>)
   b467e:	4823      	ldr	r0, [pc, #140]	; (b470c <_Z6setHueibiii+0x214>)
   b4680:	f000 fff8 	bl	b5674 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b4684:	220a      	movs	r2, #10
   b4686:	9902      	ldr	r1, [sp, #8]
   b4688:	4820      	ldr	r0, [pc, #128]	; (b470c <_Z6setHueibiii+0x214>)
   b468a:	f001 f810 	bl	b56ae <_ZN5Print11printNumberEmh>
        n += println();
   b468e:	481f      	ldr	r0, [pc, #124]	; (b470c <_Z6setHueibiii+0x214>)
   b4690:	f000 fff7 	bl	b5682 <_ZN5Print7printlnEv>
      HueClient.println("Content-Type: text/plain;charset=UTF-8");
   b4694:	4926      	ldr	r1, [pc, #152]	; (b4730 <_Z6setHueibiii+0x238>)
   b4696:	481d      	ldr	r0, [pc, #116]	; (b470c <_Z6setHueibiii+0x214>)
   b4698:	f000 ffff 	bl	b569a <_ZN5Print7printlnEPKc>
      HueClient.println();  // blank line before body
   b469c:	481b      	ldr	r0, [pc, #108]	; (b470c <_Z6setHueibiii+0x214>)
   b469e:	f000 fff0 	bl	b5682 <_ZN5Print7printlnEv>
      HueClient.println(command);  // Hue command
   b46a2:	9900      	ldr	r1, [sp, #0]
   b46a4:	4819      	ldr	r0, [pc, #100]	; (b470c <_Z6setHueibiii+0x214>)
   b46a6:	f000 fff8 	bl	b569a <_ZN5Print7printlnEPKc>
      Serial.println("From Hue");
   b46aa:	f001 fd63 	bl	b6174 <_Z16_fetch_usbserialv>
   b46ae:	4921      	ldr	r1, [pc, #132]	; (b4734 <_Z6setHueibiii+0x23c>)
   b46b0:	f000 fff3 	bl	b569a <_ZN5Print7printlnEPKc>
      Serial.println(HueClient.readString()); // To close connection
   b46b4:	f001 fd5e 	bl	b6174 <_Z16_fetch_usbserialv>
   b46b8:	4914      	ldr	r1, [pc, #80]	; (b470c <_Z6setHueibiii+0x214>)
   b46ba:	4604      	mov	r4, r0
   b46bc:	a808      	add	r0, sp, #32
   b46be:	f001 f8b5 	bl	b582c <_ZN6Stream10readStringEv>
   b46c2:	9908      	ldr	r1, [sp, #32]
   b46c4:	4620      	mov	r0, r4
   b46c6:	f000 ffe8 	bl	b569a <_ZN5Print7printlnEPKc>
   b46ca:	a808      	add	r0, sp, #32
   b46cc:	f001 f8c2 	bl	b5854 <_ZN6StringD1Ev>
    HueClient.stop();
   b46d0:	480e      	ldr	r0, [pc, #56]	; (b470c <_Z6setHueibiii+0x214>)
   b46d2:	f001 fc33 	bl	b5f3c <_ZN9TCPClient4stopEv>
    return true;  // command executed
   b46d6:	2401      	movs	r4, #1
   b46d8:	e739      	b.n	b454e <_Z6setHueibiii+0x56>
    command = "{\"on\":false}";
   b46da:	4917      	ldr	r1, [pc, #92]	; (b4738 <_Z6setHueibiii+0x240>)
   b46dc:	4668      	mov	r0, sp
   b46de:	f001 f932 	bl	b5946 <_ZN6StringaSEPKc>
   b46e2:	e797      	b.n	b4614 <_Z6setHueibiii+0x11c>
   b46e4:	000b6dbf 	.word	0x000b6dbf
   b46e8:	2003e5a0 	.word	0x2003e5a0
   b46ec:	2003e5a8 	.word	0x2003e5a8
   b46f0:	2003e598 	.word	0x2003e598
   b46f4:	000b69cc 	.word	0x000b69cc
   b46f8:	000b69e8 	.word	0x000b69e8
   b46fc:	000b69fa 	.word	0x000b69fa
   b4700:	000b6a02 	.word	0x000b6a02
   b4704:	000b6a15 	.word	0x000b6a15
   b4708:	000b6e60 	.word	0x000b6e60
   b470c:	2003e534 	.word	0x2003e534
   b4710:	000b6a17 	.word	0x000b6a17
   b4714:	000b6a2e 	.word	0x000b6a2e
   b4718:	000b6e37 	.word	0x000b6e37
   b471c:	000b6a38 	.word	0x000b6a38
   b4720:	000b6a41 	.word	0x000b6a41
   b4724:	000b6c6a 	.word	0x000b6c6a
   b4728:	000b6a51 	.word	0x000b6a51
   b472c:	000b6a58 	.word	0x000b6a58
   b4730:	000b6a69 	.word	0x000b6a69
   b4734:	000b6a90 	.word	0x000b6a90
   b4738:	000b6a0a 	.word	0x000b6a0a
   b473c:	2003e59c 	.word	0x2003e59c
   b4740:	2003e5a4 	.word	0x2003e5a4

000b4744 <_Z8switchONi>:
TCPClient WemoClient;

int wemoPort = 49153;
const char *wemoIP[5] = {"192.168.1.30","192.168.1.31","192.168.1.32","192.168.1.33","192.168.1.34"};

void switchON(int wemo) {
   b4744:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  
  String data1;
   b4746:	4925      	ldr	r1, [pc, #148]	; (b47dc <_Z8switchONi+0x98>)
void switchON(int wemo) {
   b4748:	4604      	mov	r4, r0
  String data1;
   b474a:	4668      	mov	r0, sp
   b474c:	f001 f8cd 	bl	b58ea <_ZN6StringC1EPK19__FlashStringHelper>
  
  Serial.printf("SwitchON %i \n",wemo);
   b4750:	f001 fd10 	bl	b6174 <_Z16_fetch_usbserialv>
   b4754:	4622      	mov	r2, r4
   b4756:	4922      	ldr	r1, [pc, #136]	; (b47e0 <_Z8switchONi+0x9c>)
   b4758:	f7ff fddc 	bl	b4314 <_ZN5Print6printfEPKcz>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b475c:	4921      	ldr	r1, [pc, #132]	; (b47e4 <_Z8switchONi+0xa0>)
   b475e:	4668      	mov	r0, sp
   b4760:	f001 f92d 	bl	b59be <_ZN6String6concatEPKc>
  data1+="<?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"><s:Body><u:SetBinaryState xmlns:u=\"urn:Belkin:service:basicevent:1\"><BinaryState>1</BinaryState></u:SetBinaryState></s:Body></s:Envelope>"; // Use HTML encoding for comma's
  if (WemoClient.connect(wemoIP[wemo],wemoPort)) {
   b4764:	4a20      	ldr	r2, [pc, #128]	; (b47e8 <_Z8switchONi+0xa4>)
   b4766:	4921      	ldr	r1, [pc, #132]	; (b47ec <_Z8switchONi+0xa8>)
   b4768:	8812      	ldrh	r2, [r2, #0]
   b476a:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
   b476e:	4820      	ldr	r0, [pc, #128]	; (b47f0 <_Z8switchONi+0xac>)
   b4770:	2300      	movs	r3, #0
   b4772:	f001 fa2d 	bl	b5bd0 <_ZN9TCPClient7connectEPKctm>
   b4776:	b328      	cbz	r0, b47c4 <_Z8switchONi+0x80>
        WemoClient.println("POST /upnp/control/basicevent1 HTTP/1.1");
   b4778:	491e      	ldr	r1, [pc, #120]	; (b47f4 <_Z8switchONi+0xb0>)
   b477a:	481d      	ldr	r0, [pc, #116]	; (b47f0 <_Z8switchONi+0xac>)
   b477c:	f000 ff8d 	bl	b569a <_ZN5Print7printlnEPKc>
        WemoClient.println("Content-Type: text/xml; charset=utf-8");
   b4780:	491d      	ldr	r1, [pc, #116]	; (b47f8 <_Z8switchONi+0xb4>)
   b4782:	481b      	ldr	r0, [pc, #108]	; (b47f0 <_Z8switchONi+0xac>)
   b4784:	f000 ff89 	bl	b569a <_ZN5Print7printlnEPKc>
        WemoClient.println("SOAPACTION: \"urn:Belkin:service:basicevent:1#SetBinaryState\"");
   b4788:	491c      	ldr	r1, [pc, #112]	; (b47fc <_Z8switchONi+0xb8>)
   b478a:	4819      	ldr	r0, [pc, #100]	; (b47f0 <_Z8switchONi+0xac>)
   b478c:	f000 ff85 	bl	b569a <_ZN5Print7printlnEPKc>
        WemoClient.println("Connection: keep-alive");
   b4790:	491b      	ldr	r1, [pc, #108]	; (b4800 <_Z8switchONi+0xbc>)
   b4792:	4817      	ldr	r0, [pc, #92]	; (b47f0 <_Z8switchONi+0xac>)
   b4794:	f000 ff81 	bl	b569a <_ZN5Print7printlnEPKc>
        WemoClient.print("Content-Length: ");
   b4798:	491a      	ldr	r1, [pc, #104]	; (b4804 <_Z8switchONi+0xc0>)
   b479a:	4815      	ldr	r0, [pc, #84]	; (b47f0 <_Z8switchONi+0xac>)
   b479c:	f000 ff6a 	bl	b5674 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b47a0:	9902      	ldr	r1, [sp, #8]
   b47a2:	4813      	ldr	r0, [pc, #76]	; (b47f0 <_Z8switchONi+0xac>)
   b47a4:	220a      	movs	r2, #10
   b47a6:	f000 ff82 	bl	b56ae <_ZN5Print11printNumberEmh>
        n += println();
   b47aa:	4811      	ldr	r0, [pc, #68]	; (b47f0 <_Z8switchONi+0xac>)
   b47ac:	f000 ff69 	bl	b5682 <_ZN5Print7printlnEv>
        WemoClient.println(data1.length());
        WemoClient.println();
   b47b0:	480f      	ldr	r0, [pc, #60]	; (b47f0 <_Z8switchONi+0xac>)
   b47b2:	f000 ff66 	bl	b5682 <_ZN5Print7printlnEv>
        WemoClient.print(data1);
   b47b6:	9900      	ldr	r1, [sp, #0]
   b47b8:	480d      	ldr	r0, [pc, #52]	; (b47f0 <_Z8switchONi+0xac>)
   b47ba:	f000 ff5b 	bl	b5674 <_ZN5Print5printEPKc>
        WemoClient.println();
   b47be:	480c      	ldr	r0, [pc, #48]	; (b47f0 <_Z8switchONi+0xac>)
   b47c0:	f000 ff5f 	bl	b5682 <_ZN5Print7printlnEv>
    }

  if (WemoClient.connected()) {
   b47c4:	480a      	ldr	r0, [pc, #40]	; (b47f0 <_Z8switchONi+0xac>)
   b47c6:	f001 fa81 	bl	b5ccc <_ZN9TCPClient9connectedEv>
   b47ca:	b110      	cbz	r0, b47d2 <_Z8switchONi+0x8e>
     WemoClient.stop();
   b47cc:	4808      	ldr	r0, [pc, #32]	; (b47f0 <_Z8switchONi+0xac>)
   b47ce:	f001 fbb5 	bl	b5f3c <_ZN9TCPClient4stopEv>
  String data1;
   b47d2:	4668      	mov	r0, sp
   b47d4:	f001 f83e 	bl	b5854 <_ZN6StringD1Ev>
  }
}
   b47d8:	b004      	add	sp, #16
   b47da:	bd10      	pop	{r4, pc}
   b47dc:	000b6dbf 	.word	0x000b6dbf
   b47e0:	000b6a99 	.word	0x000b6a99
   b47e4:	000b6aa7 	.word	0x000b6aa7
   b47e8:	2003e4bc 	.word	0x2003e4bc
   b47ec:	2003e4a8 	.word	0x2003e4a8
   b47f0:	2003e57c 	.word	0x2003e57c
   b47f4:	000b6bd3 	.word	0x000b6bd3
   b47f8:	000b6bfb 	.word	0x000b6bfb
   b47fc:	000b6c21 	.word	0x000b6c21
   b4800:	000b6c5e 	.word	0x000b6c5e
   b4804:	000b6a58 	.word	0x000b6a58

000b4808 <_Z9switchOFFi>:

void switchOFF(int wemo){
   b4808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String data1;
   b480a:	4925      	ldr	r1, [pc, #148]	; (b48a0 <_Z9switchOFFi+0x98>)
void switchOFF(int wemo){
   b480c:	4604      	mov	r4, r0
  String data1;
   b480e:	4668      	mov	r0, sp
   b4810:	f001 f86b 	bl	b58ea <_ZN6StringC1EPK19__FlashStringHelper>
  
  Serial.printf("switchOFF %i \n",wemo);
   b4814:	f001 fcae 	bl	b6174 <_Z16_fetch_usbserialv>
   b4818:	4622      	mov	r2, r4
   b481a:	4922      	ldr	r1, [pc, #136]	; (b48a4 <_Z9switchOFFi+0x9c>)
   b481c:	f7ff fd7a 	bl	b4314 <_ZN5Print6printfEPKcz>
   b4820:	4921      	ldr	r1, [pc, #132]	; (b48a8 <_Z9switchOFFi+0xa0>)
   b4822:	4668      	mov	r0, sp
   b4824:	f001 f8cb 	bl	b59be <_ZN6String6concatEPKc>
  data1+="<?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"><s:Body><u:SetBinaryState xmlns:u=\"urn:Belkin:service:basicevent:1\"><BinaryState>0</BinaryState></u:SetBinaryState></s:Body></s:Envelope>"; // Use HTML encoding for comma's
  if (WemoClient.connect(wemoIP[wemo],wemoPort)) {
   b4828:	4a20      	ldr	r2, [pc, #128]	; (b48ac <_Z9switchOFFi+0xa4>)
   b482a:	4921      	ldr	r1, [pc, #132]	; (b48b0 <_Z9switchOFFi+0xa8>)
   b482c:	8812      	ldrh	r2, [r2, #0]
   b482e:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
   b4832:	4820      	ldr	r0, [pc, #128]	; (b48b4 <_Z9switchOFFi+0xac>)
   b4834:	2300      	movs	r3, #0
   b4836:	f001 f9cb 	bl	b5bd0 <_ZN9TCPClient7connectEPKctm>
   b483a:	b328      	cbz	r0, b4888 <_Z9switchOFFi+0x80>
        WemoClient.println("POST /upnp/control/basicevent1 HTTP/1.1");
   b483c:	491e      	ldr	r1, [pc, #120]	; (b48b8 <_Z9switchOFFi+0xb0>)
   b483e:	481d      	ldr	r0, [pc, #116]	; (b48b4 <_Z9switchOFFi+0xac>)
   b4840:	f000 ff2b 	bl	b569a <_ZN5Print7printlnEPKc>
        WemoClient.println("Content-Type: text/xml; charset=utf-8");
   b4844:	491d      	ldr	r1, [pc, #116]	; (b48bc <_Z9switchOFFi+0xb4>)
   b4846:	481b      	ldr	r0, [pc, #108]	; (b48b4 <_Z9switchOFFi+0xac>)
   b4848:	f000 ff27 	bl	b569a <_ZN5Print7printlnEPKc>
        WemoClient.println("SOAPACTION: \"urn:Belkin:service:basicevent:1#SetBinaryState\"");
   b484c:	491c      	ldr	r1, [pc, #112]	; (b48c0 <_Z9switchOFFi+0xb8>)
   b484e:	4819      	ldr	r0, [pc, #100]	; (b48b4 <_Z9switchOFFi+0xac>)
   b4850:	f000 ff23 	bl	b569a <_ZN5Print7printlnEPKc>
        WemoClient.println("Connection: keep-alive");
   b4854:	491b      	ldr	r1, [pc, #108]	; (b48c4 <_Z9switchOFFi+0xbc>)
   b4856:	4817      	ldr	r0, [pc, #92]	; (b48b4 <_Z9switchOFFi+0xac>)
   b4858:	f000 ff1f 	bl	b569a <_ZN5Print7printlnEPKc>
        WemoClient.print("Content-Length: ");
   b485c:	491a      	ldr	r1, [pc, #104]	; (b48c8 <_Z9switchOFFi+0xc0>)
   b485e:	4815      	ldr	r0, [pc, #84]	; (b48b4 <_Z9switchOFFi+0xac>)
   b4860:	f000 ff08 	bl	b5674 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b4864:	9902      	ldr	r1, [sp, #8]
   b4866:	4813      	ldr	r0, [pc, #76]	; (b48b4 <_Z9switchOFFi+0xac>)
   b4868:	220a      	movs	r2, #10
   b486a:	f000 ff20 	bl	b56ae <_ZN5Print11printNumberEmh>
        n += println();
   b486e:	4811      	ldr	r0, [pc, #68]	; (b48b4 <_Z9switchOFFi+0xac>)
   b4870:	f000 ff07 	bl	b5682 <_ZN5Print7printlnEv>
        WemoClient.println(data1.length());
        WemoClient.println();
   b4874:	480f      	ldr	r0, [pc, #60]	; (b48b4 <_Z9switchOFFi+0xac>)
   b4876:	f000 ff04 	bl	b5682 <_ZN5Print7printlnEv>
        WemoClient.print(data1);
   b487a:	9900      	ldr	r1, [sp, #0]
   b487c:	480d      	ldr	r0, [pc, #52]	; (b48b4 <_Z9switchOFFi+0xac>)
   b487e:	f000 fef9 	bl	b5674 <_ZN5Print5printEPKc>
        WemoClient.println();
   b4882:	480c      	ldr	r0, [pc, #48]	; (b48b4 <_Z9switchOFFi+0xac>)
   b4884:	f000 fefd 	bl	b5682 <_ZN5Print7printlnEv>
    }
   
  if (WemoClient.connected()) {
   b4888:	480a      	ldr	r0, [pc, #40]	; (b48b4 <_Z9switchOFFi+0xac>)
   b488a:	f001 fa1f 	bl	b5ccc <_ZN9TCPClient9connectedEv>
   b488e:	b110      	cbz	r0, b4896 <_Z9switchOFFi+0x8e>
     WemoClient.stop();
   b4890:	4808      	ldr	r0, [pc, #32]	; (b48b4 <_Z9switchOFFi+0xac>)
   b4892:	f001 fb53 	bl	b5f3c <_ZN9TCPClient4stopEv>
  String data1;
   b4896:	4668      	mov	r0, sp
   b4898:	f000 ffdc 	bl	b5854 <_ZN6StringD1Ev>
  }
}
   b489c:	b004      	add	sp, #16
   b489e:	bd10      	pop	{r4, pc}
   b48a0:	000b6dbf 	.word	0x000b6dbf
   b48a4:	000b6c75 	.word	0x000b6c75
   b48a8:	000b6c84 	.word	0x000b6c84
   b48ac:	2003e4bc 	.word	0x2003e4bc
   b48b0:	2003e4a8 	.word	0x2003e4a8
   b48b4:	2003e57c 	.word	0x2003e57c
   b48b8:	000b6bd3 	.word	0x000b6bd3
   b48bc:	000b6bfb 	.word	0x000b6bfb
   b48c0:	000b6c21 	.word	0x000b6c21
   b48c4:	000b6c5e 	.word	0x000b6c5e
   b48c8:	000b6a58 	.word	0x000b6a58

000b48cc <_ZN6Button9isClickedEv>:

    bool isPressed() {
      return digitalRead(_buttonPin);
    }

    bool isClicked() {
   b48cc:	b510      	push	{r4, lr}
   b48ce:	4604      	mov	r4, r0
      bool _buttonState, _clicked;

      _buttonState = digitalRead(_buttonPin);
   b48d0:	8800      	ldrh	r0, [r0, #0]
   b48d2:	f001 fdea 	bl	b64aa <digitalRead>
      if(_buttonState != _prevButtonState) {
   b48d6:	6862      	ldr	r2, [r4, #4]
      _buttonState = digitalRead(_buttonPin);
   b48d8:	1e03      	subs	r3, r0, #0
   b48da:	bf18      	it	ne
   b48dc:	2301      	movne	r3, #1
        _clicked = _buttonState;
      }
      else {
        _clicked = false;
      }
      _prevButtonState=_buttonState;
   b48de:	6063      	str	r3, [r4, #4]
      return _clicked;
    }
   b48e0:	4293      	cmp	r3, r2
   b48e2:	bf14      	ite	ne
   b48e4:	4618      	movne	r0, r3
   b48e6:	2000      	moveq	r0, #0
   b48e8:	bd10      	pop	{r4, pc}
	...

000b48ec <setup>:

Encoder myEnc(PINA,PINB);

SYSTEM_MODE(MANUAL);

void setup() {
   b48ec:	b530      	push	{r4, r5, lr}

    myServo.attach(SRVPIN);
   b48ee:	23b4      	movs	r3, #180	; 0xb4
void setup() {
   b48f0:	b097      	sub	sp, #92	; 0x5c
    myServo.attach(SRVPIN);
   b48f2:	2400      	movs	r4, #0
   b48f4:	f44f 7208 	mov.w	r2, #544	; 0x220
   b48f8:	e9cd 4300 	strd	r4, r3, [sp]
   b48fc:	2110      	movs	r1, #16
   b48fe:	f44f 6316 	mov.w	r3, #2400	; 0x960
   b4902:	4834      	ldr	r0, [pc, #208]	; (b49d4 <setup+0xe8>)
   b4904:	f000 ff48 	bl	b5798 <_ZN5Servo6attachEtttss>

    pinMode(SPKRPIN, OUTPUT);
   b4908:	2101      	movs	r1, #1
   b490a:	2011      	movs	r0, #17
   b490c:	f001 fdbc 	bl	b6488 <pinMode>
    pinMode(PIXPIN, OUTPUT);
   b4910:	2101      	movs	r1, #1
   b4912:	2008      	movs	r0, #8
   b4914:	f001 fdb8 	bl	b6488 <pinMode>
    pinMode(ENBPIN, INPUT_PULLDOWN);
   b4918:	2103      	movs	r1, #3
   b491a:	200c      	movs	r0, #12
   b491c:	f001 fdb4 	bl	b6488 <pinMode>

    Serial.begin(9600);
   b4920:	f001 fc28 	bl	b6174 <_Z16_fetch_usbserialv>
   b4924:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4928:	f001 fc14 	bl	b6154 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b492c:	4620      	mov	r0, r4
   b492e:	f000 f9b1 	bl	b4c94 <hal_timer_millis>
        while (_while() && !_condition()) {
   b4932:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b4936:	4604      	mov	r4, r0
   b4938:	2000      	movs	r0, #0
   b493a:	f000 f9ab 	bl	b4c94 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b493e:	1b00      	subs	r0, r0, r4
   b4940:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4944:	42a8      	cmp	r0, r5
   b4946:	f171 0300 	sbcs.w	r3, r1, #0
   b494a:	d207      	bcs.n	b495c <setup+0x70>
    waitFor(Serial.isConnected,10000);
   b494c:	f001 fc12 	bl	b6174 <_Z16_fetch_usbserialv>
   b4950:	f001 fc04 	bl	b615c <_ZN9USBSerial11isConnectedEv>
   b4954:	b910      	cbnz	r0, b495c <setup+0x70>
            spark_process();
   b4956:	f000 fb59 	bl	b500c <spark_process>
        while (_while() && !_condition()) {
   b495a:	e7ed      	b.n	b4938 <setup+0x4c>
   b495c:	f001 fc0a 	bl	b6174 <_Z16_fetch_usbserialv>
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4960:	4c1d      	ldr	r4, [pc, #116]	; (b49d8 <setup+0xec>)
    WiFi.on();
    WiFi.setCredentials("IoTNetwork");
    WiFi.connect();

    while(WiFi.connecting()) {
        Serial.printf(",");
   b4962:	4d1e      	ldr	r5, [pc, #120]	; (b49dc <setup+0xf0>)
    waitFor(Serial.isConnected,10000);
   b4964:	f001 fbfa 	bl	b615c <_ZN9USBSerial11isConnectedEv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b4968:	2300      	movs	r3, #0
   b496a:	461a      	mov	r2, r3
   b496c:	4619      	mov	r1, r3
   b496e:	6860      	ldr	r0, [r4, #4]
   b4970:	f000 fb7c 	bl	b506c <network_on>

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   b4974:	2238      	movs	r2, #56	; 0x38
   b4976:	2100      	movs	r1, #0
   b4978:	a808      	add	r0, sp, #32
   b497a:	f001 ff55 	bl	b6828 <memset>
        creds.size = sizeof(creds);
   b497e:	234c      	movs	r3, #76	; 0x4c
   b4980:	9303      	str	r3, [sp, #12]
        creds.ssid = ssid;
   b4982:	4b17      	ldr	r3, [pc, #92]	; (b49e0 <setup+0xf4>)
   b4984:	9304      	str	r3, [sp, #16]
        creds.ssid_len = ssidLen;
        creds.password = password;
   b4986:	220a      	movs	r2, #10
   b4988:	2300      	movs	r3, #0
   b498a:	e9cd 2305 	strd	r2, r3, [sp, #20]
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b498e:	4619      	mov	r1, r3
   b4990:	aa03      	add	r2, sp, #12
   b4992:	6860      	ldr	r0, [r4, #4]
        creds.password_len = passwordLen;
   b4994:	9307      	str	r3, [sp, #28]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4996:	f000 fb89 	bl	b50ac <network_set_credentials>
        network_connect(*this, flags, 0, NULL);
   b499a:	2300      	movs	r3, #0
   b499c:	6860      	ldr	r0, [r4, #4]
   b499e:	461a      	mov	r2, r3
   b49a0:	4619      	mov	r1, r3
   b49a2:	f000 fb43 	bl	b502c <network_connect>
        return network_connecting(*this, 0, NULL);
   b49a6:	2200      	movs	r2, #0
   b49a8:	6860      	ldr	r0, [r4, #4]
   b49aa:	4611      	mov	r1, r2
   b49ac:	f000 fb46 	bl	b503c <network_connecting>
    while(WiFi.connecting()) {
   b49b0:	b128      	cbz	r0, b49be <setup+0xd2>
        Serial.printf(",");
   b49b2:	f001 fbdf 	bl	b6174 <_Z16_fetch_usbserialv>
   b49b6:	4629      	mov	r1, r5
   b49b8:	f7ff fcac 	bl	b4314 <_ZN5Print6printfEPKcz>
    while(WiFi.connecting()) {
   b49bc:	e7f3      	b.n	b49a6 <setup+0xba>
    }
    delay(1000);
   b49be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b49c2:	f000 fbe7 	bl	b5194 <delay>
    Serial.printf("\n\n");
   b49c6:	f001 fbd5 	bl	b6174 <_Z16_fetch_usbserialv>
   b49ca:	4906      	ldr	r1, [pc, #24]	; (b49e4 <setup+0xf8>)
   b49cc:	f7ff fca2 	bl	b4314 <_ZN5Print6printfEPKcz>
}
   b49d0:	b017      	add	sp, #92	; 0x5c
   b49d2:	bd30      	pop	{r4, r5, pc}
   b49d4:	2003e610 	.word	0x2003e610
   b49d8:	2003e718 	.word	0x2003e718
   b49dc:	000b6dbb 	.word	0x000b6dbb
   b49e0:	000b6db0 	.word	0x000b6db0
   b49e4:	000b6dbd 	.word	0x000b6dbd

000b49e8 <_Z10wemoSwitchii>:
        Serial.printf("SHUT ER DOWN\n");
        setHue(BULB,false,0,0,0);
    }
}

void wemoSwitch(int oF, int wM) {
   b49e8:	4603      	mov	r3, r0
   b49ea:	4608      	mov	r0, r1
    if(oF) {
   b49ec:	b10b      	cbz	r3, b49f2 <_Z10wemoSwitchii+0xa>
        switchON(wM);
   b49ee:	f7ff bea9 	b.w	b4744 <_Z8switchONi>
       // Serial.printf("turn on Wemo %d\n", wM);
    }

    if(!oF) {
        switchOFF(wM);
   b49f2:	f7ff bf09 	b.w	b4808 <_Z9switchOFFi>
	...

000b49f8 <loop>:
void loop() {
   b49f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if(button1.isClicked()) {
   b49fc:	4841      	ldr	r0, [pc, #260]	; (b4b04 <loop+0x10c>)
   b49fe:	f7ff ff65 	bl	b48cc <_ZN6Button9isClickedEv>
   b4a02:	4b41      	ldr	r3, [pc, #260]	; (b4b08 <loop+0x110>)
   b4a04:	b118      	cbz	r0, b4a0e <loop+0x16>
        onOFF1 = !onOFF1;
   b4a06:	781a      	ldrb	r2, [r3, #0]
   b4a08:	f082 0201 	eor.w	r2, r2, #1
   b4a0c:	701a      	strb	r2, [r3, #0]
    wemoSwitch(onOFF1, WEMO1);
   b4a0e:	7818      	ldrb	r0, [r3, #0]
   b4a10:	2101      	movs	r1, #1
   b4a12:	f7ff ffe9 	bl	b49e8 <_Z10wemoSwitchii>
    if(button2.isClicked()) {
   b4a16:	483d      	ldr	r0, [pc, #244]	; (b4b0c <loop+0x114>)
   b4a18:	f7ff ff58 	bl	b48cc <_ZN6Button9isClickedEv>
   b4a1c:	4b3c      	ldr	r3, [pc, #240]	; (b4b10 <loop+0x118>)
   b4a1e:	b118      	cbz	r0, b4a28 <loop+0x30>
        onOFF2 = !onOFF2;
   b4a20:	781a      	ldrb	r2, [r3, #0]
   b4a22:	f082 0201 	eor.w	r2, r2, #1
   b4a26:	701a      	strb	r2, [r3, #0]
    wemoSwitch(onOFF2, WEMO2); 
   b4a28:	7818      	ldrb	r0, [r3, #0]
   b4a2a:	2102      	movs	r1, #2
   b4a2c:	f7ff ffdc 	bl	b49e8 <_Z10wemoSwitchii>
    if(button3.isClicked()) {
   b4a30:	4838      	ldr	r0, [pc, #224]	; (b4b14 <loop+0x11c>)
   b4a32:	f7ff ff4b 	bl	b48cc <_ZN6Button9isClickedEv>
   b4a36:	b118      	cbz	r0, b4a40 <loop+0x48>
        color++;
   b4a38:	4a37      	ldr	r2, [pc, #220]	; (b4b18 <loop+0x120>)
   b4a3a:	6813      	ldr	r3, [r2, #0]
   b4a3c:	3301      	adds	r3, #1
   b4a3e:	6013      	str	r3, [r2, #0]
		int32_t ret = position;
   b4a40:	4d36      	ldr	r5, [pc, #216]	; (b4b1c <loop+0x124>)
    encValue = myEnc.read();
   b4a42:	4c37      	ldr	r4, [pc, #220]	; (b4b20 <loop+0x128>)
		noInterrupts();
   b4a44:	f000 fca2 	bl	b538c <_Z12noInterruptsv>
		int32_t ret = position;
   b4a48:	696e      	ldr	r6, [r5, #20]
		interrupts();
   b4a4a:	f000 fca1 	bl	b5390 <_Z10interruptsv>
     if(encValue >= 95) {
   b4a4e:	2e5e      	cmp	r6, #94	; 0x5e
    encValue = myEnc.read();
   b4a50:	6026      	str	r6, [r4, #0]
     if(encValue >= 95) {
   b4a52:	dd2a      	ble.n	b4aaa <loop+0xb2>
		noInterrupts();
   b4a54:	f000 fc9a 	bl	b538c <_Z12noInterruptsv>
		position = p;
   b4a58:	265f      	movs	r6, #95	; 0x5f
   b4a5a:	616e      	str	r6, [r5, #20]
		interrupts();
   b4a5c:	f000 fc98 	bl	b5390 <_Z10interruptsv>
        encValue = 0;
   b4a60:	6026      	str	r6, [r4, #0]
    brightness = map(encValue,0,95,0,255);
   b4a62:	23ff      	movs	r3, #255	; 0xff
   b4a64:	9300      	str	r3, [sp, #0]
   b4a66:	2300      	movs	r3, #0
   b4a68:	225f      	movs	r2, #95	; 0x5f
   b4a6a:	4619      	mov	r1, r3
   b4a6c:	6820      	ldr	r0, [r4, #0]
   b4a6e:	4f2d      	ldr	r7, [pc, #180]	; (b4b24 <loop+0x12c>)
   b4a70:	4d2d      	ldr	r5, [pc, #180]	; (b4b28 <loop+0x130>)
   b4a72:	f000 fb83 	bl	b517c <_Z3mapiiiii>
   b4a76:	6038      	str	r0, [r7, #0]
    if(buttonE.isClicked()) {
   b4a78:	482c      	ldr	r0, [pc, #176]	; (b4b2c <loop+0x134>)
   b4a7a:	f7ff ff27 	bl	b48cc <_ZN6Button9isClickedEv>
   b4a7e:	b118      	cbz	r0, b4a88 <loop+0x90>
        onOFFE = !onOFFE;
   b4a80:	782b      	ldrb	r3, [r5, #0]
   b4a82:	f083 0301 	eor.w	r3, r3, #1
   b4a86:	702b      	strb	r3, [r5, #0]
    if(onOFFE) {
   b4a88:	782b      	ldrb	r3, [r5, #0]
   b4a8a:	b9a3      	cbnz	r3, b4ab6 <loop+0xbe>
        Serial.printf("SHUT ER DOWN\n");
   b4a8c:	f001 fb72 	bl	b6174 <_Z16_fetch_usbserialv>
   b4a90:	4927      	ldr	r1, [pc, #156]	; (b4b30 <loop+0x138>)
   b4a92:	f7ff fc3f 	bl	b4314 <_ZN5Print6printfEPKcz>
        setHue(BULB,false,0,0,0);
   b4a96:	2300      	movs	r3, #0
   b4a98:	9300      	str	r3, [sp, #0]
   b4a9a:	461a      	mov	r2, r3
   b4a9c:	4619      	mov	r1, r3
   b4a9e:	2002      	movs	r0, #2
   b4aa0:	f7ff fd2a 	bl	b44f8 <_Z6setHueibiii>
}
   b4aa4:	b002      	add	sp, #8
   b4aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(encValue <= 0) {
   b4aaa:	2e00      	cmp	r6, #0
   b4aac:	dcd9      	bgt.n	b4a62 <loop+0x6a>
		noInterrupts();
   b4aae:	f000 fc6d 	bl	b538c <_Z12noInterruptsv>
		position = p;
   b4ab2:	2600      	movs	r6, #0
   b4ab4:	e7d1      	b.n	b4a5a <loop+0x62>
            Serial.printf("setting color of bulb %i to color %06i\n", BULB, HueRainbow[color%7]);
   b4ab6:	f8df 8060 	ldr.w	r8, [pc, #96]	; b4b18 <loop+0x120>
   b4aba:	4e1e      	ldr	r6, [pc, #120]	; (b4b34 <loop+0x13c>)
   b4abc:	f001 fb5a 	bl	b6174 <_Z16_fetch_usbserialv>
   b4ac0:	f8d8 3000 	ldr.w	r3, [r8]
   b4ac4:	491c      	ldr	r1, [pc, #112]	; (b4b38 <loop+0x140>)
   b4ac6:	2407      	movs	r4, #7
   b4ac8:	fb93 f2f4 	sdiv	r2, r3, r4
   b4acc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   b4ad0:	1a9b      	subs	r3, r3, r2
   b4ad2:	2202      	movs	r2, #2
   b4ad4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
   b4ad8:	f7ff fc1c 	bl	b4314 <_ZN5Print6printfEPKcz>
            setHue(BULB,true,HueRainbow[color%7],brightness,255);
   b4adc:	f8d8 3000 	ldr.w	r3, [r8]
   b4ae0:	fb93 f4f4 	sdiv	r4, r3, r4
   b4ae4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   b4ae8:	1b1c      	subs	r4, r3, r4
   b4aea:	23ff      	movs	r3, #255	; 0xff
   b4aec:	9300      	str	r3, [sp, #0]
   b4aee:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   b4af2:	683b      	ldr	r3, [r7, #0]
   b4af4:	2101      	movs	r1, #1
   b4af6:	2002      	movs	r0, #2
   b4af8:	f7ff fcfe 	bl	b44f8 <_Z6setHueibiii>
    if(!onOFFE) {
   b4afc:	782b      	ldrb	r3, [r5, #0]
   b4afe:	2b00      	cmp	r3, #0
   b4b00:	d1d0      	bne.n	b4aa4 <loop+0xac>
   b4b02:	e7c3      	b.n	b4a8c <loop+0x94>
   b4b04:	2003e5b0 	.word	0x2003e5b0
   b4b08:	2003e620 	.word	0x2003e620
   b4b0c:	2003e5b8 	.word	0x2003e5b8
   b4b10:	2003e621 	.word	0x2003e621
   b4b14:	2003e5c0 	.word	0x2003e5c0
   b4b18:	2003e5e0 	.word	0x2003e5e0
   b4b1c:	2003e5f8 	.word	0x2003e5f8
   b4b20:	2003e5e4 	.word	0x2003e5e4
   b4b24:	2003e5ac 	.word	0x2003e5ac
   b4b28:	2003e622 	.word	0x2003e622
   b4b2c:	2003e5d8 	.word	0x2003e5d8
   b4b30:	000b6dc0 	.word	0x000b6dc0
   b4b34:	2003e550 	.word	0x2003e550
   b4b38:	000b6dce 	.word	0x000b6dce

000b4b3c <_GLOBAL__sub_I_hueOn>:
        //Serial.printf("turn off Wemo %d\n", wM);
    } 
}
   b4b3c:	b510      	push	{r4, lr}
String hueCmd;  // Hue command
   b4b3e:	492c      	ldr	r1, [pc, #176]	; (b4bf0 <_GLOBAL__sub_I_hueOn+0xb4>)
   b4b40:	482c      	ldr	r0, [pc, #176]	; (b4bf4 <_GLOBAL__sub_I_hueOn+0xb8>)
   b4b42:	f000 fed2 	bl	b58ea <_ZN6StringC1EPK19__FlashStringHelper>
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b4b46:	4a2c      	ldr	r2, [pc, #176]	; (b4bf8 <_GLOBAL__sub_I_hueOn+0xbc>)
   b4b48:	4b2c      	ldr	r3, [pc, #176]	; (b4bfc <_GLOBAL__sub_I_hueOn+0xc0>)
   b4b4a:	6812      	ldr	r2, [r2, #0]
   b4b4c:	601a      	str	r2, [r3, #0]
   b4b4e:	4a2c      	ldr	r2, [pc, #176]	; (b4c00 <_GLOBAL__sub_I_hueOn+0xc4>)
TCPClient HueClient;
   b4b50:	482c      	ldr	r0, [pc, #176]	; (b4c04 <_GLOBAL__sub_I_hueOn+0xc8>)
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b4b52:	6812      	ldr	r2, [r2, #0]
   b4b54:	605a      	str	r2, [r3, #4]
   b4b56:	4a2c      	ldr	r2, [pc, #176]	; (b4c08 <_GLOBAL__sub_I_hueOn+0xcc>)
   b4b58:	6812      	ldr	r2, [r2, #0]
   b4b5a:	609a      	str	r2, [r3, #8]
   b4b5c:	4a2b      	ldr	r2, [pc, #172]	; (b4c0c <_GLOBAL__sub_I_hueOn+0xd0>)
   b4b5e:	6812      	ldr	r2, [r2, #0]
   b4b60:	60da      	str	r2, [r3, #12]
   b4b62:	4a2b      	ldr	r2, [pc, #172]	; (b4c10 <_GLOBAL__sub_I_hueOn+0xd4>)
   b4b64:	6812      	ldr	r2, [r2, #0]
   b4b66:	611a      	str	r2, [r3, #16]
   b4b68:	4a2a      	ldr	r2, [pc, #168]	; (b4c14 <_GLOBAL__sub_I_hueOn+0xd8>)
   b4b6a:	6812      	ldr	r2, [r2, #0]
   b4b6c:	615a      	str	r2, [r3, #20]
   b4b6e:	4a2a      	ldr	r2, [pc, #168]	; (b4c18 <_GLOBAL__sub_I_hueOn+0xdc>)
   b4b70:	6812      	ldr	r2, [r2, #0]
   b4b72:	619a      	str	r2, [r3, #24]
TCPClient HueClient;
   b4b74:	f001 fa2c 	bl	b5fd0 <_ZN9TCPClientC1Ev>
TCPClient WemoClient;
   b4b78:	4828      	ldr	r0, [pc, #160]	; (b4c1c <_GLOBAL__sub_I_hueOn+0xe0>)
   b4b7a:	f001 fa29 	bl	b5fd0 <_ZN9TCPClientC1Ev>
      _buttonPin = buttonPin;
   b4b7e:	4b28      	ldr	r3, [pc, #160]	; (b4c20 <_GLOBAL__sub_I_hueOn+0xe4>)
   b4b80:	2002      	movs	r0, #2
   b4b82:	6018      	str	r0, [r3, #0]
      pinMode(_buttonPin,INPUT);
   b4b84:	2100      	movs	r1, #0
   b4b86:	f001 fc7f 	bl	b6488 <pinMode>
      _buttonPin = buttonPin;
   b4b8a:	4b26      	ldr	r3, [pc, #152]	; (b4c24 <_GLOBAL__sub_I_hueOn+0xe8>)
   b4b8c:	2403      	movs	r4, #3
   b4b8e:	601c      	str	r4, [r3, #0]
      pinMode(_buttonPin,INPUT);
   b4b90:	4620      	mov	r0, r4
   b4b92:	2100      	movs	r1, #0
   b4b94:	f001 fc78 	bl	b6488 <pinMode>
      _buttonPin = buttonPin;
   b4b98:	4b23      	ldr	r3, [pc, #140]	; (b4c28 <_GLOBAL__sub_I_hueOn+0xec>)
   b4b9a:	2004      	movs	r0, #4
   b4b9c:	6018      	str	r0, [r3, #0]
      pinMode(_buttonPin,INPUT);
   b4b9e:	2100      	movs	r1, #0
   b4ba0:	f001 fc72 	bl	b6488 <pinMode>
      _buttonPin = buttonPin;
   b4ba4:	4b21      	ldr	r3, [pc, #132]	; (b4c2c <_GLOBAL__sub_I_hueOn+0xf0>)
   b4ba6:	2005      	movs	r0, #5
   b4ba8:	6018      	str	r0, [r3, #0]
      pinMode(_buttonPin,INPUT);
   b4baa:	2100      	movs	r1, #0
   b4bac:	f001 fc6c 	bl	b6488 <pinMode>
      _buttonPin = buttonPin;
   b4bb0:	4b1f      	ldr	r3, [pc, #124]	; (b4c30 <_GLOBAL__sub_I_hueOn+0xf4>)
   b4bb2:	2006      	movs	r0, #6
   b4bb4:	6018      	str	r0, [r3, #0]
      pinMode(_buttonPin,INPUT);
   b4bb6:	2100      	movs	r1, #0
   b4bb8:	f001 fc66 	bl	b6488 <pinMode>
      _buttonPin = buttonPin;
   b4bbc:	4b1d      	ldr	r3, [pc, #116]	; (b4c34 <_GLOBAL__sub_I_hueOn+0xf8>)
   b4bbe:	200c      	movs	r0, #12
   b4bc0:	6018      	str	r0, [r3, #0]
      pinMode(_buttonPin,INPUT);
   b4bc2:	2100      	movs	r1, #0
   b4bc4:	f001 fc60 	bl	b6488 <pinMode>
Servo myServo;
   b4bc8:	481b      	ldr	r0, [pc, #108]	; (b4c38 <_GLOBAL__sub_I_hueOn+0xfc>)
   b4bca:	f000 fdd1 	bl	b5770 <_ZN5ServoC1Ev>
Encoder myEnc(PINA,PINB);
   b4bce:	220f      	movs	r2, #15
   b4bd0:	481a      	ldr	r0, [pc, #104]	; (b4c3c <_GLOBAL__sub_I_hueOn+0x100>)
   b4bd2:	210e      	movs	r1, #14
   b4bd4:	f7ff fbd0 	bl	b4378 <_ZN7EncoderC1Ett>
              error_(SYSTEM_ERROR_NONE) {
   b4bd8:	4b19      	ldr	r3, [pc, #100]	; (b4c40 <_GLOBAL__sub_I_hueOn+0x104>)
   b4bda:	2200      	movs	r2, #0
   b4bdc:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b4be0:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4be4:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
   b4be6:	4620      	mov	r0, r4
}
   b4be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4bec:	f000 b9ea 	b.w	b4fc4 <set_system_mode>
   b4bf0:	000b6dbf 	.word	0x000b6dbf
   b4bf4:	2003e5e8 	.word	0x2003e5e8
   b4bf8:	2003e56c 	.word	0x2003e56c
   b4bfc:	2003e550 	.word	0x2003e550
   b4c00:	2003e49c 	.word	0x2003e49c
   b4c04:	2003e534 	.word	0x2003e534
   b4c08:	2003e4a4 	.word	0x2003e4a4
   b4c0c:	2003e494 	.word	0x2003e494
   b4c10:	2003e490 	.word	0x2003e490
   b4c14:	2003e498 	.word	0x2003e498
   b4c18:	2003e4a0 	.word	0x2003e4a0
   b4c1c:	2003e57c 	.word	0x2003e57c
   b4c20:	2003e5b0 	.word	0x2003e5b0
   b4c24:	2003e5b8 	.word	0x2003e5b8
   b4c28:	2003e5c0 	.word	0x2003e5c0
   b4c2c:	2003e5c8 	.word	0x2003e5c8
   b4c30:	2003e5d0 	.word	0x2003e5d0
   b4c34:	2003e5d8 	.word	0x2003e5d8
   b4c38:	2003e610 	.word	0x2003e610
   b4c3c:	2003e5f8 	.word	0x2003e5f8
   b4c40:	2003e570 	.word	0x2003e570

000b4c44 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   b4c44:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b4c46:	f000 f82d 	bl	b4ca4 <HAL_Pin_Map>
   b4c4a:	4b01      	ldr	r3, [pc, #4]	; (b4c50 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b4c4c:	6018      	str	r0, [r3, #0]
}
   b4c4e:	bd08      	pop	{r3, pc}
   b4c50:	2003e630 	.word	0x2003e630

000b4c54 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4c54:	b508      	push	{r3, lr}
   b4c56:	4b02      	ldr	r3, [pc, #8]	; (b4c60 <os_mutex_recursive_create+0xc>)
   b4c58:	681b      	ldr	r3, [r3, #0]
   b4c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4c5c:	9301      	str	r3, [sp, #4]
   b4c5e:	bd08      	pop	{r3, pc}
   b4c60:	00030248 	.word	0x00030248

000b4c64 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4c64:	b508      	push	{r3, lr}
   b4c66:	4b02      	ldr	r3, [pc, #8]	; (b4c70 <HAL_RNG_GetRandomNumber+0xc>)
   b4c68:	681b      	ldr	r3, [r3, #0]
   b4c6a:	685b      	ldr	r3, [r3, #4]
   b4c6c:	9301      	str	r3, [sp, #4]
   b4c6e:	bd08      	pop	{r3, pc}
   b4c70:	00030218 	.word	0x00030218

000b4c74 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4c74:	b508      	push	{r3, lr}
   b4c76:	4b02      	ldr	r3, [pc, #8]	; (b4c80 <HAL_Delay_Microseconds+0xc>)
   b4c78:	681b      	ldr	r3, [r3, #0]
   b4c7a:	68db      	ldr	r3, [r3, #12]
   b4c7c:	9301      	str	r3, [sp, #4]
   b4c7e:	bd08      	pop	{r3, pc}
   b4c80:	00030218 	.word	0x00030218

000b4c84 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4c84:	b508      	push	{r3, lr}
   b4c86:	4b02      	ldr	r3, [pc, #8]	; (b4c90 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4c88:	681b      	ldr	r3, [r3, #0]
   b4c8a:	695b      	ldr	r3, [r3, #20]
   b4c8c:	9301      	str	r3, [sp, #4]
   b4c8e:	bd08      	pop	{r3, pc}
   b4c90:	00030218 	.word	0x00030218

000b4c94 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b4c94:	b508      	push	{r3, lr}
   b4c96:	4b02      	ldr	r3, [pc, #8]	; (b4ca0 <hal_timer_millis+0xc>)
   b4c98:	681b      	ldr	r3, [r3, #0]
   b4c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b4c9c:	9301      	str	r3, [sp, #4]
   b4c9e:	bd08      	pop	{r3, pc}
   b4ca0:	00030218 	.word	0x00030218

000b4ca4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b4ca4:	b508      	push	{r3, lr}
   b4ca6:	4b02      	ldr	r3, [pc, #8]	; (b4cb0 <HAL_Pin_Map+0xc>)
   b4ca8:	681b      	ldr	r3, [r3, #0]
   b4caa:	681b      	ldr	r3, [r3, #0]
   b4cac:	9301      	str	r3, [sp, #4]
   b4cae:	bd08      	pop	{r3, pc}
   b4cb0:	0003022c 	.word	0x0003022c

000b4cb4 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b4cb4:	b508      	push	{r3, lr}
   b4cb6:	4b02      	ldr	r3, [pc, #8]	; (b4cc0 <HAL_Validate_Pin_Function+0xc>)
   b4cb8:	681b      	ldr	r3, [r3, #0]
   b4cba:	685b      	ldr	r3, [r3, #4]
   b4cbc:	9301      	str	r3, [sp, #4]
   b4cbe:	bd08      	pop	{r3, pc}
   b4cc0:	0003022c 	.word	0x0003022c

000b4cc4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4cc4:	b508      	push	{r3, lr}
   b4cc6:	4b02      	ldr	r3, [pc, #8]	; (b4cd0 <HAL_Pin_Mode+0xc>)
   b4cc8:	681b      	ldr	r3, [r3, #0]
   b4cca:	689b      	ldr	r3, [r3, #8]
   b4ccc:	9301      	str	r3, [sp, #4]
   b4cce:	bd08      	pop	{r3, pc}
   b4cd0:	0003022c 	.word	0x0003022c

000b4cd4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4cd4:	b508      	push	{r3, lr}
   b4cd6:	4b02      	ldr	r3, [pc, #8]	; (b4ce0 <HAL_Get_Pin_Mode+0xc>)
   b4cd8:	681b      	ldr	r3, [r3, #0]
   b4cda:	68db      	ldr	r3, [r3, #12]
   b4cdc:	9301      	str	r3, [sp, #4]
   b4cde:	bd08      	pop	{r3, pc}
   b4ce0:	0003022c 	.word	0x0003022c

000b4ce4 <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b4ce4:	b508      	push	{r3, lr}
   b4ce6:	4b02      	ldr	r3, [pc, #8]	; (b4cf0 <HAL_GPIO_Read+0xc>)
   b4ce8:	681b      	ldr	r3, [r3, #0]
   b4cea:	695b      	ldr	r3, [r3, #20]
   b4cec:	9301      	str	r3, [sp, #4]
   b4cee:	bd08      	pop	{r3, pc}
   b4cf0:	0003022c 	.word	0x0003022c

000b4cf4 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b4cf4:	b508      	push	{r3, lr}
   b4cf6:	4b02      	ldr	r3, [pc, #8]	; (b4d00 <HAL_Interrupts_Attach+0xc>)
   b4cf8:	681b      	ldr	r3, [r3, #0]
   b4cfa:	699b      	ldr	r3, [r3, #24]
   b4cfc:	9301      	str	r3, [sp, #4]
   b4cfe:	bd08      	pop	{r3, pc}
   b4d00:	0003022c 	.word	0x0003022c

000b4d04 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b4d04:	b508      	push	{r3, lr}
   b4d06:	4b02      	ldr	r3, [pc, #8]	; (b4d10 <HAL_Interrupts_Detach+0xc>)
   b4d08:	681b      	ldr	r3, [r3, #0]
   b4d0a:	69db      	ldr	r3, [r3, #28]
   b4d0c:	9301      	str	r3, [sp, #4]
   b4d0e:	bd08      	pop	{r3, pc}
   b4d10:	0003022c 	.word	0x0003022c

000b4d14 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   b4d14:	b508      	push	{r3, lr}
   b4d16:	4b02      	ldr	r3, [pc, #8]	; (b4d20 <HAL_Interrupts_Enable_All+0xc>)
   b4d18:	681b      	ldr	r3, [r3, #0]
   b4d1a:	6a1b      	ldr	r3, [r3, #32]
   b4d1c:	9301      	str	r3, [sp, #4]
   b4d1e:	bd08      	pop	{r3, pc}
   b4d20:	0003022c 	.word	0x0003022c

000b4d24 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   b4d24:	b508      	push	{r3, lr}
   b4d26:	4b02      	ldr	r3, [pc, #8]	; (b4d30 <HAL_Interrupts_Disable_All+0xc>)
   b4d28:	681b      	ldr	r3, [r3, #0]
   b4d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4d2c:	9301      	str	r3, [sp, #4]
   b4d2e:	bd08      	pop	{r3, pc}
   b4d30:	0003022c 	.word	0x0003022c

000b4d34 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4d34:	b508      	push	{r3, lr}
   b4d36:	4b02      	ldr	r3, [pc, #8]	; (b4d40 <hal_i2c_write+0xc>)
   b4d38:	681b      	ldr	r3, [r3, #0]
   b4d3a:	6a1b      	ldr	r3, [r3, #32]
   b4d3c:	9301      	str	r3, [sp, #4]
   b4d3e:	bd08      	pop	{r3, pc}
   b4d40:	00030228 	.word	0x00030228

000b4d44 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4d44:	b508      	push	{r3, lr}
   b4d46:	4b02      	ldr	r3, [pc, #8]	; (b4d50 <hal_i2c_available+0xc>)
   b4d48:	681b      	ldr	r3, [r3, #0]
   b4d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4d4c:	9301      	str	r3, [sp, #4]
   b4d4e:	bd08      	pop	{r3, pc}
   b4d50:	00030228 	.word	0x00030228

000b4d54 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4d54:	b508      	push	{r3, lr}
   b4d56:	4b02      	ldr	r3, [pc, #8]	; (b4d60 <hal_i2c_read+0xc>)
   b4d58:	681b      	ldr	r3, [r3, #0]
   b4d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4d5c:	9301      	str	r3, [sp, #4]
   b4d5e:	bd08      	pop	{r3, pc}
   b4d60:	00030228 	.word	0x00030228

000b4d64 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4d64:	b508      	push	{r3, lr}
   b4d66:	4b02      	ldr	r3, [pc, #8]	; (b4d70 <hal_i2c_peek+0xc>)
   b4d68:	681b      	ldr	r3, [r3, #0]
   b4d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4d6c:	9301      	str	r3, [sp, #4]
   b4d6e:	bd08      	pop	{r3, pc}
   b4d70:	00030228 	.word	0x00030228

000b4d74 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4d74:	b508      	push	{r3, lr}
   b4d76:	4b02      	ldr	r3, [pc, #8]	; (b4d80 <hal_i2c_flush+0xc>)
   b4d78:	681b      	ldr	r3, [r3, #0]
   b4d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4d7c:	9301      	str	r3, [sp, #4]
   b4d7e:	bd08      	pop	{r3, pc}
   b4d80:	00030228 	.word	0x00030228

000b4d84 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4d84:	b508      	push	{r3, lr}
   b4d86:	4b02      	ldr	r3, [pc, #8]	; (b4d90 <hal_i2c_is_enabled+0xc>)
   b4d88:	681b      	ldr	r3, [r3, #0]
   b4d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4d8c:	9301      	str	r3, [sp, #4]
   b4d8e:	bd08      	pop	{r3, pc}
   b4d90:	00030228 	.word	0x00030228

000b4d94 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4d94:	b508      	push	{r3, lr}
   b4d96:	4b02      	ldr	r3, [pc, #8]	; (b4da0 <hal_i2c_init+0xc>)
   b4d98:	681b      	ldr	r3, [r3, #0]
   b4d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d9c:	9301      	str	r3, [sp, #4]
   b4d9e:	bd08      	pop	{r3, pc}
   b4da0:	00030228 	.word	0x00030228

000b4da4 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b4da4:	b508      	push	{r3, lr}
   b4da6:	4b02      	ldr	r3, [pc, #8]	; (b4db0 <if_index_to_name+0xc>)
   b4da8:	681b      	ldr	r3, [r3, #0]
   b4daa:	695b      	ldr	r3, [r3, #20]
   b4dac:	9301      	str	r3, [sp, #4]
   b4dae:	bd08      	pop	{r3, pc}
   b4db0:	0003026c 	.word	0x0003026c

000b4db4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4db4:	b508      	push	{r3, lr}
   b4db6:	4b02      	ldr	r3, [pc, #8]	; (b4dc0 <inet_inet_ntop+0xc>)
   b4db8:	681b      	ldr	r3, [r3, #0]
   b4dba:	695b      	ldr	r3, [r3, #20]
   b4dbc:	9301      	str	r3, [sp, #4]
   b4dbe:	bd08      	pop	{r3, pc}
   b4dc0:	00030264 	.word	0x00030264

000b4dc4 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b4dc4:	b508      	push	{r3, lr}
   b4dc6:	4b02      	ldr	r3, [pc, #8]	; (b4dd0 <inet_htonl+0xc>)
   b4dc8:	681b      	ldr	r3, [r3, #0]
   b4dca:	6a1b      	ldr	r3, [r3, #32]
   b4dcc:	9301      	str	r3, [sp, #4]
   b4dce:	bd08      	pop	{r3, pc}
   b4dd0:	00030264 	.word	0x00030264

000b4dd4 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b4dd4:	b508      	push	{r3, lr}
   b4dd6:	4b02      	ldr	r3, [pc, #8]	; (b4de0 <inet_htons+0xc>)
   b4dd8:	681b      	ldr	r3, [r3, #0]
   b4dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4ddc:	9301      	str	r3, [sp, #4]
   b4dde:	bd08      	pop	{r3, pc}
   b4de0:	00030264 	.word	0x00030264

000b4de4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4de4:	b508      	push	{r3, lr}
   b4de6:	4b02      	ldr	r3, [pc, #8]	; (b4df0 <netdb_freeaddrinfo+0xc>)
   b4de8:	681b      	ldr	r3, [r3, #0]
   b4dea:	689b      	ldr	r3, [r3, #8]
   b4dec:	9301      	str	r3, [sp, #4]
   b4dee:	bd08      	pop	{r3, pc}
   b4df0:	00030268 	.word	0x00030268

000b4df4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4df4:	b508      	push	{r3, lr}
   b4df6:	4b02      	ldr	r3, [pc, #8]	; (b4e00 <netdb_getaddrinfo+0xc>)
   b4df8:	681b      	ldr	r3, [r3, #0]
   b4dfa:	68db      	ldr	r3, [r3, #12]
   b4dfc:	9301      	str	r3, [sp, #4]
   b4dfe:	bd08      	pop	{r3, pc}
   b4e00:	00030268 	.word	0x00030268

000b4e04 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
   b4e04:	b508      	push	{r3, lr}
   b4e06:	4b02      	ldr	r3, [pc, #8]	; (b4e10 <HAL_Servo_Attach+0xc>)
   b4e08:	681b      	ldr	r3, [r3, #0]
   b4e0a:	691b      	ldr	r3, [r3, #16]
   b4e0c:	9301      	str	r3, [sp, #4]
   b4e0e:	bd08      	pop	{r3, pc}
   b4e10:	00030224 	.word	0x00030224

000b4e14 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
   b4e14:	b508      	push	{r3, lr}
   b4e16:	4b02      	ldr	r3, [pc, #8]	; (b4e20 <HAL_Servo_Detach+0xc>)
   b4e18:	681b      	ldr	r3, [r3, #0]
   b4e1a:	695b      	ldr	r3, [r3, #20]
   b4e1c:	9301      	str	r3, [sp, #4]
   b4e1e:	bd08      	pop	{r3, pc}
   b4e20:	00030224 	.word	0x00030224

000b4e24 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b4e24:	b508      	push	{r3, lr}
   b4e26:	4b02      	ldr	r3, [pc, #8]	; (b4e30 <sock_setsockopt+0xc>)
   b4e28:	681b      	ldr	r3, [r3, #0]
   b4e2a:	699b      	ldr	r3, [r3, #24]
   b4e2c:	9301      	str	r3, [sp, #4]
   b4e2e:	bd08      	pop	{r3, pc}
   b4e30:	00030238 	.word	0x00030238

000b4e34 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b4e34:	b508      	push	{r3, lr}
   b4e36:	4b02      	ldr	r3, [pc, #8]	; (b4e40 <sock_close+0xc>)
   b4e38:	681b      	ldr	r3, [r3, #0]
   b4e3a:	69db      	ldr	r3, [r3, #28]
   b4e3c:	9301      	str	r3, [sp, #4]
   b4e3e:	bd08      	pop	{r3, pc}
   b4e40:	00030238 	.word	0x00030238

000b4e44 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b4e44:	b508      	push	{r3, lr}
   b4e46:	4b02      	ldr	r3, [pc, #8]	; (b4e50 <sock_connect+0xc>)
   b4e48:	681b      	ldr	r3, [r3, #0]
   b4e4a:	6a1b      	ldr	r3, [r3, #32]
   b4e4c:	9301      	str	r3, [sp, #4]
   b4e4e:	bd08      	pop	{r3, pc}
   b4e50:	00030238 	.word	0x00030238

000b4e54 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b4e54:	b508      	push	{r3, lr}
   b4e56:	4b02      	ldr	r3, [pc, #8]	; (b4e60 <sock_recv+0xc>)
   b4e58:	681b      	ldr	r3, [r3, #0]
   b4e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4e5c:	9301      	str	r3, [sp, #4]
   b4e5e:	bd08      	pop	{r3, pc}
   b4e60:	00030238 	.word	0x00030238

000b4e64 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b4e64:	b508      	push	{r3, lr}
   b4e66:	4b02      	ldr	r3, [pc, #8]	; (b4e70 <sock_send+0xc>)
   b4e68:	681b      	ldr	r3, [r3, #0]
   b4e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4e6c:	9301      	str	r3, [sp, #4]
   b4e6e:	bd08      	pop	{r3, pc}
   b4e70:	00030238 	.word	0x00030238

000b4e74 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b4e74:	b508      	push	{r3, lr}
   b4e76:	4b02      	ldr	r3, [pc, #8]	; (b4e80 <sock_socket+0xc>)
   b4e78:	681b      	ldr	r3, [r3, #0]
   b4e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4e7c:	9301      	str	r3, [sp, #4]
   b4e7e:	bd08      	pop	{r3, pc}
   b4e80:	00030238 	.word	0x00030238

000b4e84 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4e84:	b508      	push	{r3, lr}
   b4e86:	4b02      	ldr	r3, [pc, #8]	; (b4e90 <hal_spi_init+0xc>)
   b4e88:	681b      	ldr	r3, [r3, #0]
   b4e8a:	69db      	ldr	r3, [r3, #28]
   b4e8c:	9301      	str	r3, [sp, #4]
   b4e8e:	bd08      	pop	{r3, pc}
   b4e90:	00030230 	.word	0x00030230

000b4e94 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4e94:	b508      	push	{r3, lr}
   b4e96:	4b02      	ldr	r3, [pc, #8]	; (b4ea0 <hal_spi_is_enabled+0xc>)
   b4e98:	681b      	ldr	r3, [r3, #0]
   b4e9a:	6a1b      	ldr	r3, [r3, #32]
   b4e9c:	9301      	str	r3, [sp, #4]
   b4e9e:	bd08      	pop	{r3, pc}
   b4ea0:	00030230 	.word	0x00030230

000b4ea4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4ea4:	b508      	push	{r3, lr}
   b4ea6:	4b02      	ldr	r3, [pc, #8]	; (b4eb0 <hal_usart_write+0xc>)
   b4ea8:	681b      	ldr	r3, [r3, #0]
   b4eaa:	68db      	ldr	r3, [r3, #12]
   b4eac:	9301      	str	r3, [sp, #4]
   b4eae:	bd08      	pop	{r3, pc}
   b4eb0:	0003023c 	.word	0x0003023c

000b4eb4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4eb4:	b508      	push	{r3, lr}
   b4eb6:	4b02      	ldr	r3, [pc, #8]	; (b4ec0 <hal_usart_available+0xc>)
   b4eb8:	681b      	ldr	r3, [r3, #0]
   b4eba:	691b      	ldr	r3, [r3, #16]
   b4ebc:	9301      	str	r3, [sp, #4]
   b4ebe:	bd08      	pop	{r3, pc}
   b4ec0:	0003023c 	.word	0x0003023c

000b4ec4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4ec4:	b508      	push	{r3, lr}
   b4ec6:	4b02      	ldr	r3, [pc, #8]	; (b4ed0 <hal_usart_read+0xc>)
   b4ec8:	681b      	ldr	r3, [r3, #0]
   b4eca:	695b      	ldr	r3, [r3, #20]
   b4ecc:	9301      	str	r3, [sp, #4]
   b4ece:	bd08      	pop	{r3, pc}
   b4ed0:	0003023c 	.word	0x0003023c

000b4ed4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4ed4:	b508      	push	{r3, lr}
   b4ed6:	4b02      	ldr	r3, [pc, #8]	; (b4ee0 <hal_usart_peek+0xc>)
   b4ed8:	681b      	ldr	r3, [r3, #0]
   b4eda:	699b      	ldr	r3, [r3, #24]
   b4edc:	9301      	str	r3, [sp, #4]
   b4ede:	bd08      	pop	{r3, pc}
   b4ee0:	0003023c 	.word	0x0003023c

000b4ee4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4ee4:	b508      	push	{r3, lr}
   b4ee6:	4b02      	ldr	r3, [pc, #8]	; (b4ef0 <hal_usart_flush+0xc>)
   b4ee8:	681b      	ldr	r3, [r3, #0]
   b4eea:	69db      	ldr	r3, [r3, #28]
   b4eec:	9301      	str	r3, [sp, #4]
   b4eee:	bd08      	pop	{r3, pc}
   b4ef0:	0003023c 	.word	0x0003023c

000b4ef4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4ef4:	b508      	push	{r3, lr}
   b4ef6:	4b02      	ldr	r3, [pc, #8]	; (b4f00 <hal_usart_is_enabled+0xc>)
   b4ef8:	681b      	ldr	r3, [r3, #0]
   b4efa:	6a1b      	ldr	r3, [r3, #32]
   b4efc:	9301      	str	r3, [sp, #4]
   b4efe:	bd08      	pop	{r3, pc}
   b4f00:	0003023c 	.word	0x0003023c

000b4f04 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4f04:	b508      	push	{r3, lr}
   b4f06:	4b02      	ldr	r3, [pc, #8]	; (b4f10 <hal_usart_available_data_for_write+0xc>)
   b4f08:	681b      	ldr	r3, [r3, #0]
   b4f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4f0c:	9301      	str	r3, [sp, #4]
   b4f0e:	bd08      	pop	{r3, pc}
   b4f10:	0003023c 	.word	0x0003023c

000b4f14 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4f14:	b508      	push	{r3, lr}
   b4f16:	4b02      	ldr	r3, [pc, #8]	; (b4f20 <hal_usart_init_ex+0xc>)
   b4f18:	681b      	ldr	r3, [r3, #0]
   b4f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4f1c:	9301      	str	r3, [sp, #4]
   b4f1e:	bd08      	pop	{r3, pc}
   b4f20:	0003023c 	.word	0x0003023c

000b4f24 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4f24:	b508      	push	{r3, lr}
   b4f26:	4b02      	ldr	r3, [pc, #8]	; (b4f30 <HAL_USB_USART_Init+0xc>)
   b4f28:	681b      	ldr	r3, [r3, #0]
   b4f2a:	681b      	ldr	r3, [r3, #0]
   b4f2c:	9301      	str	r3, [sp, #4]
   b4f2e:	bd08      	pop	{r3, pc}
   b4f30:	0003024c 	.word	0x0003024c

000b4f34 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4f34:	b508      	push	{r3, lr}
   b4f36:	4b02      	ldr	r3, [pc, #8]	; (b4f40 <HAL_USB_USART_Begin+0xc>)
   b4f38:	681b      	ldr	r3, [r3, #0]
   b4f3a:	685b      	ldr	r3, [r3, #4]
   b4f3c:	9301      	str	r3, [sp, #4]
   b4f3e:	bd08      	pop	{r3, pc}
   b4f40:	0003024c 	.word	0x0003024c

000b4f44 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4f44:	b508      	push	{r3, lr}
   b4f46:	4b02      	ldr	r3, [pc, #8]	; (b4f50 <HAL_USB_USART_Available_Data+0xc>)
   b4f48:	681b      	ldr	r3, [r3, #0]
   b4f4a:	691b      	ldr	r3, [r3, #16]
   b4f4c:	9301      	str	r3, [sp, #4]
   b4f4e:	bd08      	pop	{r3, pc}
   b4f50:	0003024c 	.word	0x0003024c

000b4f54 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4f54:	b508      	push	{r3, lr}
   b4f56:	4b02      	ldr	r3, [pc, #8]	; (b4f60 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4f58:	681b      	ldr	r3, [r3, #0]
   b4f5a:	695b      	ldr	r3, [r3, #20]
   b4f5c:	9301      	str	r3, [sp, #4]
   b4f5e:	bd08      	pop	{r3, pc}
   b4f60:	0003024c 	.word	0x0003024c

000b4f64 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4f64:	b508      	push	{r3, lr}
   b4f66:	4b02      	ldr	r3, [pc, #8]	; (b4f70 <HAL_USB_USART_Receive_Data+0xc>)
   b4f68:	681b      	ldr	r3, [r3, #0]
   b4f6a:	699b      	ldr	r3, [r3, #24]
   b4f6c:	9301      	str	r3, [sp, #4]
   b4f6e:	bd08      	pop	{r3, pc}
   b4f70:	0003024c 	.word	0x0003024c

000b4f74 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4f74:	b508      	push	{r3, lr}
   b4f76:	4b02      	ldr	r3, [pc, #8]	; (b4f80 <HAL_USB_USART_Send_Data+0xc>)
   b4f78:	681b      	ldr	r3, [r3, #0]
   b4f7a:	69db      	ldr	r3, [r3, #28]
   b4f7c:	9301      	str	r3, [sp, #4]
   b4f7e:	bd08      	pop	{r3, pc}
   b4f80:	0003024c 	.word	0x0003024c

000b4f84 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4f84:	b508      	push	{r3, lr}
   b4f86:	4b02      	ldr	r3, [pc, #8]	; (b4f90 <HAL_USB_USART_Flush_Data+0xc>)
   b4f88:	681b      	ldr	r3, [r3, #0]
   b4f8a:	6a1b      	ldr	r3, [r3, #32]
   b4f8c:	9301      	str	r3, [sp, #4]
   b4f8e:	bd08      	pop	{r3, pc}
   b4f90:	0003024c 	.word	0x0003024c

000b4f94 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b4f94:	b508      	push	{r3, lr}
   b4f96:	4b02      	ldr	r3, [pc, #8]	; (b4fa0 <HAL_USB_USART_Is_Connected+0xc>)
   b4f98:	681b      	ldr	r3, [r3, #0]
   b4f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4f9c:	9301      	str	r3, [sp, #4]
   b4f9e:	bd08      	pop	{r3, pc}
   b4fa0:	0003024c 	.word	0x0003024c

000b4fa4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b4fa4:	b508      	push	{r3, lr}
   b4fa6:	4b02      	ldr	r3, [pc, #8]	; (b4fb0 <panic_+0xc>)
   b4fa8:	681b      	ldr	r3, [r3, #0]
   b4faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4fac:	9301      	str	r3, [sp, #4]
   b4fae:	bd08      	pop	{r3, pc}
   b4fb0:	00030260 	.word	0x00030260

000b4fb4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4fb4:	b508      	push	{r3, lr}
   b4fb6:	4b02      	ldr	r3, [pc, #8]	; (b4fc0 <log_message+0xc>)
   b4fb8:	681b      	ldr	r3, [r3, #0]
   b4fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4fbc:	9301      	str	r3, [sp, #4]
   b4fbe:	bd08      	pop	{r3, pc}
   b4fc0:	00030260 	.word	0x00030260

000b4fc4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4fc4:	b508      	push	{r3, lr}
   b4fc6:	4b02      	ldr	r3, [pc, #8]	; (b4fd0 <set_system_mode+0xc>)
   b4fc8:	681b      	ldr	r3, [r3, #0]
   b4fca:	685b      	ldr	r3, [r3, #4]
   b4fcc:	9301      	str	r3, [sp, #4]
   b4fce:	bd08      	pop	{r3, pc}
   b4fd0:	00030220 	.word	0x00030220

000b4fd4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4fd4:	b508      	push	{r3, lr}
   b4fd6:	4b02      	ldr	r3, [pc, #8]	; (b4fe0 <system_delay_ms+0xc>)
   b4fd8:	681b      	ldr	r3, [r3, #0]
   b4fda:	695b      	ldr	r3, [r3, #20]
   b4fdc:	9301      	str	r3, [sp, #4]
   b4fde:	bd08      	pop	{r3, pc}
   b4fe0:	00030220 	.word	0x00030220

000b4fe4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4fe4:	b508      	push	{r3, lr}
   b4fe6:	4b03      	ldr	r3, [pc, #12]	; (b4ff4 <system_ctrl_set_app_request_handler+0x10>)
   b4fe8:	681b      	ldr	r3, [r3, #0]
   b4fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4fee:	9301      	str	r3, [sp, #4]
   b4ff0:	bd08      	pop	{r3, pc}
   b4ff2:	0000      	.short	0x0000
   b4ff4:	00030220 	.word	0x00030220

000b4ff8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4ff8:	b508      	push	{r3, lr}
   b4ffa:	4b03      	ldr	r3, [pc, #12]	; (b5008 <system_ctrl_set_result+0x10>)
   b4ffc:	681b      	ldr	r3, [r3, #0]
   b4ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5002:	9301      	str	r3, [sp, #4]
   b5004:	bd08      	pop	{r3, pc}
   b5006:	0000      	.short	0x0000
   b5008:	00030220 	.word	0x00030220

000b500c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b500c:	b508      	push	{r3, lr}
   b500e:	4b02      	ldr	r3, [pc, #8]	; (b5018 <spark_process+0xc>)
   b5010:	681b      	ldr	r3, [r3, #0]
   b5012:	689b      	ldr	r3, [r3, #8]
   b5014:	9301      	str	r3, [sp, #4]
   b5016:	bd08      	pop	{r3, pc}
   b5018:	00030244 	.word	0x00030244

000b501c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b501c:	b508      	push	{r3, lr}
   b501e:	4b02      	ldr	r3, [pc, #8]	; (b5028 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5020:	681b      	ldr	r3, [r3, #0]
   b5022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5024:	9301      	str	r3, [sp, #4]
   b5026:	bd08      	pop	{r3, pc}
   b5028:	00030244 	.word	0x00030244

000b502c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b502c:	b508      	push	{r3, lr}
   b502e:	4b02      	ldr	r3, [pc, #8]	; (b5038 <network_connect+0xc>)
   b5030:	681b      	ldr	r3, [r3, #0]
   b5032:	685b      	ldr	r3, [r3, #4]
   b5034:	9301      	str	r3, [sp, #4]
   b5036:	bd08      	pop	{r3, pc}
   b5038:	00030240 	.word	0x00030240

000b503c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b503c:	b508      	push	{r3, lr}
   b503e:	4b02      	ldr	r3, [pc, #8]	; (b5048 <network_connecting+0xc>)
   b5040:	681b      	ldr	r3, [r3, #0]
   b5042:	689b      	ldr	r3, [r3, #8]
   b5044:	9301      	str	r3, [sp, #4]
   b5046:	bd08      	pop	{r3, pc}
   b5048:	00030240 	.word	0x00030240

000b504c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b504c:	b508      	push	{r3, lr}
   b504e:	4b02      	ldr	r3, [pc, #8]	; (b5058 <network_disconnect+0xc>)
   b5050:	681b      	ldr	r3, [r3, #0]
   b5052:	68db      	ldr	r3, [r3, #12]
   b5054:	9301      	str	r3, [sp, #4]
   b5056:	bd08      	pop	{r3, pc}
   b5058:	00030240 	.word	0x00030240

000b505c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b505c:	b508      	push	{r3, lr}
   b505e:	4b02      	ldr	r3, [pc, #8]	; (b5068 <network_ready+0xc>)
   b5060:	681b      	ldr	r3, [r3, #0]
   b5062:	691b      	ldr	r3, [r3, #16]
   b5064:	9301      	str	r3, [sp, #4]
   b5066:	bd08      	pop	{r3, pc}
   b5068:	00030240 	.word	0x00030240

000b506c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b506c:	b508      	push	{r3, lr}
   b506e:	4b02      	ldr	r3, [pc, #8]	; (b5078 <network_on+0xc>)
   b5070:	681b      	ldr	r3, [r3, #0]
   b5072:	695b      	ldr	r3, [r3, #20]
   b5074:	9301      	str	r3, [sp, #4]
   b5076:	bd08      	pop	{r3, pc}
   b5078:	00030240 	.word	0x00030240

000b507c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b507c:	b508      	push	{r3, lr}
   b507e:	4b02      	ldr	r3, [pc, #8]	; (b5088 <network_off+0xc>)
   b5080:	681b      	ldr	r3, [r3, #0]
   b5082:	699b      	ldr	r3, [r3, #24]
   b5084:	9301      	str	r3, [sp, #4]
   b5086:	bd08      	pop	{r3, pc}
   b5088:	00030240 	.word	0x00030240

000b508c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b508c:	b508      	push	{r3, lr}
   b508e:	4b02      	ldr	r3, [pc, #8]	; (b5098 <network_listen+0xc>)
   b5090:	681b      	ldr	r3, [r3, #0]
   b5092:	69db      	ldr	r3, [r3, #28]
   b5094:	9301      	str	r3, [sp, #4]
   b5096:	bd08      	pop	{r3, pc}
   b5098:	00030240 	.word	0x00030240

000b509c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b509c:	b508      	push	{r3, lr}
   b509e:	4b02      	ldr	r3, [pc, #8]	; (b50a8 <network_listening+0xc>)
   b50a0:	681b      	ldr	r3, [r3, #0]
   b50a2:	6a1b      	ldr	r3, [r3, #32]
   b50a4:	9301      	str	r3, [sp, #4]
   b50a6:	bd08      	pop	{r3, pc}
   b50a8:	00030240 	.word	0x00030240

000b50ac <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b50ac:	b508      	push	{r3, lr}
   b50ae:	4b02      	ldr	r3, [pc, #8]	; (b50b8 <network_set_credentials+0xc>)
   b50b0:	681b      	ldr	r3, [r3, #0]
   b50b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b50b4:	9301      	str	r3, [sp, #4]
   b50b6:	bd08      	pop	{r3, pc}
   b50b8:	00030240 	.word	0x00030240

000b50bc <network_set_listen_timeout>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b50bc:	b508      	push	{r3, lr}
   b50be:	4b02      	ldr	r3, [pc, #8]	; (b50c8 <network_set_listen_timeout+0xc>)
   b50c0:	681b      	ldr	r3, [r3, #0]
   b50c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b50c4:	9301      	str	r3, [sp, #4]
   b50c6:	bd08      	pop	{r3, pc}
   b50c8:	00030240 	.word	0x00030240

000b50cc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b50cc:	b508      	push	{r3, lr}
   b50ce:	4b02      	ldr	r3, [pc, #8]	; (b50d8 <network_get_listen_timeout+0xc>)
   b50d0:	681b      	ldr	r3, [r3, #0]
   b50d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b50d4:	9301      	str	r3, [sp, #4]
   b50d6:	bd08      	pop	{r3, pc}
   b50d8:	00030240 	.word	0x00030240

000b50dc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b50dc:	b508      	push	{r3, lr}
   b50de:	4b02      	ldr	r3, [pc, #8]	; (b50e8 <network_is_on+0xc>)
   b50e0:	681b      	ldr	r3, [r3, #0]
   b50e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b50e4:	9301      	str	r3, [sp, #4]
   b50e6:	bd08      	pop	{r3, pc}
   b50e8:	00030240 	.word	0x00030240

000b50ec <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b50ec:	b508      	push	{r3, lr}
   b50ee:	4b02      	ldr	r3, [pc, #8]	; (b50f8 <network_is_off+0xc>)
   b50f0:	681b      	ldr	r3, [r3, #0]
   b50f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b50f4:	9301      	str	r3, [sp, #4]
   b50f6:	bd08      	pop	{r3, pc}
   b50f8:	00030240 	.word	0x00030240

000b50fc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b50fc:	b508      	push	{r3, lr}
   b50fe:	4b02      	ldr	r3, [pc, #8]	; (b5108 <malloc+0xc>)
   b5100:	681b      	ldr	r3, [r3, #0]
   b5102:	681b      	ldr	r3, [r3, #0]
   b5104:	9301      	str	r3, [sp, #4]
   b5106:	bd08      	pop	{r3, pc}
   b5108:	0003021c 	.word	0x0003021c

000b510c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b510c:	b508      	push	{r3, lr}
   b510e:	4b02      	ldr	r3, [pc, #8]	; (b5118 <free+0xc>)
   b5110:	681b      	ldr	r3, [r3, #0]
   b5112:	685b      	ldr	r3, [r3, #4]
   b5114:	9301      	str	r3, [sp, #4]
   b5116:	bd08      	pop	{r3, pc}
   b5118:	0003021c 	.word	0x0003021c

000b511c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b511c:	b508      	push	{r3, lr}
   b511e:	4b02      	ldr	r3, [pc, #8]	; (b5128 <realloc+0xc>)
   b5120:	681b      	ldr	r3, [r3, #0]
   b5122:	689b      	ldr	r3, [r3, #8]
   b5124:	9301      	str	r3, [sp, #4]
   b5126:	bd08      	pop	{r3, pc}
   b5128:	0003021c 	.word	0x0003021c

000b512c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b512c:	b508      	push	{r3, lr}
   b512e:	4b02      	ldr	r3, [pc, #8]	; (b5138 <vsnprintf+0xc>)
   b5130:	681b      	ldr	r3, [r3, #0]
   b5132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5134:	9301      	str	r3, [sp, #4]
   b5136:	bd08      	pop	{r3, pc}
   b5138:	0003021c 	.word	0x0003021c

000b513c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b513c:	b508      	push	{r3, lr}
   b513e:	4b02      	ldr	r3, [pc, #8]	; (b5148 <abort+0xc>)
   b5140:	681b      	ldr	r3, [r3, #0]
   b5142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5144:	9301      	str	r3, [sp, #4]
   b5146:	bd08      	pop	{r3, pc}
   b5148:	0003021c 	.word	0x0003021c

000b514c <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b514c:	b508      	push	{r3, lr}
   b514e:	4b02      	ldr	r3, [pc, #8]	; (b5158 <__errno+0xc>)
   b5150:	681b      	ldr	r3, [r3, #0]
   b5152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5154:	9301      	str	r3, [sp, #4]
   b5156:	bd08      	pop	{r3, pc}
   b5158:	0003021c 	.word	0x0003021c

000b515c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b515c:	b508      	push	{r3, lr}
   b515e:	4b02      	ldr	r3, [pc, #8]	; (b5168 <__assert_func+0xc>)
   b5160:	681b      	ldr	r3, [r3, #0]
   b5162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5164:	9301      	str	r3, [sp, #4]
   b5166:	bd08      	pop	{r3, pc}
   b5168:	0003021c 	.word	0x0003021c

000b516c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b516c:	b508      	push	{r3, lr}
   b516e:	4b02      	ldr	r3, [pc, #8]	; (b5178 <newlib_impure_ptr_callback+0xc>)
   b5170:	681b      	ldr	r3, [r3, #0]
   b5172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5174:	9301      	str	r3, [sp, #4]
   b5176:	bd08      	pop	{r3, pc}
   b5178:	0003021c 	.word	0x0003021c

000b517c <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b517c:	428a      	cmp	r2, r1
{
   b517e:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b5180:	d007      	beq.n	b5192 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b5182:	1a44      	subs	r4, r0, r1
   b5184:	9802      	ldr	r0, [sp, #8]
   b5186:	1ac0      	subs	r0, r0, r3
   b5188:	4344      	muls	r4, r0
   b518a:	1a50      	subs	r0, r2, r1
   b518c:	fb94 f0f0 	sdiv	r0, r4, r0
   b5190:	4418      	add	r0, r3
}
   b5192:	bd10      	pop	{r4, pc}

000b5194 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5194:	2100      	movs	r1, #0
   b5196:	f7ff bf1d 	b.w	b4fd4 <system_delay_ms>

000b519a <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b519a:	b510      	push	{r4, lr}
      if (_M_manager)
   b519c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b519e:	4604      	mov	r4, r0
      if (_M_manager)
   b51a0:	b113      	cbz	r3, b51a8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b51a2:	2203      	movs	r2, #3
   b51a4:	4601      	mov	r1, r0
   b51a6:	4798      	blx	r3
    }
   b51a8:	4620      	mov	r0, r4
   b51aa:	bd10      	pop	{r4, pc}

000b51ac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b51ac:	4802      	ldr	r0, [pc, #8]	; (b51b8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b51ae:	2300      	movs	r3, #0
   b51b0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b51b2:	f7ff bd4f 	b.w	b4c54 <os_mutex_recursive_create>
   b51b6:	bf00      	nop
   b51b8:	2003e634 	.word	0x2003e634

000b51bc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b51bc:	2200      	movs	r2, #0
   b51be:	6840      	ldr	r0, [r0, #4]
   b51c0:	4611      	mov	r1, r2
   b51c2:	f7ff bf6b 	b.w	b509c <network_listening>

000b51c6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b51c6:	2200      	movs	r2, #0
   b51c8:	6840      	ldr	r0, [r0, #4]
   b51ca:	4611      	mov	r1, r2
   b51cc:	f7ff bf7e 	b.w	b50cc <network_get_listen_timeout>

000b51d0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b51d0:	6840      	ldr	r0, [r0, #4]
   b51d2:	2200      	movs	r2, #0
   b51d4:	f7ff bf72 	b.w	b50bc <network_set_listen_timeout>

000b51d8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b51d8:	6840      	ldr	r0, [r0, #4]
   b51da:	2200      	movs	r2, #0
   b51dc:	f081 0101 	eor.w	r1, r1, #1
   b51e0:	f7ff bf54 	b.w	b508c <network_listen>

000b51e4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b51e4:	2300      	movs	r3, #0
   b51e6:	6840      	ldr	r0, [r0, #4]
   b51e8:	461a      	mov	r2, r3
   b51ea:	4619      	mov	r1, r3
   b51ec:	f7ff bf46 	b.w	b507c <network_off>

000b51f0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b51f0:	2300      	movs	r3, #0
   b51f2:	6840      	ldr	r0, [r0, #4]
   b51f4:	461a      	mov	r2, r3
   b51f6:	4619      	mov	r1, r3
   b51f8:	f7ff bf38 	b.w	b506c <network_on>

000b51fc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b51fc:	2200      	movs	r2, #0
   b51fe:	6840      	ldr	r0, [r0, #4]
   b5200:	4611      	mov	r1, r2
   b5202:	f7ff bf2b 	b.w	b505c <network_ready>

000b5206 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5206:	2200      	movs	r2, #0
   b5208:	6840      	ldr	r0, [r0, #4]
   b520a:	4611      	mov	r1, r2
   b520c:	f7ff bf16 	b.w	b503c <network_connecting>

000b5210 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5210:	6840      	ldr	r0, [r0, #4]
   b5212:	2200      	movs	r2, #0
   b5214:	2102      	movs	r1, #2
   b5216:	f7ff bf19 	b.w	b504c <network_disconnect>

000b521a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b521a:	2300      	movs	r3, #0
   b521c:	6840      	ldr	r0, [r0, #4]
   b521e:	461a      	mov	r2, r3
   b5220:	f7ff bf04 	b.w	b502c <network_connect>

000b5224 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5224:	4b02      	ldr	r3, [pc, #8]	; (b5230 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5226:	2203      	movs	r2, #3
   b5228:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b522a:	4a02      	ldr	r2, [pc, #8]	; (b5234 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b522c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b522e:	4770      	bx	lr
   b5230:	2003e638 	.word	0x2003e638
   b5234:	000b6e7c 	.word	0x000b6e7c

000b5238 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5238:	4770      	bx	lr

000b523a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b523a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b523c:	4606      	mov	r6, r0
   b523e:	4615      	mov	r5, r2
   b5240:	460c      	mov	r4, r1
   b5242:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5244:	42bc      	cmp	r4, r7
   b5246:	d006      	beq.n	b5256 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5248:	6833      	ldr	r3, [r6, #0]
   b524a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b524e:	689b      	ldr	r3, [r3, #8]
   b5250:	4630      	mov	r0, r6
   b5252:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5254:	e7f6      	b.n	b5244 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5256:	4628      	mov	r0, r5
   b5258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b525a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b525a:	7c00      	ldrb	r0, [r0, #16]
   b525c:	2200      	movs	r2, #0
   b525e:	f7ff bd69 	b.w	b4d34 <hal_i2c_write>

000b5262 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5262:	7c00      	ldrb	r0, [r0, #16]
   b5264:	2100      	movs	r1, #0
   b5266:	f7ff bd6d 	b.w	b4d44 <hal_i2c_available>

000b526a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b526a:	7c00      	ldrb	r0, [r0, #16]
   b526c:	2100      	movs	r1, #0
   b526e:	f7ff bd71 	b.w	b4d54 <hal_i2c_read>

000b5272 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5272:	7c00      	ldrb	r0, [r0, #16]
   b5274:	2100      	movs	r1, #0
   b5276:	f7ff bd75 	b.w	b4d64 <hal_i2c_peek>

000b527a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b527a:	7c00      	ldrb	r0, [r0, #16]
   b527c:	2100      	movs	r1, #0
   b527e:	f7ff bd79 	b.w	b4d74 <hal_i2c_flush>

000b5282 <_ZN7TwoWireD0Ev>:
   b5282:	b510      	push	{r4, lr}
   b5284:	2114      	movs	r1, #20
   b5286:	4604      	mov	r4, r0
   b5288:	f7fe ff07 	bl	b409a <_ZdlPvj>
   b528c:	4620      	mov	r0, r4
   b528e:	bd10      	pop	{r4, pc}

000b5290 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5290:	b538      	push	{r3, r4, r5, lr}
   b5292:	4604      	mov	r4, r0
   b5294:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b529a:	2200      	movs	r2, #0
   b529c:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b52a0:	4b09      	ldr	r3, [pc, #36]	; (b52c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b52a2:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b52a4:	4608      	mov	r0, r1
   b52a6:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b52a8:	4629      	mov	r1, r5
   b52aa:	f7ff fd73 	bl	b4d94 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b52ae:	30bf      	adds	r0, #191	; 0xbf
   b52b0:	d108      	bne.n	b52c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b52b2:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b52b4:	07db      	lsls	r3, r3, #31
   b52b6:	d505      	bpl.n	b52c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b52b8:	6868      	ldr	r0, [r5, #4]
   b52ba:	f7ff ff27 	bl	b510c <free>
    free(conf.tx_buffer);
   b52be:	68e8      	ldr	r0, [r5, #12]
   b52c0:	f7ff ff24 	bl	b510c <free>
}
   b52c4:	4620      	mov	r0, r4
   b52c6:	bd38      	pop	{r3, r4, r5, pc}
   b52c8:	000b6eb8 	.word	0x000b6eb8

000b52cc <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b52cc:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
   b52ce:	b510      	push	{r4, lr}
   b52d0:	b90a      	cbnz	r2, b52d6 <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
   b52d2:	f001 f97f 	bl	b65d4 <_ZSt25__throw_bad_function_callv>
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
   b52d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b52da:	68c3      	ldr	r3, [r0, #12]
   b52dc:	4718      	bx	r3
	...

000b52e0 <_Z16allocate_handlertRSt8functionIFvvEE>:
{
   b52e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
   b52e2:	4f10      	ldr	r7, [pc, #64]	; (b5324 <_Z16allocate_handlertRSt8functionIFvvEE+0x44>)
   b52e4:	f857 4020 	ldr.w	r4, [r7, r0, lsl #2]
{
   b52e8:	4606      	mov	r6, r0
   b52ea:	460d      	mov	r5, r1
    delete handlers[pin];
   b52ec:	b134      	cbz	r4, b52fc <_Z16allocate_handlertRSt8functionIFvvEE+0x1c>
    class function<_Res(_ArgTypes...)>
   b52ee:	4620      	mov	r0, r4
   b52f0:	f7ff ff53 	bl	b519a <_ZNSt14_Function_baseD1Ev>
   b52f4:	2110      	movs	r1, #16
   b52f6:	4620      	mov	r0, r4
   b52f8:	f7fe fecf 	bl	b409a <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
   b52fc:	2010      	movs	r0, #16
   b52fe:	f7fe fec8 	bl	b4092 <_Znwj>
   b5302:	4604      	mov	r4, r0
   b5304:	b150      	cbz	r0, b531c <_Z16allocate_handlertRSt8functionIFvvEE+0x3c>
    _Function_base() : _M_manager(nullptr) { }
   b5306:	2300      	movs	r3, #0
   b5308:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b530a:	68ab      	ldr	r3, [r5, #8]
      if (static_cast<bool>(__x))
   b530c:	b133      	cbz	r3, b531c <_Z16allocate_handlertRSt8functionIFvvEE+0x3c>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b530e:	2202      	movs	r2, #2
   b5310:	4629      	mov	r1, r5
   b5312:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5314:	68eb      	ldr	r3, [r5, #12]
   b5316:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5318:	68ab      	ldr	r3, [r5, #8]
   b531a:	60a3      	str	r3, [r4, #8]
   b531c:	f847 4026 	str.w	r4, [r7, r6, lsl #2]
}
   b5320:	4620      	mov	r0, r4
   b5322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5324:	2003e640 	.word	0x2003e640

000b5328 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
  }
  return nullptr;
}

bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b5328:	b5f0      	push	{r4, r5, r6, r7, lr}
   b532a:	b087      	sub	sp, #28
   b532c:	4605      	mov	r5, r0
   b532e:	9103      	str	r1, [sp, #12]
   b5330:	4617      	mov	r7, r2
   b5332:	461e      	mov	r6, r3
    HAL_Interrupts_Detach(pin);
   b5334:	f7ff fce6 	bl	b4d04 <HAL_Interrupts_Detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
   b5338:	9903      	ldr	r1, [sp, #12]
   b533a:	4628      	mov	r0, r5
   b533c:	f7ff ffd0 	bl	b52e0 <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
   b5340:	4604      	mov	r4, r0
   b5342:	b1e8      	cbz	r0, b5380 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
        HAL_InterruptExtraConfiguration extra = {};
   b5344:	2100      	movs	r1, #0
  if (priority >= 0) {
   b5346:	428e      	cmp	r6, r1
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b5348:	f04f 0304 	mov.w	r3, #4
        HAL_InterruptExtraConfiguration extra = {};
   b534c:	f8ad 1015 	strh.w	r1, [sp, #21]
   b5350:	f88d 1017 	strb.w	r1, [sp, #23]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b5354:	f88d 3014 	strb.w	r3, [sp, #20]
    return &extra;
   b5358:	bfa2      	ittt	ge
   b535a:	a905      	addge	r1, sp, #20
    extra.IRQChannelSubPriority = subpriority;
   b535c:	f89d 3030 	ldrbge.w	r3, [sp, #48]	; 0x30
   b5360:	f88d 3016 	strbge.w	r3, [sp, #22]
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b5364:	9100      	str	r1, [sp, #0]
   b5366:	4602      	mov	r2, r0
   b5368:	4907      	ldr	r1, [pc, #28]	; (b5388 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x60>)
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b536a:	bfa8      	it	ge
   b536c:	f88d 6015 	strbge.w	r6, [sp, #21]
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b5370:	463b      	mov	r3, r7
   b5372:	4628      	mov	r0, r5
   b5374:	f7ff fcbe 	bl	b4cf4 <HAL_Interrupts_Attach>
   b5378:	b110      	cbz	r0, b5380 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
            return false;
   b537a:	2000      	movs	r0, #0
        }
    }
    return handler!=NULL;
}
   b537c:	b007      	add	sp, #28
   b537e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return handler!=NULL;
   b5380:	1e20      	subs	r0, r4, #0
   b5382:	bf18      	it	ne
   b5384:	2001      	movne	r0, #1
   b5386:	e7f9      	b.n	b537c <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x54>
   b5388:	000b52cd 	.word	0x000b52cd

000b538c <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   b538c:	f7ff bcca 	b.w	b4d24 <HAL_Interrupts_Disable_All>

000b5390 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   b5390:	f7ff bcc0 	b.w	b4d14 <HAL_Interrupts_Enable_All>

000b5394 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5394:	4770      	bx	lr

000b5396 <_ZN9IPAddressD0Ev>:
   b5396:	b510      	push	{r4, lr}
   b5398:	2118      	movs	r1, #24
   b539a:	4604      	mov	r4, r0
   b539c:	f7fe fe7d 	bl	b409a <_ZdlPvj>
   b53a0:	4620      	mov	r0, r4
   b53a2:	bd10      	pop	{r4, pc}

000b53a4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b53a4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b53a6:	7d03      	ldrb	r3, [r0, #20]
   b53a8:	2b06      	cmp	r3, #6
{
   b53aa:	b08d      	sub	sp, #52	; 0x34
   b53ac:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b53ae:	f100 0704 	add.w	r7, r0, #4
   b53b2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b53b6:	d012      	beq.n	b53de <_ZNK9IPAddress7printToER5Print+0x3a>
   b53b8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b53bc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b53c0:	220a      	movs	r2, #10
   b53c2:	4630      	mov	r0, r6
   b53c4:	f000 f973 	bl	b56ae <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b53c8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b53ca:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b53cc:	d019      	beq.n	b5402 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b53ce:	2c00      	cmp	r4, #0
   b53d0:	d0f4      	beq.n	b53bc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b53d2:	212e      	movs	r1, #46	; 0x2e
   b53d4:	4630      	mov	r0, r6
   b53d6:	f000 f951 	bl	b567c <_ZN5Print5printEc>
   b53da:	4404      	add	r4, r0
   b53dc:	e7ee      	b.n	b53bc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b53de:	232f      	movs	r3, #47	; 0x2f
   b53e0:	466a      	mov	r2, sp
   b53e2:	4639      	mov	r1, r7
   b53e4:	200a      	movs	r0, #10
		buf[0] = 0;
   b53e6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b53ea:	f7ff fce3 	bl	b4db4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b53ee:	4668      	mov	r0, sp
   b53f0:	f001 fa62 	bl	b68b8 <strlen>
   b53f4:	6833      	ldr	r3, [r6, #0]
   b53f6:	4602      	mov	r2, r0
   b53f8:	68db      	ldr	r3, [r3, #12]
   b53fa:	4669      	mov	r1, sp
   b53fc:	4630      	mov	r0, r6
   b53fe:	4798      	blx	r3
   b5400:	4604      	mov	r4, r0
    }
    return n;
}
   b5402:	4620      	mov	r0, r4
   b5404:	b00d      	add	sp, #52	; 0x34
   b5406:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5408 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5408:	b510      	push	{r4, lr}
   b540a:	4b05      	ldr	r3, [pc, #20]	; (b5420 <_ZN9IPAddressC1Ev+0x18>)
   b540c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b540e:	2211      	movs	r2, #17
   b5410:	f840 3b04 	str.w	r3, [r0], #4
   b5414:	2100      	movs	r1, #0
   b5416:	f001 fa07 	bl	b6828 <memset>
}
   b541a:	4620      	mov	r0, r4
   b541c:	bd10      	pop	{r4, pc}
   b541e:	bf00      	nop
   b5420:	000b6ee0 	.word	0x000b6ee0

000b5424 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5424:	4603      	mov	r3, r0
   b5426:	4a07      	ldr	r2, [pc, #28]	; (b5444 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5428:	b510      	push	{r4, lr}
   b542a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b542e:	f101 0210 	add.w	r2, r1, #16
   b5432:	f851 4b04 	ldr.w	r4, [r1], #4
   b5436:	f843 4b04 	str.w	r4, [r3], #4
   b543a:	4291      	cmp	r1, r2
   b543c:	d1f9      	bne.n	b5432 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b543e:	780a      	ldrb	r2, [r1, #0]
   b5440:	701a      	strb	r2, [r3, #0]
}
   b5442:	bd10      	pop	{r4, pc}
   b5444:	000b6ee0 	.word	0x000b6ee0

000b5448 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b5448:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b544a:	2b04      	cmp	r3, #4
   b544c:	d104      	bne.n	b5458 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b544e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5450:	3800      	subs	r0, #0
   b5452:	bf18      	it	ne
   b5454:	2001      	movne	r0, #1
   b5456:	4770      	bx	lr
    } else if (version() == 6) {
   b5458:	2b06      	cmp	r3, #6
   b545a:	d107      	bne.n	b546c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b545c:	6843      	ldr	r3, [r0, #4]
   b545e:	b93b      	cbnz	r3, b5470 <_ZNK9IPAddresscvbEv+0x28>
   b5460:	6883      	ldr	r3, [r0, #8]
   b5462:	b92b      	cbnz	r3, b5470 <_ZNK9IPAddresscvbEv+0x28>
   b5464:	68c3      	ldr	r3, [r0, #12]
   b5466:	b91b      	cbnz	r3, b5470 <_ZNK9IPAddresscvbEv+0x28>
   b5468:	6900      	ldr	r0, [r0, #16]
   b546a:	e7f1      	b.n	b5450 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b546c:	2000      	movs	r0, #0
   b546e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5470:	2001      	movs	r0, #1
}
   b5472:	4770      	bx	lr

000b5474 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5474:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5476:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b547a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b547e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5482:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5486:	2304      	movs	r3, #4
   b5488:	6041      	str	r1, [r0, #4]
   b548a:	7503      	strb	r3, [r0, #20]
}
   b548c:	bd10      	pop	{r4, pc}
	...

000b5490 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5490:	b507      	push	{r0, r1, r2, lr}
   b5492:	4b06      	ldr	r3, [pc, #24]	; (b54ac <_ZN9IPAddressC1EPKh+0x1c>)
   b5494:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5496:	78cb      	ldrb	r3, [r1, #3]
   b5498:	9300      	str	r3, [sp, #0]
   b549a:	788b      	ldrb	r3, [r1, #2]
   b549c:	784a      	ldrb	r2, [r1, #1]
   b549e:	7809      	ldrb	r1, [r1, #0]
   b54a0:	f7ff ffe8 	bl	b5474 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b54a4:	b003      	add	sp, #12
   b54a6:	f85d fb04 	ldr.w	pc, [sp], #4
   b54aa:	bf00      	nop
   b54ac:	000b6ee0 	.word	0x000b6ee0

000b54b0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b54b0:	4b01      	ldr	r3, [pc, #4]	; (b54b8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b54b2:	4a02      	ldr	r2, [pc, #8]	; (b54bc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b54b4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b54b6:	4770      	bx	lr
   b54b8:	2003e6d0 	.word	0x2003e6d0
   b54bc:	000b6eec 	.word	0x000b6eec

000b54c0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b54c0:	2300      	movs	r3, #0
   b54c2:	6840      	ldr	r0, [r0, #4]
   b54c4:	461a      	mov	r2, r3
   b54c6:	f7ff bdb1 	b.w	b502c <network_connect>

000b54ca <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b54ca:	6840      	ldr	r0, [r0, #4]
   b54cc:	2200      	movs	r2, #0
   b54ce:	2102      	movs	r1, #2
   b54d0:	f7ff bdbc 	b.w	b504c <network_disconnect>

000b54d4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b54d4:	2200      	movs	r2, #0
   b54d6:	6840      	ldr	r0, [r0, #4]
   b54d8:	4611      	mov	r1, r2
   b54da:	f7ff bdaf 	b.w	b503c <network_connecting>

000b54de <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b54de:	2200      	movs	r2, #0
   b54e0:	6840      	ldr	r0, [r0, #4]
   b54e2:	4611      	mov	r1, r2
   b54e4:	f7ff bdba 	b.w	b505c <network_ready>

000b54e8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b54e8:	2300      	movs	r3, #0
   b54ea:	6840      	ldr	r0, [r0, #4]
   b54ec:	461a      	mov	r2, r3
   b54ee:	4619      	mov	r1, r3
   b54f0:	f7ff bdbc 	b.w	b506c <network_on>

000b54f4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b54f4:	2300      	movs	r3, #0
   b54f6:	6840      	ldr	r0, [r0, #4]
   b54f8:	461a      	mov	r2, r3
   b54fa:	4619      	mov	r1, r3
   b54fc:	f7ff bdbe 	b.w	b507c <network_off>

000b5500 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5500:	6840      	ldr	r0, [r0, #4]
   b5502:	2100      	movs	r1, #0
   b5504:	f7ff bdea 	b.w	b50dc <network_is_on>

000b5508 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5508:	6840      	ldr	r0, [r0, #4]
   b550a:	2100      	movs	r1, #0
   b550c:	f7ff bdee 	b.w	b50ec <network_is_off>

000b5510 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5510:	6840      	ldr	r0, [r0, #4]
   b5512:	2200      	movs	r2, #0
   b5514:	f081 0101 	eor.w	r1, r1, #1
   b5518:	f7ff bdb8 	b.w	b508c <network_listen>

000b551c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b551c:	6840      	ldr	r0, [r0, #4]
   b551e:	2200      	movs	r2, #0
   b5520:	f7ff bdcc 	b.w	b50bc <network_set_listen_timeout>

000b5524 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5524:	2200      	movs	r2, #0
   b5526:	6840      	ldr	r0, [r0, #4]
   b5528:	4611      	mov	r1, r2
   b552a:	f7ff bdcf 	b.w	b50cc <network_get_listen_timeout>

000b552e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b552e:	2200      	movs	r2, #0
   b5530:	6840      	ldr	r0, [r0, #4]
   b5532:	4611      	mov	r1, r2
   b5534:	f7ff bdb2 	b.w	b509c <network_listening>

000b5538 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b553c:	b095      	sub	sp, #84	; 0x54
   b553e:	4614      	mov	r4, r2
   b5540:	460d      	mov	r5, r1
   b5542:	4607      	mov	r7, r0
    IPAddress addr;
   b5544:	f7ff ff60 	bl	b5408 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5548:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b554a:	221c      	movs	r2, #28
   b554c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b554e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5550:	f001 f96a 	bl	b6828 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5554:	2340      	movs	r3, #64	; 0x40
   b5556:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5558:	4620      	mov	r0, r4
   b555a:	466b      	mov	r3, sp
   b555c:	aa0c      	add	r2, sp, #48	; 0x30
   b555e:	2100      	movs	r1, #0
   b5560:	f7ff fc48 	bl	b4df4 <netdb_getaddrinfo>
    if (!r) {
   b5564:	4604      	mov	r4, r0
   b5566:	2800      	cmp	r0, #0
   b5568:	d14b      	bne.n	b5602 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b556a:	4602      	mov	r2, r0
   b556c:	2101      	movs	r1, #1
   b556e:	6868      	ldr	r0, [r5, #4]
   b5570:	f7ff fd74 	bl	b505c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5574:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5576:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5578:	4622      	mov	r2, r4
   b557a:	6868      	ldr	r0, [r5, #4]
   b557c:	f7ff fd6e 	bl	b505c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5580:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5582:	4681      	mov	r9, r0
        bool ok = false;
   b5584:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5586:	2e00      	cmp	r6, #0
   b5588:	d03b      	beq.n	b5602 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b558a:	2900      	cmp	r1, #0
   b558c:	d139      	bne.n	b5602 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b558e:	6873      	ldr	r3, [r6, #4]
   b5590:	2b02      	cmp	r3, #2
   b5592:	d003      	beq.n	b559c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5594:	2b0a      	cmp	r3, #10
   b5596:	d011      	beq.n	b55bc <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5598:	69f6      	ldr	r6, [r6, #28]
   b559a:	e7f4      	b.n	b5586 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b559c:	f1b8 0f00 	cmp.w	r8, #0
   b55a0:	d0fa      	beq.n	b5598 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b55a2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b55a4:	a806      	add	r0, sp, #24
   b55a6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b55a8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b55aa:	f7ff ff71 	bl	b5490 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b55ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b55b0:	1d3c      	adds	r4, r7, #4
   b55b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b55b4:	682b      	ldr	r3, [r5, #0]
   b55b6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b55b8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b55ba:	e7ed      	b.n	b5598 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b55bc:	f1b9 0f00 	cmp.w	r9, #0
   b55c0:	d0ea      	beq.n	b5598 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b55c2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b55c4:	2210      	movs	r2, #16
   b55c6:	a801      	add	r0, sp, #4
   b55c8:	f001 f92e 	bl	b6828 <memset>
                    a.v = 6;
   b55cc:	2306      	movs	r3, #6
   b55ce:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b55d2:	ad01      	add	r5, sp, #4
   b55d4:	f104 0308 	add.w	r3, r4, #8
   b55d8:	3418      	adds	r4, #24
   b55da:	6818      	ldr	r0, [r3, #0]
   b55dc:	6859      	ldr	r1, [r3, #4]
   b55de:	462a      	mov	r2, r5
   b55e0:	c203      	stmia	r2!, {r0, r1}
   b55e2:	3308      	adds	r3, #8
   b55e4:	42a3      	cmp	r3, r4
   b55e6:	4615      	mov	r5, r2
   b55e8:	d1f7      	bne.n	b55da <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b55ea:	a901      	add	r1, sp, #4
   b55ec:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b55ee:	ad07      	add	r5, sp, #28
   b55f0:	f7ff ff18 	bl	b5424 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b55f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b55f6:	1d3c      	adds	r4, r7, #4
   b55f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b55fa:	682b      	ldr	r3, [r5, #0]
   b55fc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b55fe:	4649      	mov	r1, r9
   b5600:	e7ca      	b.n	b5598 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5602:	9800      	ldr	r0, [sp, #0]
   b5604:	f7ff fbee 	bl	b4de4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5608:	4638      	mov	r0, r7
   b560a:	b015      	add	sp, #84	; 0x54
   b560c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5610 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5610:	4b02      	ldr	r3, [pc, #8]	; (b561c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5612:	4a03      	ldr	r2, [pc, #12]	; (b5620 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5614:	601a      	str	r2, [r3, #0]
   b5616:	2200      	movs	r2, #0
   b5618:	605a      	str	r2, [r3, #4]

} // spark
   b561a:	4770      	bx	lr
   b561c:	2003e6d4 	.word	0x2003e6d4
   b5620:	000b6ef8 	.word	0x000b6ef8

000b5624 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5626:	4606      	mov	r6, r0
   b5628:	460d      	mov	r5, r1
  size_t n = 0;
   b562a:	188f      	adds	r7, r1, r2
   b562c:	2400      	movs	r4, #0
  while (size--) {
   b562e:	42bd      	cmp	r5, r7
   b5630:	d00c      	beq.n	b564c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5632:	6833      	ldr	r3, [r6, #0]
   b5634:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5638:	689b      	ldr	r3, [r3, #8]
   b563a:	4630      	mov	r0, r6
   b563c:	4798      	blx	r3
     if (chunk>=0)
   b563e:	1e03      	subs	r3, r0, #0
   b5640:	db01      	blt.n	b5646 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5642:	441c      	add	r4, r3
  while (size--) {
   b5644:	e7f3      	b.n	b562e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5646:	2c00      	cmp	r4, #0
   b5648:	bf08      	it	eq
   b564a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b564c:	4620      	mov	r0, r4
   b564e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5650 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5650:	b513      	push	{r0, r1, r4, lr}
   b5652:	4604      	mov	r4, r0
    }
   b5654:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5656:	b159      	cbz	r1, b5670 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5658:	9101      	str	r1, [sp, #4]
   b565a:	f001 f92d 	bl	b68b8 <strlen>
   b565e:	6823      	ldr	r3, [r4, #0]
   b5660:	9901      	ldr	r1, [sp, #4]
   b5662:	68db      	ldr	r3, [r3, #12]
   b5664:	4602      	mov	r2, r0
   b5666:	4620      	mov	r0, r4
    }
   b5668:	b002      	add	sp, #8
   b566a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b566e:	4718      	bx	r3
    }
   b5670:	b002      	add	sp, #8
   b5672:	bd10      	pop	{r4, pc}

000b5674 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b5674:	b508      	push	{r3, lr}
  return write(str);
   b5676:	f7ff ffeb 	bl	b5650 <_ZN5Print5writeEPKc>
}
   b567a:	bd08      	pop	{r3, pc}

000b567c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b567c:	6803      	ldr	r3, [r0, #0]
   b567e:	689b      	ldr	r3, [r3, #8]
   b5680:	4718      	bx	r3

000b5682 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5682:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5684:	210d      	movs	r1, #13
{
   b5686:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5688:	f7ff fff8 	bl	b567c <_ZN5Print5printEc>
  n += print('\n');
   b568c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b568e:	4604      	mov	r4, r0
  n += print('\n');
   b5690:	4628      	mov	r0, r5
   b5692:	f7ff fff3 	bl	b567c <_ZN5Print5printEc>
  return n;
}
   b5696:	4420      	add	r0, r4
   b5698:	bd38      	pop	{r3, r4, r5, pc}

000b569a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b569a:	b538      	push	{r3, r4, r5, lr}
   b569c:	4605      	mov	r5, r0
  return write(str);
   b569e:	f7ff ffd7 	bl	b5650 <_ZN5Print5writeEPKc>
   b56a2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b56a4:	4628      	mov	r0, r5
   b56a6:	f7ff ffec 	bl	b5682 <_ZN5Print7printlnEv>
  return n;
}
   b56aa:	4420      	add	r0, r4
   b56ac:	bd38      	pop	{r3, r4, r5, pc}

000b56ae <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b56ae:	b530      	push	{r4, r5, lr}
   b56b0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b56b2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b56b4:	2a01      	cmp	r2, #1
  *str = '\0';
   b56b6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b56ba:	bf98      	it	ls
   b56bc:	220a      	movls	r2, #10
   b56be:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b56c0:	460d      	mov	r5, r1
   b56c2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b56c6:	fb01 5312 	mls	r3, r1, r2, r5
   b56ca:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b56ce:	2b09      	cmp	r3, #9
   b56d0:	bf94      	ite	ls
   b56d2:	3330      	addls	r3, #48	; 0x30
   b56d4:	3337      	addhi	r3, #55	; 0x37
   b56d6:	b2db      	uxtb	r3, r3
  } while(n);
   b56d8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b56da:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b56de:	d9ef      	bls.n	b56c0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b56e0:	4621      	mov	r1, r4
   b56e2:	f7ff ffb5 	bl	b5650 <_ZN5Print5writeEPKc>
}
   b56e6:	b00b      	add	sp, #44	; 0x2c
   b56e8:	bd30      	pop	{r4, r5, pc}

000b56ea <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b56ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b56ee:	b086      	sub	sp, #24
   b56f0:	af00      	add	r7, sp, #0
   b56f2:	4605      	mov	r5, r0
   b56f4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b56f6:	1d38      	adds	r0, r7, #4
   b56f8:	2114      	movs	r1, #20
{
   b56fa:	4614      	mov	r4, r2
    va_copy(args2, args);
   b56fc:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b56fe:	f7ff fd15 	bl	b512c <vsnprintf>

    if (n<bufsize)
   b5702:	2813      	cmp	r0, #19
   b5704:	d80e      	bhi.n	b5724 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b5706:	1d39      	adds	r1, r7, #4
   b5708:	4628      	mov	r0, r5
   b570a:	f7ff ffa1 	bl	b5650 <_ZN5Print5writeEPKc>
   b570e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b5710:	b11e      	cbz	r6, b571a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b5712:	4628      	mov	r0, r5
   b5714:	f7ff ffb5 	bl	b5682 <_ZN5Print7printlnEv>
   b5718:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b571a:	4620      	mov	r0, r4
   b571c:	3718      	adds	r7, #24
   b571e:	46bd      	mov	sp, r7
   b5720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b5724:	f100 0308 	add.w	r3, r0, #8
   b5728:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b572c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b572e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b5732:	4622      	mov	r2, r4
   b5734:	1c41      	adds	r1, r0, #1
   b5736:	683b      	ldr	r3, [r7, #0]
   b5738:	4668      	mov	r0, sp
   b573a:	f7ff fcf7 	bl	b512c <vsnprintf>
  return write(str);
   b573e:	4669      	mov	r1, sp
   b5740:	4628      	mov	r0, r5
   b5742:	f7ff ff85 	bl	b5650 <_ZN5Print5writeEPKc>
   b5746:	4604      	mov	r4, r0
   b5748:	46c5      	mov	sp, r8
   b574a:	e7e1      	b.n	b5710 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b574c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b574c:	4b01      	ldr	r3, [pc, #4]	; (b5754 <_GLOBAL__sub_I_RGB+0x8>)
   b574e:	2200      	movs	r2, #0
   b5750:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5752:	4770      	bx	lr
   b5754:	2003e6dc 	.word	0x2003e6dc

000b5758 <_ZN5Servo11resetFieldsEv>:
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   b5758:	4a04      	ldr	r2, [pc, #16]	; (b576c <_ZN5Servo11resetFieldsEv+0x14>)
   b575a:	f44f 6316 	mov.w	r3, #2400	; 0x960
   b575e:	e9c0 2300 	strd	r2, r3, [r0]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   b5762:	23b4      	movs	r3, #180	; 0xb4
   b5764:	8103      	strh	r3, [r0, #8]
  this->trim = 0;
   b5766:	2300      	movs	r3, #0
   b5768:	60c3      	str	r3, [r0, #12]
}
   b576a:	4770      	bx	lr
   b576c:	0220ffff 	.word	0x0220ffff

000b5770 <_ZN5ServoC1Ev>:
Servo::Servo()
   b5770:	b508      	push	{r3, lr}
  this->resetFields();
   b5772:	f7ff fff1 	bl	b5758 <_ZN5Servo11resetFieldsEv>
}
   b5776:	bd08      	pop	{r3, pc}

000b5778 <_ZN5Servo6detachEv>:
{
   b5778:	b510      	push	{r4, lr}
   b577a:	4604      	mov	r4, r0
    /**
     * @brief Check if this instance is attached to a servo.
     * @return true if this instance is attached to a servo, false otherwise.
     * @see Servo::attachedPin()
     */
    bool attached() const { return this->pin != NOT_ATTACHED; }
   b577c:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
   b5780:	1c43      	adds	r3, r0, #1
   b5782:	d007      	beq.n	b5794 <_ZN5Servo6detachEv+0x1c>
  HAL_Servo_Detach(this->pin);
   b5784:	b280      	uxth	r0, r0
   b5786:	f7ff fb45 	bl	b4e14 <HAL_Servo_Detach>
  this->resetFields();
   b578a:	4620      	mov	r0, r4
   b578c:	f7ff ffe4 	bl	b5758 <_ZN5Servo11resetFieldsEv>
  return true;
   b5790:	2001      	movs	r0, #1
}
   b5792:	bd10      	pop	{r4, pc}
    return false;
   b5794:	2000      	movs	r0, #0
   b5796:	e7fc      	b.n	b5792 <_ZN5Servo6detachEv+0x1a>

000b5798 <_ZN5Servo6attachEtttss>:
{
   b5798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b579c:	460d      	mov	r5, r1
   b579e:	4604      	mov	r4, r0
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   b57a0:	2102      	movs	r1, #2
   b57a2:	4628      	mov	r0, r5
{
   b57a4:	4690      	mov	r8, r2
   b57a6:	461f      	mov	r7, r3
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   b57a8:	f7ff fa84 	bl	b4cb4 <HAL_Validate_Pin_Function>
   b57ac:	2802      	cmp	r0, #2
   b57ae:	d003      	beq.n	b57b8 <_ZN5Servo6attachEtttss+0x20>
    return false;
   b57b0:	2600      	movs	r6, #0
}
   b57b2:	4630      	mov	r0, r6
   b57b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!pinAvailable(pin))
   b57b8:	4628      	mov	r0, r5
   b57ba:	f000 fe27 	bl	b640c <pinAvailable>
   b57be:	4606      	mov	r6, r0
   b57c0:	2800      	cmp	r0, #0
   b57c2:	d0f5      	beq.n	b57b0 <_ZN5Servo6attachEtttss+0x18>
  if (this->attached())
   b57c4:	f9b4 3000 	ldrsh.w	r3, [r4]
   b57c8:	3301      	adds	r3, #1
   b57ca:	d002      	beq.n	b57d2 <_ZN5Servo6attachEtttss+0x3a>
    this->detach();
   b57cc:	4620      	mov	r0, r4
   b57ce:	f7ff ffd3 	bl	b5778 <_ZN5Servo6detachEv>
  this->minAngle = minAngle;
   b57d2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   b57d6:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
   b57d8:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  this->pin = pin;
   b57dc:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
   b57de:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
   b57e2:	80a7      	strh	r7, [r4, #4]
  this->maxAngle = maxAngle;
   b57e4:	8123      	strh	r3, [r4, #8]
  HAL_Servo_Attach(this->pin);
   b57e6:	4628      	mov	r0, r5
   b57e8:	f7ff fb0c 	bl	b4e04 <HAL_Servo_Attach>
  return true;
   b57ec:	e7e1      	b.n	b57b2 <_ZN5Servo6attachEtttss+0x1a>

000b57ee <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b57ee:	b510      	push	{r4, lr}
   b57f0:	4604      	mov	r4, r0
   b57f2:	4608      	mov	r0, r1
{
    _spi = spi;
   b57f4:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b57f6:	f7ff fb45 	bl	b4e84 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b57fa:	2300      	movs	r3, #0
   b57fc:	6063      	str	r3, [r4, #4]
}
   b57fe:	4620      	mov	r0, r4
   b5800:	bd10      	pop	{r4, pc}

000b5802 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b5802:	b510      	push	{r4, lr}
   b5804:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5806:	f7ff fa3d 	bl	b4c84 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b580a:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b580c:	6823      	ldr	r3, [r4, #0]
   b580e:	4620      	mov	r0, r4
   b5810:	695b      	ldr	r3, [r3, #20]
   b5812:	4798      	blx	r3
    if (c >= 0) return c;
   b5814:	2800      	cmp	r0, #0
   b5816:	da08      	bge.n	b582a <_ZN6Stream9timedReadEv+0x28>
   b5818:	f7ff fa34 	bl	b4c84 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b581c:	68e3      	ldr	r3, [r4, #12]
   b581e:	1ac0      	subs	r0, r0, r3
   b5820:	68a3      	ldr	r3, [r4, #8]
   b5822:	4298      	cmp	r0, r3
   b5824:	d3f2      	bcc.n	b580c <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b5826:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b582a:	bd10      	pop	{r4, pc}

000b582c <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
   b582c:	b538      	push	{r3, r4, r5, lr}
   b582e:	460d      	mov	r5, r1
  String ret;
   b5830:	4907      	ldr	r1, [pc, #28]	; (b5850 <_ZN6Stream10readStringEv+0x24>)
{
   b5832:	4604      	mov	r4, r0
  String ret;
   b5834:	f000 f859 	bl	b58ea <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b5838:	4628      	mov	r0, r5
   b583a:	f7ff ffe2 	bl	b5802 <_ZN6Stream9timedReadEv>
  while (c >= 0)
   b583e:	2800      	cmp	r0, #0
   b5840:	db04      	blt.n	b584c <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b5842:	b2c1      	uxtb	r1, r0
   b5844:	4620      	mov	r0, r4
   b5846:	f000 f8cb 	bl	b59e0 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b584a:	e7f5      	b.n	b5838 <_ZN6Stream10readStringEv+0xc>
  }
  return ret;
}
   b584c:	4620      	mov	r0, r4
   b584e:	bd38      	pop	{r3, r4, r5, pc}
   b5850:	000b6dbf 	.word	0x000b6dbf

000b5854 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b5854:	b510      	push	{r4, lr}
   b5856:	4604      	mov	r4, r0
{
	free(buffer);
   b5858:	6800      	ldr	r0, [r0, #0]
   b585a:	f7ff fc57 	bl	b510c <free>
}
   b585e:	4620      	mov	r0, r4
   b5860:	bd10      	pop	{r4, pc}

000b5862 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b5862:	b510      	push	{r4, lr}
   b5864:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b5866:	6800      	ldr	r0, [r0, #0]
   b5868:	b108      	cbz	r0, b586e <_ZN6String10invalidateEv+0xc>
   b586a:	f7ff fc4f 	bl	b510c <free>
	buffer = NULL;
   b586e:	2300      	movs	r3, #0
	capacity = len = 0;
   b5870:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5874:	6023      	str	r3, [r4, #0]
}
   b5876:	bd10      	pop	{r4, pc}

000b5878 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5878:	b538      	push	{r3, r4, r5, lr}
   b587a:	4604      	mov	r4, r0
   b587c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b587e:	6800      	ldr	r0, [r0, #0]
   b5880:	3101      	adds	r1, #1
   b5882:	f7ff fc4b 	bl	b511c <realloc>
	if (newbuffer) {
   b5886:	b110      	cbz	r0, b588e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5888:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b588c:	2001      	movs	r0, #1
	}
	return 0;
}
   b588e:	bd38      	pop	{r3, r4, r5, pc}

000b5890 <_ZN6String7reserveEj>:
{
   b5890:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b5892:	6803      	ldr	r3, [r0, #0]
{
   b5894:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b5896:	b123      	cbz	r3, b58a2 <_ZN6String7reserveEj+0x12>
   b5898:	6843      	ldr	r3, [r0, #4]
   b589a:	428b      	cmp	r3, r1
   b589c:	d301      	bcc.n	b58a2 <_ZN6String7reserveEj+0x12>
   b589e:	2001      	movs	r0, #1
}
   b58a0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b58a2:	4620      	mov	r0, r4
   b58a4:	f7ff ffe8 	bl	b5878 <_ZN6String12changeBufferEj>
   b58a8:	2800      	cmp	r0, #0
   b58aa:	d0f9      	beq.n	b58a0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b58ac:	68a3      	ldr	r3, [r4, #8]
   b58ae:	2b00      	cmp	r3, #0
   b58b0:	d1f5      	bne.n	b589e <_ZN6String7reserveEj+0xe>
   b58b2:	6822      	ldr	r2, [r4, #0]
   b58b4:	7013      	strb	r3, [r2, #0]
   b58b6:	e7f2      	b.n	b589e <_ZN6String7reserveEj+0xe>

000b58b8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b58b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b58ba:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b58bc:	4611      	mov	r1, r2
   b58be:	9201      	str	r2, [sp, #4]
{
   b58c0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b58c2:	f7ff ffe5 	bl	b5890 <_ZN6String7reserveEj>
   b58c6:	9a01      	ldr	r2, [sp, #4]
   b58c8:	b928      	cbnz	r0, b58d6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b58ca:	4620      	mov	r0, r4
   b58cc:	f7ff ffc9 	bl	b5862 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b58d0:	4620      	mov	r0, r4
   b58d2:	b003      	add	sp, #12
   b58d4:	bd30      	pop	{r4, r5, pc}
	len = length;
   b58d6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b58d8:	4629      	mov	r1, r5
   b58da:	6820      	ldr	r0, [r4, #0]
   b58dc:	f000 ff96 	bl	b680c <memcpy>
	buffer[len] = 0;
   b58e0:	6822      	ldr	r2, [r4, #0]
   b58e2:	68a3      	ldr	r3, [r4, #8]
   b58e4:	2100      	movs	r1, #0
   b58e6:	54d1      	strb	r1, [r2, r3]
	return *this;
   b58e8:	e7f2      	b.n	b58d0 <_ZN6String4copyEPKcj+0x18>

000b58ea <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b58ea:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b58ec:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b58ee:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b58f2:	4604      	mov	r4, r0
	len = 0;
   b58f4:	6083      	str	r3, [r0, #8]
	flags = 0;
   b58f6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b58f8:	b141      	cbz	r1, b590c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b58fa:	4608      	mov	r0, r1
   b58fc:	9101      	str	r1, [sp, #4]
   b58fe:	f000 ffdb 	bl	b68b8 <strlen>
   b5902:	9901      	ldr	r1, [sp, #4]
   b5904:	4602      	mov	r2, r0
   b5906:	4620      	mov	r0, r4
   b5908:	f7ff ffd6 	bl	b58b8 <_ZN6String4copyEPKcj>
}
   b590c:	4620      	mov	r0, r4
   b590e:	b002      	add	sp, #8
   b5910:	bd10      	pop	{r4, pc}

000b5912 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b5912:	4288      	cmp	r0, r1
{
   b5914:	b510      	push	{r4, lr}
   b5916:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b5918:	d005      	beq.n	b5926 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b591a:	680b      	ldr	r3, [r1, #0]
   b591c:	b12b      	cbz	r3, b592a <_ZN6StringaSERKS_+0x18>
   b591e:	688a      	ldr	r2, [r1, #8]
   b5920:	4619      	mov	r1, r3
   b5922:	f7ff ffc9 	bl	b58b8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5926:	4620      	mov	r0, r4
   b5928:	bd10      	pop	{r4, pc}
	else invalidate();
   b592a:	f7ff ff9a 	bl	b5862 <_ZN6String10invalidateEv>
   b592e:	e7fa      	b.n	b5926 <_ZN6StringaSERKS_+0x14>

000b5930 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b5930:	b510      	push	{r4, lr}
	buffer = NULL;
   b5932:	2300      	movs	r3, #0
String::String(const String &value)
   b5934:	4604      	mov	r4, r0
	capacity = 0;
   b5936:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b593a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b593c:	7303      	strb	r3, [r0, #12]
	*this = value;
   b593e:	f7ff ffe8 	bl	b5912 <_ZN6StringaSERKS_>
}
   b5942:	4620      	mov	r0, r4
   b5944:	bd10      	pop	{r4, pc}

000b5946 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b5946:	b513      	push	{r0, r1, r4, lr}
   b5948:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b594a:	b159      	cbz	r1, b5964 <_ZN6StringaSEPKc+0x1e>
   b594c:	4608      	mov	r0, r1
   b594e:	9101      	str	r1, [sp, #4]
   b5950:	f000 ffb2 	bl	b68b8 <strlen>
   b5954:	9901      	ldr	r1, [sp, #4]
   b5956:	4602      	mov	r2, r0
   b5958:	4620      	mov	r0, r4
   b595a:	f7ff ffad 	bl	b58b8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b595e:	4620      	mov	r0, r4
   b5960:	b002      	add	sp, #8
   b5962:	bd10      	pop	{r4, pc}
	else invalidate();
   b5964:	f7ff ff7d 	bl	b5862 <_ZN6String10invalidateEv>
   b5968:	e7f9      	b.n	b595e <_ZN6StringaSEPKc+0x18>

000b596a <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b596a:	b510      	push	{r4, lr}
   b596c:	4604      	mov	r4, r0
   b596e:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b5970:	2300      	movs	r3, #0
	capacity = 0;
   b5972:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b5976:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b5978:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b597a:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b597c:	a901      	add	r1, sp, #4
   b597e:	f000 fc93 	bl	b62a8 <itoa>
	*this = buf;
   b5982:	a901      	add	r1, sp, #4
   b5984:	4620      	mov	r0, r4
   b5986:	f7ff ffde 	bl	b5946 <_ZN6StringaSEPKc>
}
   b598a:	4620      	mov	r0, r4
   b598c:	b00a      	add	sp, #40	; 0x28
   b598e:	bd10      	pop	{r4, pc}

000b5990 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b5990:	b570      	push	{r4, r5, r6, lr}
   b5992:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b5994:	460e      	mov	r6, r1
   b5996:	b909      	cbnz	r1, b599c <_ZN6String6concatEPKcj+0xc>
   b5998:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b599a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b599c:	b16a      	cbz	r2, b59ba <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b599e:	6884      	ldr	r4, [r0, #8]
   b59a0:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b59a2:	4621      	mov	r1, r4
   b59a4:	f7ff ff74 	bl	b5890 <_ZN6String7reserveEj>
   b59a8:	2800      	cmp	r0, #0
   b59aa:	d0f5      	beq.n	b5998 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b59ac:	6828      	ldr	r0, [r5, #0]
   b59ae:	68ab      	ldr	r3, [r5, #8]
   b59b0:	4631      	mov	r1, r6
   b59b2:	4418      	add	r0, r3
   b59b4:	f000 ff78 	bl	b68a8 <strcpy>
	len = newlen;
   b59b8:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b59ba:	2001      	movs	r0, #1
   b59bc:	e7ed      	b.n	b599a <_ZN6String6concatEPKcj+0xa>

000b59be <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   b59be:	b513      	push	{r0, r1, r4, lr}
   b59c0:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   b59c2:	4608      	mov	r0, r1
	if (!cstr) return 0;
   b59c4:	b151      	cbz	r1, b59dc <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   b59c6:	9101      	str	r1, [sp, #4]
   b59c8:	f000 ff76 	bl	b68b8 <strlen>
   b59cc:	9901      	ldr	r1, [sp, #4]
   b59ce:	4602      	mov	r2, r0
   b59d0:	4620      	mov	r0, r4
}
   b59d2:	b002      	add	sp, #8
   b59d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   b59d8:	f7ff bfda 	b.w	b5990 <_ZN6String6concatEPKcj>
}
   b59dc:	b002      	add	sp, #8
   b59de:	bd10      	pop	{r4, pc}

000b59e0 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b59e0:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b59e2:	2300      	movs	r3, #0
	buf[0] = c;
   b59e4:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b59e8:	2201      	movs	r2, #1
   b59ea:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b59ec:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b59f0:	f7ff ffce 	bl	b5990 <_ZN6String6concatEPKcj>
}
   b59f4:	b003      	add	sp, #12
   b59f6:	f85d fb04 	ldr.w	pc, [sp], #4

000b59fa <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b59fa:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b59fc:	688a      	ldr	r2, [r1, #8]
   b59fe:	6809      	ldr	r1, [r1, #0]
{
   b5a00:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b5a02:	f7ff ffc5 	bl	b5990 <_ZN6String6concatEPKcj>
   b5a06:	b910      	cbnz	r0, b5a0e <_ZplRK15StringSumHelperRK6String+0x14>
   b5a08:	4620      	mov	r0, r4
   b5a0a:	f7ff ff2a 	bl	b5862 <_ZN6String10invalidateEv>
	return a;
}
   b5a0e:	4620      	mov	r0, r4
   b5a10:	bd10      	pop	{r4, pc}

000b5a12 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b5a12:	b513      	push	{r0, r1, r4, lr}
   b5a14:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b5a16:	b929      	cbnz	r1, b5a24 <_ZplRK15StringSumHelperPKc+0x12>
   b5a18:	4620      	mov	r0, r4
   b5a1a:	f7ff ff22 	bl	b5862 <_ZN6String10invalidateEv>
	return a;
}
   b5a1e:	4620      	mov	r0, r4
   b5a20:	b002      	add	sp, #8
   b5a22:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b5a24:	4608      	mov	r0, r1
   b5a26:	9101      	str	r1, [sp, #4]
   b5a28:	f000 ff46 	bl	b68b8 <strlen>
   b5a2c:	9901      	ldr	r1, [sp, #4]
   b5a2e:	4602      	mov	r2, r0
   b5a30:	4620      	mov	r0, r4
   b5a32:	f7ff ffad 	bl	b5990 <_ZN6String6concatEPKcj>
   b5a36:	2800      	cmp	r0, #0
   b5a38:	d0ee      	beq.n	b5a18 <_ZplRK15StringSumHelperPKc+0x6>
   b5a3a:	e7f0      	b.n	b5a1e <_ZplRK15StringSumHelperPKc+0xc>

000b5a3c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5a3c:	4b05      	ldr	r3, [pc, #20]	; (b5a54 <_GLOBAL__sub_I_System+0x18>)
   b5a3e:	2202      	movs	r2, #2
   b5a40:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5a42:	4b05      	ldr	r3, [pc, #20]	; (b5a58 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5a44:	4a05      	ldr	r2, [pc, #20]	; (b5a5c <_GLOBAL__sub_I_System+0x20>)
   b5a46:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5a48:	2000      	movs	r0, #0
   b5a4a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5a4e:	f7ff bab9 	b.w	b4fc4 <set_system_mode>
   b5a52:	bf00      	nop
   b5a54:	2003e6f8 	.word	0x2003e6f8
   b5a58:	2003e6ec 	.word	0x2003e6ec
   b5a5c:	ffff0000 	.word	0xffff0000

000b5a60 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b5a60:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b5a62:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b5a64:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b5a68:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b5a6a:	2201      	movs	r2, #1
   b5a6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5a70:	f10d 0107 	add.w	r1, sp, #7
   b5a74:	47a0      	blx	r4
}
   b5a76:	b002      	add	sp, #8
   b5a78:	bd10      	pop	{r4, pc}

000b5a7a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b5a7a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b5a7c:	6803      	ldr	r3, [r0, #0]
   b5a7e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b5a80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5a84:	46a4      	mov	ip, r4
}
   b5a86:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b5a8a:	4760      	bx	ip

000b5a8c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b5a8c:	b513      	push	{r0, r1, r4, lr}
   b5a8e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b5a90:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b5a92:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b5a96:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5a98:	f10d 0107 	add.w	r1, sp, #7
   b5a9c:	2201      	movs	r2, #1
   b5a9e:	47a0      	blx	r4
}
   b5aa0:	b002      	add	sp, #8
   b5aa2:	bd10      	pop	{r4, pc}

000b5aa4 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b5aa4:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5aa6:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5aa8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5aac:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5ab0:	429a      	cmp	r2, r3
int TCPClient::read() {
   b5ab2:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5ab4:	d008      	beq.n	b5ac8 <_ZN9TCPClient4readEv+0x24>
   b5ab6:	6963      	ldr	r3, [r4, #20]
   b5ab8:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b5abc:	1c51      	adds	r1, r2, #1
   b5abe:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b5ac2:	4413      	add	r3, r2
   b5ac4:	7918      	ldrb	r0, [r3, #4]
}
   b5ac6:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5ac8:	6803      	ldr	r3, [r0, #0]
   b5aca:	691b      	ldr	r3, [r3, #16]
   b5acc:	4798      	blx	r3
   b5ace:	2800      	cmp	r0, #0
   b5ad0:	d1f1      	bne.n	b5ab6 <_ZN9TCPClient4readEv+0x12>
   b5ad2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5ad6:	e7f6      	b.n	b5ac6 <_ZN9TCPClient4readEv+0x22>

000b5ad8 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b5ad8:	4770      	bx	lr

000b5ada <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b5ada:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b5adc:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b5ade:	43c0      	mvns	r0, r0
   b5ae0:	0fc0      	lsrs	r0, r0, #31
   b5ae2:	4770      	bx	lr

000b5ae4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5ae4:	4770      	bx	lr
	...

000b5ae8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5ae8:	4b06      	ldr	r3, [pc, #24]	; (b5b04 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5aea:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5aec:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b5aee:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5af2:	d005      	beq.n	b5b00 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5af4:	4608      	mov	r0, r1
   b5af6:	f000 fd71 	bl	b65dc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b5afa:	2800      	cmp	r0, #0
   b5afc:	bf08      	it	eq
   b5afe:	2400      	moveq	r4, #0
      }
   b5b00:	4620      	mov	r0, r4
   b5b02:	bd10      	pop	{r4, pc}
   b5b04:	000b6e6c 	.word	0x000b6e6c

000b5b08 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5b08:	b510      	push	{r4, lr}
   b5b0a:	21ac      	movs	r1, #172	; 0xac
   b5b0c:	4604      	mov	r4, r0
   b5b0e:	f7fe fac4 	bl	b409a <_ZdlPvj>
   b5b12:	4620      	mov	r0, r4
   b5b14:	bd10      	pop	{r4, pc}

000b5b16 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b5b16:	21ac      	movs	r1, #172	; 0xac
   b5b18:	f7fe babf 	b.w	b409a <_ZdlPvj>

000b5b1c <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b5b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b5b20:	f04f 0800 	mov.w	r8, #0
   b5b24:	b086      	sub	sp, #24
   b5b26:	461c      	mov	r4, r3
   b5b28:	f8c0 8004 	str.w	r8, [r0, #4]
   b5b2c:	4605      	mov	r5, r0
   b5b2e:	460e      	mov	r6, r1
   b5b30:	4617      	mov	r7, r2
    struct timeval tv = {};
   b5b32:	4641      	mov	r1, r8
   b5b34:	2210      	movs	r2, #16
   b5b36:	a802      	add	r0, sp, #8
   b5b38:	f000 fe76 	bl	b6828 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b5b3c:	1c63      	adds	r3, r4, #1
   b5b3e:	d009      	beq.n	b5b54 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b5b40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5b44:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b5b48:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b5b4c:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b5b50:	435c      	muls	r4, r3
   b5b52:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b5b54:	6968      	ldr	r0, [r5, #20]
   b5b56:	2310      	movs	r3, #16
   b5b58:	9300      	str	r3, [sp, #0]
   b5b5a:	6800      	ldr	r0, [r0, #0]
   b5b5c:	ab02      	add	r3, sp, #8
   b5b5e:	f241 0205 	movw	r2, #4101	; 0x1005
   b5b62:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5b66:	f7ff f95d 	bl	b4e24 <sock_setsockopt>
    if (ret < 0) {
   b5b6a:	2800      	cmp	r0, #0
   b5b6c:	da07      	bge.n	b5b7e <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b5b6e:	f7ff faed 	bl	b514c <__errno>
   b5b72:	6803      	ldr	r3, [r0, #0]
   b5b74:	606b      	str	r3, [r5, #4]
        return 0;
   b5b76:	2000      	movs	r0, #0
}
   b5b78:	b006      	add	sp, #24
   b5b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b5b7e:	6968      	ldr	r0, [r5, #20]
   b5b80:	2300      	movs	r3, #0
   b5b82:	6800      	ldr	r0, [r0, #0]
   b5b84:	463a      	mov	r2, r7
   b5b86:	4631      	mov	r1, r6
   b5b88:	f7ff f96c 	bl	b4e64 <sock_send>
    if (ret < 0) {
   b5b8c:	1e03      	subs	r3, r0, #0
   b5b8e:	dbee      	blt.n	b5b6e <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b5b90:	4618      	mov	r0, r3
   b5b92:	e7f1      	b.n	b5b78 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b5b94 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b5b94:	b530      	push	{r4, r5, lr}
   b5b96:	b087      	sub	sp, #28
   b5b98:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b5b9a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b5b9c:	4668      	mov	r0, sp
   b5b9e:	f7ff fc77 	bl	b5490 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5ba2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5ba4:	3404      	adds	r4, #4
   b5ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5ba8:	682b      	ldr	r3, [r5, #0]
   b5baa:	7023      	strb	r3, [r4, #0]
    }
   b5bac:	b007      	add	sp, #28
   b5bae:	bd30      	pop	{r4, r5, pc}

000b5bb0 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b5bb0:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b5bb2:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b5bb4:	4b05      	ldr	r3, [pc, #20]	; (b5bcc <_ZN9TCPClient8remoteIPEv+0x1c>)
   b5bb6:	4604      	mov	r4, r0
   b5bb8:	358c      	adds	r5, #140	; 0x8c
   b5bba:	f844 3b04 	str.w	r3, [r4], #4
   b5bbe:	4606      	mov	r6, r0
   b5bc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5bc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5bc4:	682b      	ldr	r3, [r5, #0]
   b5bc6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b5bc8:	4630      	mov	r0, r6
   b5bca:	bd70      	pop	{r4, r5, r6, pc}
   b5bcc:	000b6ee0 	.word	0x000b6ee0

000b5bd0 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5bd4:	4698      	mov	r8, r3
    stop();
   b5bd6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5bd8:	b093      	sub	sp, #76	; 0x4c
   b5bda:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b5bdc:	2400      	movs	r4, #0
    stop();
   b5bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5be0:	4606      	mov	r6, r0
   b5be2:	4617      	mov	r7, r2
    stop();
   b5be4:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5be6:	4628      	mov	r0, r5
   b5be8:	466b      	mov	r3, sp
   b5bea:	4622      	mov	r2, r4
   b5bec:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b5bee:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5bf0:	f7ff f900 	bl	b4df4 <netdb_getaddrinfo>
   b5bf4:	4605      	mov	r5, r0
   b5bf6:	2800      	cmp	r0, #0
   b5bf8:	d163      	bne.n	b5cc2 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b5bfa:	9b00      	ldr	r3, [sp, #0]
   b5bfc:	2b00      	cmp	r3, #0
   b5bfe:	d04b      	beq.n	b5c98 <_ZN9TCPClient7connectEPKctm+0xc8>
   b5c00:	695b      	ldr	r3, [r3, #20]
   b5c02:	2b00      	cmp	r3, #0
   b5c04:	d048      	beq.n	b5c98 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b5c06:	a806      	add	r0, sp, #24
   b5c08:	f7ff fbfe 	bl	b5408 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b5c0c:	9b00      	ldr	r3, [sp, #0]
   b5c0e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b5c10:	7863      	ldrb	r3, [r4, #1]
   b5c12:	2b02      	cmp	r3, #2
   b5c14:	d104      	bne.n	b5c20 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b5c16:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b5c18:	a806      	add	r0, sp, #24
   b5c1a:	f7ff ffbb 	bl	b5b94 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b5c1e:	e026      	b.n	b5c6e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b5c20:	2b0a      	cmp	r3, #10
   b5c22:	d124      	bne.n	b5c6e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b5c24:	2211      	movs	r2, #17
   b5c26:	4629      	mov	r1, r5
   b5c28:	a801      	add	r0, sp, #4
   b5c2a:	f000 fdfd 	bl	b6828 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5c2e:	68a3      	ldr	r3, [r4, #8]
   b5c30:	2b00      	cmp	r3, #0
   b5c32:	d038      	beq.n	b5ca6 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5c34:	f104 0308 	add.w	r3, r4, #8
   b5c38:	f10d 0c04 	add.w	ip, sp, #4
   b5c3c:	3418      	adds	r4, #24
   b5c3e:	6818      	ldr	r0, [r3, #0]
   b5c40:	6859      	ldr	r1, [r3, #4]
   b5c42:	4662      	mov	r2, ip
   b5c44:	c203      	stmia	r2!, {r0, r1}
   b5c46:	3308      	adds	r3, #8
   b5c48:	42a3      	cmp	r3, r4
   b5c4a:	4694      	mov	ip, r2
   b5c4c:	d1f7      	bne.n	b5c3e <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b5c4e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b5c50:	a901      	add	r1, sp, #4
   b5c52:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b5c54:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b5c58:	f7ff fbe4 	bl	b5424 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5c5c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b5c60:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5c64:	ac07      	add	r4, sp, #28
   b5c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5c68:	f8dc 3000 	ldr.w	r3, [ip]
   b5c6c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b5c6e:	a806      	add	r0, sp, #24
   b5c70:	f7ff fbea 	bl	b5448 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b5c74:	b180      	cbz	r0, b5c98 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b5c76:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b5c78:	ad07      	add	r5, sp, #28
   b5c7a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b5c7e:	4b12      	ldr	r3, [pc, #72]	; (b5cc8 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b5c80:	930c      	str	r3, [sp, #48]	; 0x30
   b5c82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5c84:	ac0d      	add	r4, sp, #52	; 0x34
   b5c86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5c88:	682b      	ldr	r3, [r5, #0]
   b5c8a:	7023      	strb	r3, [r4, #0]
   b5c8c:	463a      	mov	r2, r7
   b5c8e:	4643      	mov	r3, r8
   b5c90:	a90c      	add	r1, sp, #48	; 0x30
   b5c92:	4630      	mov	r0, r6
   b5c94:	47c8      	blx	r9
   b5c96:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b5c98:	9800      	ldr	r0, [sp, #0]
   b5c9a:	f7ff f8a3 	bl	b4de4 <netdb_freeaddrinfo>
}
   b5c9e:	4628      	mov	r0, r5
   b5ca0:	b013      	add	sp, #76	; 0x4c
   b5ca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5ca6:	68e3      	ldr	r3, [r4, #12]
   b5ca8:	2b00      	cmp	r3, #0
   b5caa:	d1c3      	bne.n	b5c34 <_ZN9TCPClient7connectEPKctm+0x64>
   b5cac:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b5cb0:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b5cb4:	f7ff f886 	bl	b4dc4 <inet_htonl>
   b5cb8:	4581      	cmp	r9, r0
   b5cba:	d1bb      	bne.n	b5c34 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b5cbc:	f104 0114 	add.w	r1, r4, #20
   b5cc0:	e7aa      	b.n	b5c18 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5cc2:	4625      	mov	r5, r4
   b5cc4:	e7e8      	b.n	b5c98 <_ZN9TCPClient7connectEPKctm+0xc8>
   b5cc6:	bf00      	nop
   b5cc8:	000b6ee0 	.word	0x000b6ee0

000b5ccc <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b5ccc:	b538      	push	{r3, r4, r5, lr}
   b5cce:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b5cd0:	681a      	ldr	r2, [r3, #0]
   b5cd2:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b5cd4:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b5cd6:	da10      	bge.n	b5cfa <_ZN9TCPClient9connectedEv+0x2e>
   b5cd8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5cdc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5ce0:	429a      	cmp	r2, r3
   b5ce2:	d10a      	bne.n	b5cfa <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b5ce4:	6803      	ldr	r3, [r0, #0]
   b5ce6:	691b      	ldr	r3, [r3, #16]
   b5ce8:	4798      	blx	r3
        if (!rv) {
   b5cea:	4604      	mov	r4, r0
   b5cec:	b928      	cbnz	r0, b5cfa <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b5cee:	682b      	ldr	r3, [r5, #0]
   b5cf0:	4628      	mov	r0, r5
   b5cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5cf4:	4798      	blx	r3
        rv = available();
   b5cf6:	4620      	mov	r0, r4
}
   b5cf8:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b5cfa:	2001      	movs	r0, #1
   b5cfc:	e7fc      	b.n	b5cf8 <_ZN9TCPClient9connectedEv+0x2c>

000b5cfe <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b5cfe:	b510      	push	{r4, lr}
   b5d00:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5d02:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5d06:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5d0a:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b5d0c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5d0e:	d005      	beq.n	b5d1c <_ZN9TCPClient4peekEv+0x1e>
   b5d10:	6963      	ldr	r3, [r4, #20]
   b5d12:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b5d16:	4413      	add	r3, r2
   b5d18:	7918      	ldrb	r0, [r3, #4]
}
   b5d1a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5d1c:	6803      	ldr	r3, [r0, #0]
   b5d1e:	691b      	ldr	r3, [r3, #16]
   b5d20:	4798      	blx	r3
   b5d22:	2800      	cmp	r0, #0
   b5d24:	d1f4      	bne.n	b5d10 <_ZN9TCPClient4peekEv+0x12>
   b5d26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5d2a:	e7f6      	b.n	b5d1a <_ZN9TCPClient4peekEv+0x1c>

000b5d2c <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5d2e:	6943      	ldr	r3, [r0, #20]
   b5d30:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b5d32:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5d36:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5d3a:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5d3c:	4605      	mov	r5, r0
   b5d3e:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b5d40:	d016      	beq.n	b5d70 <_ZN9TCPClient4readEPhj+0x44>
   b5d42:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b5d44:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b5d48:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b5d4c:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b5d4e:	42bc      	cmp	r4, r7
   b5d50:	bf28      	it	cs
   b5d52:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b5d54:	3304      	adds	r3, #4
   b5d56:	4622      	mov	r2, r4
   b5d58:	4419      	add	r1, r3
   b5d5a:	4630      	mov	r0, r6
   b5d5c:	f000 fd56 	bl	b680c <memcpy>
   b5d60:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b5d62:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b5d66:	4423      	add	r3, r4
   b5d68:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b5d6c:	4620      	mov	r0, r4
   b5d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b5d70:	6803      	ldr	r3, [r0, #0]
   b5d72:	691b      	ldr	r3, [r3, #16]
   b5d74:	4798      	blx	r3
   b5d76:	2800      	cmp	r0, #0
   b5d78:	d1e3      	bne.n	b5d42 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b5d7a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b5d7e:	e7f5      	b.n	b5d6c <_ZN9TCPClient4readEPhj+0x40>

000b5d80 <_ZN9TCPClient12flush_bufferEv>:
   b5d80:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b5d82:	2300      	movs	r3, #0
   b5d84:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b5d88:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b5d8a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b5d8e:	4770      	bx	lr

000b5d90 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5d94:	461f      	mov	r7, r3
    stop();
   b5d96:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5d98:	460c      	mov	r4, r1
    stop();
   b5d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5d9c:	b08a      	sub	sp, #40	; 0x28
   b5d9e:	4605      	mov	r5, r0
   b5da0:	4616      	mov	r6, r2
    stop();
   b5da2:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b5da4:	7d23      	ldrb	r3, [r4, #20]
   b5da6:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b5daa:	2b04      	cmp	r3, #4
   b5dac:	bf0c      	ite	eq
   b5dae:	2002      	moveq	r0, #2
   b5db0:	200a      	movne	r0, #10
   b5db2:	2206      	movs	r2, #6
   b5db4:	2101      	movs	r1, #1
   b5db6:	f7ff f85d 	bl	b4e74 <sock_socket>
   b5dba:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b5dbe:	696b      	ldr	r3, [r5, #20]
   b5dc0:	681b      	ldr	r3, [r3, #0]
   b5dc2:	2b00      	cmp	r3, #0
   b5dc4:	da08      	bge.n	b5dd8 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b5dc6:	682b      	ldr	r3, [r5, #0]
   b5dc8:	4628      	mov	r0, r5
   b5dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5dcc:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b5dce:	4798      	blx	r3
}
   b5dd0:	4620      	mov	r0, r4
   b5dd2:	b00a      	add	sp, #40	; 0x28
   b5dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b5dd8:	4628      	mov	r0, r5
   b5dda:	f7ff ffd1 	bl	b5d80 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b5dde:	b1b7      	cbz	r7, b5e0e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b5de0:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5de2:	a903      	add	r1, sp, #12
   b5de4:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b5de6:	9303      	str	r3, [sp, #12]
   b5de8:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5dec:	f7fe ffda 	bl	b4da4 <if_index_to_name>
   b5df0:	2800      	cmp	r0, #0
   b5df2:	d1e8      	bne.n	b5dc6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b5df4:	6968      	ldr	r0, [r5, #20]
   b5df6:	2306      	movs	r3, #6
   b5df8:	9300      	str	r3, [sp, #0]
   b5dfa:	6800      	ldr	r0, [r0, #0]
   b5dfc:	ab03      	add	r3, sp, #12
   b5dfe:	f241 020b 	movw	r2, #4107	; 0x100b
   b5e02:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5e06:	f7ff f80d 	bl	b4e24 <sock_setsockopt>
   b5e0a:	2800      	cmp	r0, #0
   b5e0c:	d1db      	bne.n	b5dc6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b5e0e:	221c      	movs	r2, #28
   b5e10:	2100      	movs	r1, #0
   b5e12:	a803      	add	r0, sp, #12
   b5e14:	f000 fd08 	bl	b6828 <memset>
    if (ip.version() == 4) {
   b5e18:	7d23      	ldrb	r3, [r4, #20]
   b5e1a:	2b04      	cmp	r3, #4
   b5e1c:	d11d      	bne.n	b5e5a <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b5e1e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b5e22:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b5e24:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b5e28:	f7fe ffd4 	bl	b4dd4 <inet_htons>
   b5e2c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b5e30:	6860      	ldr	r0, [r4, #4]
   b5e32:	f7fe ffc7 	bl	b4dc4 <inet_htonl>
   b5e36:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b5e38:	696b      	ldr	r3, [r5, #20]
   b5e3a:	221c      	movs	r2, #28
   b5e3c:	6818      	ldr	r0, [r3, #0]
   b5e3e:	a903      	add	r1, sp, #12
   b5e40:	f7ff f800 	bl	b4e44 <sock_connect>
   b5e44:	2800      	cmp	r0, #0
   b5e46:	d1be      	bne.n	b5dc6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b5e48:	3404      	adds	r4, #4
   b5e4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5e4c:	696d      	ldr	r5, [r5, #20]
   b5e4e:	358c      	adds	r5, #140	; 0x8c
   b5e50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5e52:	6823      	ldr	r3, [r4, #0]
   b5e54:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b5e56:	2401      	movs	r4, #1
   b5e58:	e7ba      	b.n	b5dd0 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b5e5a:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b5e5e:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b5e60:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b5e64:	f7fe ffb6 	bl	b4dd4 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5e68:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b5e6a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5e6e:	1d23      	adds	r3, r4, #4
   b5e70:	f104 0714 	add.w	r7, r4, #20
   b5e74:	6818      	ldr	r0, [r3, #0]
   b5e76:	6859      	ldr	r1, [r3, #4]
   b5e78:	4632      	mov	r2, r6
   b5e7a:	c203      	stmia	r2!, {r0, r1}
   b5e7c:	3308      	adds	r3, #8
   b5e7e:	42bb      	cmp	r3, r7
   b5e80:	4616      	mov	r6, r2
   b5e82:	d1f7      	bne.n	b5e74 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b5e84:	e7d8      	b.n	b5e38 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b5e88 <_ZN9TCPClient9availableEv>:
{
   b5e88:	b530      	push	{r4, r5, lr}
   b5e8a:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b5e8c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b5e90:	b08b      	sub	sp, #44	; 0x2c
   b5e92:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b5e94:	b12b      	cbz	r3, b5ea2 <_ZN9TCPClient9availableEv+0x1a>
   b5e96:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b5e9a:	429a      	cmp	r2, r3
   b5e9c:	d101      	bne.n	b5ea2 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b5e9e:	f7ff ff6f 	bl	b5d80 <_ZN9TCPClient12flush_bufferEv>
   b5ea2:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b5ea4:	6808      	ldr	r0, [r1, #0]
   b5ea6:	2800      	cmp	r0, #0
   b5ea8:	db18      	blt.n	b5edc <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b5eaa:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b5eae:	2d7f      	cmp	r5, #127	; 0x7f
   b5eb0:	d814      	bhi.n	b5edc <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b5eb2:	3104      	adds	r1, #4
   b5eb4:	2308      	movs	r3, #8
   b5eb6:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b5eba:	4429      	add	r1, r5
   b5ebc:	f7fe ffca 	bl	b4e54 <sock_recv>
            if (ret > 0) {
   b5ec0:	2800      	cmp	r0, #0
   b5ec2:	dd13      	ble.n	b5eec <_ZN9TCPClient9availableEv+0x64>
   b5ec4:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b5ec6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5eca:	b90a      	cbnz	r2, b5ed0 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b5ecc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b5ed0:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b5ed2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5ed6:	4410      	add	r0, r2
   b5ed8:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b5edc:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b5ede:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b5ee2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b5ee6:	1ac0      	subs	r0, r0, r3
   b5ee8:	b00b      	add	sp, #44	; 0x2c
   b5eea:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b5eec:	f7ff f92e 	bl	b514c <__errno>
   b5ef0:	6803      	ldr	r3, [r0, #0]
   b5ef2:	2b0b      	cmp	r3, #11
   b5ef4:	d0f2      	beq.n	b5edc <_ZN9TCPClient9availableEv+0x54>
   b5ef6:	f7ff f929 	bl	b514c <__errno>
   b5efa:	6803      	ldr	r3, [r0, #0]
   b5efc:	2b0b      	cmp	r3, #11
   b5efe:	d0ed      	beq.n	b5edc <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b5f00:	2320      	movs	r3, #32
   b5f02:	2500      	movs	r5, #0
   b5f04:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b5f08:	f7ff f920 	bl	b514c <__errno>
   b5f0c:	6803      	ldr	r3, [r0, #0]
   b5f0e:	9301      	str	r3, [sp, #4]
   b5f10:	4b08      	ldr	r3, [pc, #32]	; (b5f34 <_ZN9TCPClient9availableEv+0xac>)
   b5f12:	4909      	ldr	r1, [pc, #36]	; (b5f38 <_ZN9TCPClient9availableEv+0xb0>)
   b5f14:	9300      	str	r3, [sp, #0]
   b5f16:	aa02      	add	r2, sp, #8
   b5f18:	462b      	mov	r3, r5
   b5f1a:	2032      	movs	r0, #50	; 0x32
   b5f1c:	f7ff f84a 	bl	b4fb4 <log_message>
                    sock_close(d_->sock);
   b5f20:	6963      	ldr	r3, [r4, #20]
   b5f22:	6818      	ldr	r0, [r3, #0]
   b5f24:	f7fe ff86 	bl	b4e34 <sock_close>
   b5f28:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b5f2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5f2e:	601a      	str	r2, [r3, #0]
   b5f30:	e7d4      	b.n	b5edc <_ZN9TCPClient9availableEv+0x54>
   b5f32:	bf00      	nop
   b5f34:	000b6f33 	.word	0x000b6f33
   b5f38:	000b6f2c 	.word	0x000b6f2c

000b5f3c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b5f3c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b5f3e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b5f40:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b5f42:	6818      	ldr	r0, [r3, #0]
   b5f44:	2800      	cmp	r0, #0
   b5f46:	db01      	blt.n	b5f4c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b5f48:	f7fe ff74 	bl	b4e34 <sock_close>
   b5f4c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b5f4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5f52:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b5f54:	6960      	ldr	r0, [r4, #20]
   b5f56:	2211      	movs	r2, #17
   b5f58:	2100      	movs	r1, #0
   b5f5a:	308c      	adds	r0, #140	; 0x8c
   b5f5c:	f000 fc64 	bl	b6828 <memset>
    flush_buffer();
   b5f60:	4620      	mov	r0, r4
}
   b5f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b5f66:	f7ff bf0b 	b.w	b5d80 <_ZN9TCPClient12flush_bufferEv>

000b5f6a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b5f6a:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b5f6c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b5f6e:	4604      	mov	r4, r0
          total(0) {
   b5f70:	6001      	str	r1, [r0, #0]
   b5f72:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b5f76:	3088      	adds	r0, #136	; 0x88
   b5f78:	f7ff fa46 	bl	b5408 <_ZN9IPAddressC1Ev>
}
   b5f7c:	4620      	mov	r0, r4
   b5f7e:	bd10      	pop	{r4, pc}

000b5f80 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b5f80:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5f82:	2300      	movs	r3, #0
   b5f84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5f88:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b5f8c:	4a0e      	ldr	r2, [pc, #56]	; (b5fc8 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b5f8e:	6103      	str	r3, [r0, #16]
   b5f90:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5f92:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b5f94:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5f96:	20ac      	movs	r0, #172	; 0xac
   b5f98:	9101      	str	r1, [sp, #4]
   b5f9a:	f7fe f87a 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b5f9e:	1e05      	subs	r5, r0, #0
   b5fa0:	f105 060c 	add.w	r6, r5, #12
   b5fa4:	d008      	beq.n	b5fb8 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b5fa6:	2301      	movs	r3, #1
   b5fa8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b5fac:	4b07      	ldr	r3, [pc, #28]	; (b5fcc <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5fae:	9901      	ldr	r1, [sp, #4]
   b5fb0:	602b      	str	r3, [r5, #0]
   b5fb2:	4630      	mov	r0, r6
   b5fb4:	f7ff ffd9 	bl	b5f6a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b5fb8:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b5fba:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b5fbe:	f7ff fedf 	bl	b5d80 <_ZN9TCPClient12flush_bufferEv>
}
   b5fc2:	b002      	add	sp, #8
   b5fc4:	bd70      	pop	{r4, r5, r6, pc}
   b5fc6:	bf00      	nop
   b5fc8:	000b6f68 	.word	0x000b6f68
   b5fcc:	000b6f4c 	.word	0x000b6f4c

000b5fd0 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b5fd0:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b5fd2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b5fd6:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b5fd8:	f7ff ffd2 	bl	b5f80 <_ZN9TCPClientC1Ei>
}
   b5fdc:	4620      	mov	r0, r4
   b5fde:	bd10      	pop	{r4, pc}

000b5fe0 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b5fe0:	b510      	push	{r4, lr}
   b5fe2:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b5fe4:	6800      	ldr	r0, [r0, #0]
   b5fe6:	2800      	cmp	r0, #0
   b5fe8:	db01      	blt.n	b5fee <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b5fea:	f7fe ff23 	bl	b4e34 <sock_close>
    }
}
   b5fee:	4620      	mov	r0, r4
   b5ff0:	bd10      	pop	{r4, pc}

000b5ff2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b5ff2:	300c      	adds	r0, #12
   b5ff4:	f7ff bff4 	b.w	b5fe0 <_ZN9TCPClient4DataD1Ev>

000b5ff8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5ff8:	4b02      	ldr	r3, [pc, #8]	; (b6004 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5ffa:	681a      	ldr	r2, [r3, #0]
   b5ffc:	4b02      	ldr	r3, [pc, #8]	; (b6008 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5ffe:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6000:	4770      	bx	lr
   b6002:	bf00      	nop
   b6004:	2003e4c0 	.word	0x2003e4c0
   b6008:	2003e6fc 	.word	0x2003e6fc

000b600c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b600c:	4770      	bx	lr

000b600e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b600e:	7441      	strb	r1, [r0, #17]
}
   b6010:	4770      	bx	lr

000b6012 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6012:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6014:	7c00      	ldrb	r0, [r0, #16]
   b6016:	f7fe ff75 	bl	b4f04 <hal_usart_available_data_for_write>
}
   b601a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b601e:	bd08      	pop	{r3, pc}

000b6020 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6020:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6022:	7c00      	ldrb	r0, [r0, #16]
   b6024:	f7fe ff46 	bl	b4eb4 <hal_usart_available>
}
   b6028:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b602c:	bd08      	pop	{r3, pc}

000b602e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b602e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6030:	7c00      	ldrb	r0, [r0, #16]
   b6032:	f7fe ff4f 	bl	b4ed4 <hal_usart_peek>
}
   b6036:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b603a:	bd08      	pop	{r3, pc}

000b603c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b603c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b603e:	7c00      	ldrb	r0, [r0, #16]
   b6040:	f7fe ff40 	bl	b4ec4 <hal_usart_read>
}
   b6044:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6048:	bd08      	pop	{r3, pc}

000b604a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b604a:	7c00      	ldrb	r0, [r0, #16]
   b604c:	f7fe bf4a 	b.w	b4ee4 <hal_usart_flush>

000b6050 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6050:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6052:	7c45      	ldrb	r5, [r0, #17]
{
   b6054:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6056:	b12d      	cbz	r5, b6064 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6058:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b605a:	b003      	add	sp, #12
   b605c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6060:	f7fe bf20 	b.w	b4ea4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6064:	7c00      	ldrb	r0, [r0, #16]
   b6066:	9101      	str	r1, [sp, #4]
   b6068:	f7fe ff4c 	bl	b4f04 <hal_usart_available_data_for_write>
   b606c:	2800      	cmp	r0, #0
   b606e:	9901      	ldr	r1, [sp, #4]
   b6070:	dcf2      	bgt.n	b6058 <_ZN11USARTSerial5writeEh+0x8>
}
   b6072:	4628      	mov	r0, r5
   b6074:	b003      	add	sp, #12
   b6076:	bd30      	pop	{r4, r5, pc}

000b6078 <_ZN11USARTSerialD0Ev>:
   b6078:	b510      	push	{r4, lr}
   b607a:	2114      	movs	r1, #20
   b607c:	4604      	mov	r4, r0
   b607e:	f7fe f80c 	bl	b409a <_ZdlPvj>
   b6082:	4620      	mov	r0, r4
   b6084:	bd10      	pop	{r4, pc}
	...

000b6088 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6088:	b510      	push	{r4, lr}
   b608a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b608e:	4604      	mov	r4, r0
   b6090:	4608      	mov	r0, r1
   b6092:	4611      	mov	r1, r2
   b6094:	2200      	movs	r2, #0
   b6096:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b609a:	4b04      	ldr	r3, [pc, #16]	; (b60ac <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b609c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b609e:	2301      	movs	r3, #1
  _serial = serial;
   b60a0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b60a2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b60a4:	f7fe ff36 	bl	b4f14 <hal_usart_init_ex>
}
   b60a8:	4620      	mov	r0, r4
   b60aa:	bd10      	pop	{r4, pc}
   b60ac:	000b6fd0 	.word	0x000b6fd0

000b60b0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b60b0:	7441      	strb	r1, [r0, #17]
}
   b60b2:	4770      	bx	lr

000b60b4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b60b4:	4770      	bx	lr

000b60b6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b60b6:	4770      	bx	lr

000b60b8 <_ZN9USBSerial4readEv>:
{
   b60b8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b60ba:	2100      	movs	r1, #0
   b60bc:	7c00      	ldrb	r0, [r0, #16]
   b60be:	f7fe ff51 	bl	b4f64 <HAL_USB_USART_Receive_Data>
}
   b60c2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b60c6:	bd08      	pop	{r3, pc}

000b60c8 <_ZN9USBSerial4peekEv>:
{
   b60c8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b60ca:	2101      	movs	r1, #1
   b60cc:	7c00      	ldrb	r0, [r0, #16]
   b60ce:	f7fe ff49 	bl	b4f64 <HAL_USB_USART_Receive_Data>
}
   b60d2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b60d6:	bd08      	pop	{r3, pc}

000b60d8 <_ZN9USBSerial17availableForWriteEv>:
{
   b60d8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b60da:	7c00      	ldrb	r0, [r0, #16]
   b60dc:	f7fe ff3a 	bl	b4f54 <HAL_USB_USART_Available_Data_For_Write>
}
   b60e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b60e4:	bd08      	pop	{r3, pc}

000b60e6 <_ZN9USBSerial9availableEv>:
{
   b60e6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b60e8:	7c00      	ldrb	r0, [r0, #16]
   b60ea:	f7fe ff2b 	bl	b4f44 <HAL_USB_USART_Available_Data>
}
   b60ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b60f2:	bd08      	pop	{r3, pc}

000b60f4 <_ZN9USBSerial5writeEh>:
{
   b60f4:	b513      	push	{r0, r1, r4, lr}
   b60f6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b60f8:	7c00      	ldrb	r0, [r0, #16]
{
   b60fa:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b60fc:	f7fe ff2a 	bl	b4f54 <HAL_USB_USART_Available_Data_For_Write>
   b6100:	2800      	cmp	r0, #0
   b6102:	9901      	ldr	r1, [sp, #4]
   b6104:	dc01      	bgt.n	b610a <_ZN9USBSerial5writeEh+0x16>
   b6106:	7c60      	ldrb	r0, [r4, #17]
   b6108:	b120      	cbz	r0, b6114 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b610a:	7c20      	ldrb	r0, [r4, #16]
   b610c:	f7fe ff32 	bl	b4f74 <HAL_USB_USART_Send_Data>
   b6110:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6114:	b002      	add	sp, #8
   b6116:	bd10      	pop	{r4, pc}

000b6118 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6118:	7c00      	ldrb	r0, [r0, #16]
   b611a:	f7fe bf33 	b.w	b4f84 <HAL_USB_USART_Flush_Data>

000b611e <_ZN9USBSerialD0Ev>:
   b611e:	b510      	push	{r4, lr}
   b6120:	2114      	movs	r1, #20
   b6122:	4604      	mov	r4, r0
   b6124:	f7fd ffb9 	bl	b409a <_ZdlPvj>
   b6128:	4620      	mov	r0, r4
   b612a:	bd10      	pop	{r4, pc}

000b612c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b612c:	b510      	push	{r4, lr}
   b612e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6132:	4604      	mov	r4, r0
   b6134:	4608      	mov	r0, r1
   b6136:	2100      	movs	r1, #0
   b6138:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b613c:	4b04      	ldr	r3, [pc, #16]	; (b6150 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b613e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6140:	2301      	movs	r3, #1
  _serial = serial;
   b6142:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6144:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6146:	4611      	mov	r1, r2
   b6148:	f7fe feec 	bl	b4f24 <HAL_USB_USART_Init>
}
   b614c:	4620      	mov	r0, r4
   b614e:	bd10      	pop	{r4, pc}
   b6150:	000b7000 	.word	0x000b7000

000b6154 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6154:	7c00      	ldrb	r0, [r0, #16]
   b6156:	2200      	movs	r2, #0
   b6158:	f7fe beec 	b.w	b4f34 <HAL_USB_USART_Begin>

000b615c <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b615c:	7c00      	ldrb	r0, [r0, #16]
   b615e:	f7fe bf19 	b.w	b4f94 <HAL_USB_USART_Is_Connected>

000b6162 <_Z19acquireSerialBufferv>:
{
   b6162:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6164:	2214      	movs	r2, #20
{
   b6166:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6168:	2100      	movs	r1, #0
   b616a:	f000 fb5d 	bl	b6828 <memset>
}
   b616e:	4620      	mov	r0, r4
   b6170:	bd10      	pop	{r4, pc}
	...

000b6174 <_Z16_fetch_usbserialv>:
{
   b6174:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6176:	4c0f      	ldr	r4, [pc, #60]	; (b61b4 <_Z16_fetch_usbserialv+0x40>)
{
   b6178:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b617a:	a803      	add	r0, sp, #12
   b617c:	f7ff fff1 	bl	b6162 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6180:	7821      	ldrb	r1, [r4, #0]
   b6182:	f3bf 8f5b 	dmb	ish
   b6186:	f011 0101 	ands.w	r1, r1, #1
   b618a:	d10f      	bne.n	b61ac <_Z16_fetch_usbserialv+0x38>
   b618c:	4620      	mov	r0, r4
   b618e:	9101      	str	r1, [sp, #4]
   b6190:	f7fd ff85 	bl	b409e <__cxa_guard_acquire>
   b6194:	9901      	ldr	r1, [sp, #4]
   b6196:	b148      	cbz	r0, b61ac <_Z16_fetch_usbserialv+0x38>
   b6198:	aa03      	add	r2, sp, #12
   b619a:	4807      	ldr	r0, [pc, #28]	; (b61b8 <_Z16_fetch_usbserialv+0x44>)
   b619c:	f7ff ffc6 	bl	b612c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b61a0:	4620      	mov	r0, r4
   b61a2:	f7fd ff81 	bl	b40a8 <__cxa_guard_release>
   b61a6:	4805      	ldr	r0, [pc, #20]	; (b61bc <_Z16_fetch_usbserialv+0x48>)
   b61a8:	f000 fb2a 	bl	b6800 <atexit>
	return _usbserial;
}
   b61ac:	4802      	ldr	r0, [pc, #8]	; (b61b8 <_Z16_fetch_usbserialv+0x44>)
   b61ae:	b008      	add	sp, #32
   b61b0:	bd10      	pop	{r4, pc}
   b61b2:	bf00      	nop
   b61b4:	2003e700 	.word	0x2003e700
   b61b8:	2003e704 	.word	0x2003e704
   b61bc:	000b60b5 	.word	0x000b60b5

000b61c0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b61c0:	2200      	movs	r2, #0
   b61c2:	6840      	ldr	r0, [r0, #4]
   b61c4:	4611      	mov	r1, r2
   b61c6:	f7fe bf49 	b.w	b505c <network_ready>

000b61ca <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b61ca:	2200      	movs	r2, #0
   b61cc:	6840      	ldr	r0, [r0, #4]
   b61ce:	4611      	mov	r1, r2
   b61d0:	f7fe bf64 	b.w	b509c <network_listening>

000b61d4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b61d4:	2200      	movs	r2, #0
   b61d6:	6840      	ldr	r0, [r0, #4]
   b61d8:	4611      	mov	r1, r2
   b61da:	f7fe bf77 	b.w	b50cc <network_get_listen_timeout>

000b61de <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b61de:	6840      	ldr	r0, [r0, #4]
   b61e0:	2200      	movs	r2, #0
   b61e2:	f7fe bf6b 	b.w	b50bc <network_set_listen_timeout>

000b61e6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b61e6:	6840      	ldr	r0, [r0, #4]
   b61e8:	2200      	movs	r2, #0
   b61ea:	f081 0101 	eor.w	r1, r1, #1
   b61ee:	f7fe bf4d 	b.w	b508c <network_listen>

000b61f2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b61f2:	2300      	movs	r3, #0
   b61f4:	6840      	ldr	r0, [r0, #4]
   b61f6:	461a      	mov	r2, r3
   b61f8:	4619      	mov	r1, r3
   b61fa:	f7fe bf3f 	b.w	b507c <network_off>

000b61fe <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b61fe:	2300      	movs	r3, #0
   b6200:	6840      	ldr	r0, [r0, #4]
   b6202:	461a      	mov	r2, r3
   b6204:	4619      	mov	r1, r3
   b6206:	f7fe bf31 	b.w	b506c <network_on>

000b620a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b620a:	2200      	movs	r2, #0
   b620c:	6840      	ldr	r0, [r0, #4]
   b620e:	4611      	mov	r1, r2
   b6210:	f7fe bf14 	b.w	b503c <network_connecting>

000b6214 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6214:	6840      	ldr	r0, [r0, #4]
   b6216:	2200      	movs	r2, #0
   b6218:	2102      	movs	r1, #2
   b621a:	f7fe bf17 	b.w	b504c <network_disconnect>

000b621e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b621e:	2300      	movs	r3, #0
   b6220:	6840      	ldr	r0, [r0, #4]
   b6222:	461a      	mov	r2, r3
   b6224:	f7fe bf02 	b.w	b502c <network_connect>

000b6228 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6228:	4b02      	ldr	r3, [pc, #8]	; (b6234 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b622a:	2204      	movs	r2, #4
   b622c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b622e:	4a02      	ldr	r2, [pc, #8]	; (b6238 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6230:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6232:	4770      	bx	lr
   b6234:	2003e718 	.word	0x2003e718
   b6238:	000b7030 	.word	0x000b7030

000b623c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b623c:	b510      	push	{r4, lr}
   b623e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b6240:	f000 fb3a 	bl	b68b8 <strlen>
   b6244:	3801      	subs	r0, #1
   b6246:	1823      	adds	r3, r4, r0
   b6248:	4620      	mov	r0, r4
	while(i<j){
   b624a:	4283      	cmp	r3, r0
   b624c:	d906      	bls.n	b625c <_Z11str_reversePc+0x20>
		c = *i;
   b624e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b6250:	7819      	ldrb	r1, [r3, #0]
   b6252:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b6256:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b625a:	e7f6      	b.n	b624a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b625c:	bd10      	pop	{r4, pc}

000b625e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b625e:	b570      	push	{r4, r5, r6, lr}
   b6260:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b6262:	1e91      	subs	r1, r2, #2
   b6264:	2922      	cmp	r1, #34	; 0x22
   b6266:	d81d      	bhi.n	b62a4 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b6268:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b626a:	b930      	cbnz	r0, b627a <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b626c:	4423      	add	r3, r4
            *ptr++ = '0';
   b626e:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b6270:	429d      	cmp	r5, r3
   b6272:	d210      	bcs.n	b6296 <ultoa+0x38>
            *ptr++ = '0';
   b6274:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b6278:	e7fa      	b.n	b6270 <ultoa+0x12>
            result.quot = a/radix;
   b627a:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b627e:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b6282:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b6284:	2809      	cmp	r0, #9
                *ptr += '0';
   b6286:	bf94      	ite	ls
   b6288:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b628a:	3157      	addhi	r1, #87	; 0x57
   b628c:	b2c9      	uxtb	r1, r1
   b628e:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b6292:	4630      	mov	r0, r6
	while(a){
   b6294:	e7e9      	b.n	b626a <ultoa+0xc>

	*ptr = '\0';
   b6296:	2300      	movs	r3, #0
	str_reverse(buffer);
   b6298:	4620      	mov	r0, r4
	*ptr = '\0';
   b629a:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b629c:	f7ff ffce 	bl	b623c <_Z11str_reversePc>
	return buffer;
   b62a0:	4620      	mov	r0, r4
}
   b62a2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b62a4:	2000      	movs	r0, #0
   b62a6:	e7fc      	b.n	b62a2 <ultoa+0x44>

000b62a8 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b62a8:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b62aa:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b62ac:	460c      	mov	r4, r1
   b62ae:	4615      	mov	r5, r2
	if(a<0){
   b62b0:	da0e      	bge.n	b62d0 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b62b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b62b6:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b62ba:	bf14      	ite	ne
   b62bc:	4258      	negne	r0, r3
   b62be:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b62c0:	2301      	movs	r3, #1
		*buffer = '-';
   b62c2:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b62c4:	462a      	mov	r2, r5
   b62c6:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b62c8:	f7ff ffc9 	bl	b625e <ultoa>
	}
	return buffer;
}
   b62cc:	4620      	mov	r0, r4
   b62ce:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b62d0:	2301      	movs	r3, #1
   b62d2:	e7f9      	b.n	b62c8 <itoa+0x20>

000b62d4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b62d4:	4b01      	ldr	r3, [pc, #4]	; (b62dc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b62d6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b62d8:	4770      	bx	lr
   b62da:	bf00      	nop
   b62dc:	2003e4c4 	.word	0x2003e4c4

000b62e0 <serialEventRun>:
{
   b62e0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b62e2:	4b0b      	ldr	r3, [pc, #44]	; (b6310 <serialEventRun+0x30>)
   b62e4:	b143      	cbz	r3, b62f8 <serialEventRun+0x18>
   b62e6:	f7ff ff45 	bl	b6174 <_Z16_fetch_usbserialv>
   b62ea:	6803      	ldr	r3, [r0, #0]
   b62ec:	691b      	ldr	r3, [r3, #16]
   b62ee:	4798      	blx	r3
   b62f0:	2800      	cmp	r0, #0
   b62f2:	dd01      	ble.n	b62f8 <serialEventRun+0x18>
        serialEvent();
   b62f4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b62f8:	4b06      	ldr	r3, [pc, #24]	; (b6314 <serialEventRun+0x34>)
   b62fa:	b143      	cbz	r3, b630e <serialEventRun+0x2e>
   b62fc:	f000 f944 	bl	b6588 <_Z22__fetch_global_Serial1v>
   b6300:	6803      	ldr	r3, [r0, #0]
   b6302:	691b      	ldr	r3, [r3, #16]
   b6304:	4798      	blx	r3
   b6306:	2800      	cmp	r0, #0
   b6308:	dd01      	ble.n	b630e <serialEventRun+0x2e>
        serialEvent1();
   b630a:	f3af 8000 	nop.w
}
   b630e:	bd08      	pop	{r3, pc}
	...

000b6318 <_post_loop>:
{
   b6318:	b508      	push	{r3, lr}
	serialEventRun();
   b631a:	f7ff ffe1 	bl	b62e0 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b631e:	f7fe fcb1 	bl	b4c84 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6322:	4b01      	ldr	r3, [pc, #4]	; (b6328 <_post_loop+0x10>)
   b6324:	6018      	str	r0, [r3, #0]
}
   b6326:	bd08      	pop	{r3, pc}
   b6328:	2003e728 	.word	0x2003e728

000b632c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b632c:	4805      	ldr	r0, [pc, #20]	; (b6344 <_Z33system_initialize_user_backup_ramv+0x18>)
   b632e:	4a06      	ldr	r2, [pc, #24]	; (b6348 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6330:	4906      	ldr	r1, [pc, #24]	; (b634c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6332:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6334:	1a12      	subs	r2, r2, r0
   b6336:	f000 fa69 	bl	b680c <memcpy>
    __backup_sram_signature = signature;
   b633a:	4b05      	ldr	r3, [pc, #20]	; (b6350 <_Z33system_initialize_user_backup_ramv+0x24>)
   b633c:	4a05      	ldr	r2, [pc, #20]	; (b6354 <_Z33system_initialize_user_backup_ramv+0x28>)
   b633e:	601a      	str	r2, [r3, #0]
}
   b6340:	bd08      	pop	{r3, pc}
   b6342:	bf00      	nop
   b6344:	2003f400 	.word	0x2003f400
   b6348:	2003f404 	.word	0x2003f404
   b634c:	000b7224 	.word	0x000b7224
   b6350:	2003f400 	.word	0x2003f400
   b6354:	9a271c1e 	.word	0x9a271c1e

000b6358 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6358:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b635a:	2300      	movs	r3, #0
   b635c:	9300      	str	r3, [sp, #0]
   b635e:	461a      	mov	r2, r3
   b6360:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6364:	f7fe fe48 	bl	b4ff8 <system_ctrl_set_result>
}
   b6368:	b003      	add	sp, #12
   b636a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6370 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6370:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6372:	8843      	ldrh	r3, [r0, #2]
   b6374:	2b0a      	cmp	r3, #10
   b6376:	d008      	beq.n	b638a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6378:	2b50      	cmp	r3, #80	; 0x50
   b637a:	d10b      	bne.n	b6394 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b637c:	4b09      	ldr	r3, [pc, #36]	; (b63a4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b637e:	681b      	ldr	r3, [r3, #0]
   b6380:	b14b      	cbz	r3, b6396 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6382:	b003      	add	sp, #12
   b6384:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6388:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b638a:	f7ff ffe5 	bl	b6358 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b638e:	b003      	add	sp, #12
   b6390:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6394:	2300      	movs	r3, #0
   b6396:	9300      	str	r3, [sp, #0]
   b6398:	461a      	mov	r2, r3
   b639a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b639e:	f7fe fe2b 	bl	b4ff8 <system_ctrl_set_result>
}
   b63a2:	e7f4      	b.n	b638e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b63a4:	2003e724 	.word	0x2003e724

000b63a8 <module_user_init_hook>:
{
   b63a8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b63aa:	4812      	ldr	r0, [pc, #72]	; (b63f4 <module_user_init_hook+0x4c>)
   b63ac:	2100      	movs	r1, #0
   b63ae:	f7fe fedd 	bl	b516c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b63b2:	4b11      	ldr	r3, [pc, #68]	; (b63f8 <module_user_init_hook+0x50>)
   b63b4:	681a      	ldr	r2, [r3, #0]
   b63b6:	4b11      	ldr	r3, [pc, #68]	; (b63fc <module_user_init_hook+0x54>)
   b63b8:	429a      	cmp	r2, r3
   b63ba:	4b11      	ldr	r3, [pc, #68]	; (b6400 <module_user_init_hook+0x58>)
   b63bc:	bf0c      	ite	eq
   b63be:	2201      	moveq	r2, #1
   b63c0:	2200      	movne	r2, #0
   b63c2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b63c4:	d001      	beq.n	b63ca <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b63c6:	f7ff ffb1 	bl	b632c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b63ca:	f7fe fc4b 	bl	b4c64 <HAL_RNG_GetRandomNumber>
   b63ce:	4604      	mov	r4, r0
    srand(seed);
   b63d0:	f000 fa32 	bl	b6838 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b63d4:	4b0b      	ldr	r3, [pc, #44]	; (b6404 <module_user_init_hook+0x5c>)
   b63d6:	b113      	cbz	r3, b63de <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b63d8:	4620      	mov	r0, r4
   b63da:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b63de:	2100      	movs	r1, #0
   b63e0:	4808      	ldr	r0, [pc, #32]	; (b6404 <module_user_init_hook+0x5c>)
   b63e2:	f7fe fe1b 	bl	b501c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b63e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b63ea:	4807      	ldr	r0, [pc, #28]	; (b6408 <module_user_init_hook+0x60>)
   b63ec:	2100      	movs	r1, #0
   b63ee:	f7fe bdf9 	b.w	b4fe4 <system_ctrl_set_app_request_handler>
   b63f2:	bf00      	nop
   b63f4:	000b62d5 	.word	0x000b62d5
   b63f8:	2003f400 	.word	0x2003f400
   b63fc:	9a271c1e 	.word	0x9a271c1e
   b6400:	2003e720 	.word	0x2003e720
   b6404:	00000000 	.word	0x00000000
   b6408:	000b6371 	.word	0x000b6371

000b640c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b640c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b640e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6410:	d902      	bls.n	b6418 <pinAvailable+0xc>
    return false;
   b6412:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6414:	b002      	add	sp, #8
   b6416:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6418:	f1a0 030b 	sub.w	r3, r0, #11
   b641c:	2b02      	cmp	r3, #2
   b641e:	d81a      	bhi.n	b6456 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6420:	4c17      	ldr	r4, [pc, #92]	; (b6480 <pinAvailable+0x74>)
   b6422:	7821      	ldrb	r1, [r4, #0]
   b6424:	f3bf 8f5b 	dmb	ish
   b6428:	f011 0101 	ands.w	r1, r1, #1
   b642c:	d10b      	bne.n	b6446 <pinAvailable+0x3a>
   b642e:	4620      	mov	r0, r4
   b6430:	9101      	str	r1, [sp, #4]
   b6432:	f7fd fe34 	bl	b409e <__cxa_guard_acquire>
   b6436:	9901      	ldr	r1, [sp, #4]
   b6438:	b128      	cbz	r0, b6446 <pinAvailable+0x3a>
   b643a:	4812      	ldr	r0, [pc, #72]	; (b6484 <pinAvailable+0x78>)
   b643c:	f7ff f9d7 	bl	b57ee <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6440:	4620      	mov	r0, r4
   b6442:	f7fd fe31 	bl	b40a8 <__cxa_guard_release>
   b6446:	4b0f      	ldr	r3, [pc, #60]	; (b6484 <pinAvailable+0x78>)
   b6448:	7818      	ldrb	r0, [r3, #0]
   b644a:	f7fe fd23 	bl	b4e94 <hal_spi_is_enabled>
   b644e:	2800      	cmp	r0, #0
   b6450:	d1df      	bne.n	b6412 <pinAvailable+0x6>
  return true; // 'pin' is available
   b6452:	2001      	movs	r0, #1
   b6454:	e7de      	b.n	b6414 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6456:	2801      	cmp	r0, #1
   b6458:	d809      	bhi.n	b646e <pinAvailable+0x62>
   b645a:	f000 f855 	bl	b6508 <_Z19__fetch_global_Wirev>
   b645e:	2100      	movs	r1, #0
   b6460:	7c00      	ldrb	r0, [r0, #16]
   b6462:	f7fe fc8f 	bl	b4d84 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6466:	f080 0001 	eor.w	r0, r0, #1
   b646a:	b2c0      	uxtb	r0, r0
   b646c:	e7d2      	b.n	b6414 <pinAvailable+0x8>
   b646e:	3809      	subs	r0, #9
   b6470:	2801      	cmp	r0, #1
   b6472:	d8ee      	bhi.n	b6452 <pinAvailable+0x46>
   b6474:	f000 f888 	bl	b6588 <_Z22__fetch_global_Serial1v>
   b6478:	7c00      	ldrb	r0, [r0, #16]
   b647a:	f7fe fd3b 	bl	b4ef4 <hal_usart_is_enabled>
   b647e:	e7f2      	b.n	b6466 <pinAvailable+0x5a>
   b6480:	2003e624 	.word	0x2003e624
   b6484:	2003e628 	.word	0x2003e628

000b6488 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6488:	2823      	cmp	r0, #35	; 0x23
{
   b648a:	b538      	push	{r3, r4, r5, lr}
   b648c:	4604      	mov	r4, r0
   b648e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6490:	d80a      	bhi.n	b64a8 <pinMode+0x20>
   b6492:	29ff      	cmp	r1, #255	; 0xff
   b6494:	d008      	beq.n	b64a8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6496:	f7ff ffb9 	bl	b640c <pinAvailable>
   b649a:	b128      	cbz	r0, b64a8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b649c:	4629      	mov	r1, r5
   b649e:	4620      	mov	r0, r4
}
   b64a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b64a4:	f7fe bc0e 	b.w	b4cc4 <HAL_Pin_Mode>
}
   b64a8:	bd38      	pop	{r3, r4, r5, pc}

000b64aa <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b64aa:	b510      	push	{r4, lr}
   b64ac:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b64ae:	f7fe fc11 	bl	b4cd4 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b64b2:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b64b4:	b2db      	uxtb	r3, r3
   b64b6:	2b01      	cmp	r3, #1
   b64b8:	d908      	bls.n	b64cc <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b64ba:	4620      	mov	r0, r4
   b64bc:	f7ff ffa6 	bl	b640c <pinAvailable>
   b64c0:	b120      	cbz	r0, b64cc <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b64c2:	4620      	mov	r0, r4
}
   b64c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b64c8:	f7fe bc0c 	b.w	b4ce4 <HAL_GPIO_Read>
}
   b64cc:	2000      	movs	r0, #0
   b64ce:	bd10      	pop	{r4, pc}

000b64d0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b64d0:	4770      	bx	lr
	...

000b64d4 <_Z17acquireWireBufferv>:
{
   b64d4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b64d6:	4b0a      	ldr	r3, [pc, #40]	; (b6500 <_Z17acquireWireBufferv+0x2c>)
   b64d8:	6003      	str	r3, [r0, #0]
   b64da:	2301      	movs	r3, #1
{
   b64dc:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b64de:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b64e0:	4908      	ldr	r1, [pc, #32]	; (b6504 <_Z17acquireWireBufferv+0x30>)
   b64e2:	2020      	movs	r0, #32
   b64e4:	f000 f874 	bl	b65d0 <_ZnajRKSt9nothrow_t>
	};
   b64e8:	2520      	movs	r5, #32
   b64ea:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b64ec:	4905      	ldr	r1, [pc, #20]	; (b6504 <_Z17acquireWireBufferv+0x30>)
	};
   b64ee:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b64f0:	4628      	mov	r0, r5
   b64f2:	f000 f86d 	bl	b65d0 <_ZnajRKSt9nothrow_t>
	};
   b64f6:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b64fa:	4620      	mov	r0, r4
   b64fc:	bd38      	pop	{r3, r4, r5, pc}
   b64fe:	bf00      	nop
   b6500:	00010018 	.word	0x00010018
   b6504:	000b7064 	.word	0x000b7064

000b6508 <_Z19__fetch_global_Wirev>:
{
   b6508:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b650a:	4d0e      	ldr	r5, [pc, #56]	; (b6544 <_Z19__fetch_global_Wirev+0x3c>)
   b650c:	7829      	ldrb	r1, [r5, #0]
   b650e:	f3bf 8f5b 	dmb	ish
   b6512:	f011 0401 	ands.w	r4, r1, #1
{
   b6516:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6518:	d111      	bne.n	b653e <_Z19__fetch_global_Wirev+0x36>
   b651a:	4628      	mov	r0, r5
   b651c:	f7fd fdbf 	bl	b409e <__cxa_guard_acquire>
   b6520:	b168      	cbz	r0, b653e <_Z19__fetch_global_Wirev+0x36>
   b6522:	4668      	mov	r0, sp
   b6524:	f7ff ffd6 	bl	b64d4 <_Z17acquireWireBufferv>
   b6528:	466a      	mov	r2, sp
   b652a:	4621      	mov	r1, r4
   b652c:	4806      	ldr	r0, [pc, #24]	; (b6548 <_Z19__fetch_global_Wirev+0x40>)
   b652e:	f7fe feaf 	bl	b5290 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6532:	4628      	mov	r0, r5
   b6534:	f7fd fdb8 	bl	b40a8 <__cxa_guard_release>
   b6538:	4804      	ldr	r0, [pc, #16]	; (b654c <_Z19__fetch_global_Wirev+0x44>)
   b653a:	f000 f961 	bl	b6800 <atexit>
	return wire;
}
   b653e:	4802      	ldr	r0, [pc, #8]	; (b6548 <_Z19__fetch_global_Wirev+0x40>)
   b6540:	b007      	add	sp, #28
   b6542:	bd30      	pop	{r4, r5, pc}
   b6544:	2003e72c 	.word	0x2003e72c
   b6548:	2003e730 	.word	0x2003e730
   b654c:	000b64d1 	.word	0x000b64d1

000b6550 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6550:	4770      	bx	lr
	...

000b6554 <_Z20acquireSerial1Bufferv>:
{
   b6554:	b538      	push	{r3, r4, r5, lr}
   b6556:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6558:	2514      	movs	r5, #20
   b655a:	462a      	mov	r2, r5
   b655c:	2100      	movs	r1, #0
   b655e:	f000 f963 	bl	b6828 <memset>
   b6562:	8025      	strh	r5, [r4, #0]
   b6564:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6566:	4907      	ldr	r1, [pc, #28]	; (b6584 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6568:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b656a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b656c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b656e:	f000 f82f 	bl	b65d0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6572:	4904      	ldr	r1, [pc, #16]	; (b6584 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6574:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6576:	4628      	mov	r0, r5
   b6578:	f000 f82a 	bl	b65d0 <_ZnajRKSt9nothrow_t>
    };
   b657c:	60e0      	str	r0, [r4, #12]
}
   b657e:	4620      	mov	r0, r4
   b6580:	bd38      	pop	{r3, r4, r5, pc}
   b6582:	bf00      	nop
   b6584:	000b7064 	.word	0x000b7064

000b6588 <_Z22__fetch_global_Serial1v>:
{
   b6588:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b658a:	4d0e      	ldr	r5, [pc, #56]	; (b65c4 <_Z22__fetch_global_Serial1v+0x3c>)
   b658c:	7829      	ldrb	r1, [r5, #0]
   b658e:	f3bf 8f5b 	dmb	ish
   b6592:	f011 0401 	ands.w	r4, r1, #1
{
   b6596:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6598:	d111      	bne.n	b65be <_Z22__fetch_global_Serial1v+0x36>
   b659a:	4628      	mov	r0, r5
   b659c:	f7fd fd7f 	bl	b409e <__cxa_guard_acquire>
   b65a0:	b168      	cbz	r0, b65be <_Z22__fetch_global_Serial1v+0x36>
   b65a2:	a801      	add	r0, sp, #4
   b65a4:	f7ff ffd6 	bl	b6554 <_Z20acquireSerial1Bufferv>
   b65a8:	aa01      	add	r2, sp, #4
   b65aa:	4621      	mov	r1, r4
   b65ac:	4806      	ldr	r0, [pc, #24]	; (b65c8 <_Z22__fetch_global_Serial1v+0x40>)
   b65ae:	f7ff fd6b 	bl	b6088 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b65b2:	4628      	mov	r0, r5
   b65b4:	f7fd fd78 	bl	b40a8 <__cxa_guard_release>
   b65b8:	4804      	ldr	r0, [pc, #16]	; (b65cc <_Z22__fetch_global_Serial1v+0x44>)
   b65ba:	f000 f921 	bl	b6800 <atexit>
    return serial1;
}
   b65be:	4802      	ldr	r0, [pc, #8]	; (b65c8 <_Z22__fetch_global_Serial1v+0x40>)
   b65c0:	b007      	add	sp, #28
   b65c2:	bd30      	pop	{r4, r5, pc}
   b65c4:	2003e744 	.word	0x2003e744
   b65c8:	2003e748 	.word	0x2003e748
   b65cc:	000b6551 	.word	0x000b6551

000b65d0 <_ZnajRKSt9nothrow_t>:
   b65d0:	f7fd bd61 	b.w	b4096 <_Znaj>

000b65d4 <_ZSt25__throw_bad_function_callv>:
   b65d4:	b508      	push	{r3, lr}
   b65d6:	f7fe fdb1 	bl	b513c <abort>
	...

000b65dc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b65dc:	4901      	ldr	r1, [pc, #4]	; (b65e4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b65de:	f000 b8f9 	b.w	b67d4 <_ZNKSt9type_infoeqERKS_>
   b65e2:	bf00      	nop
   b65e4:	000b7080 	.word	0x000b7080

000b65e8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b65e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b65ea:	2400      	movs	r4, #0
   b65ec:	2310      	movs	r3, #16
   b65ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b65f2:	6803      	ldr	r3, [r0, #0]
   b65f4:	4615      	mov	r5, r2
   b65f6:	699e      	ldr	r6, [r3, #24]
   b65f8:	6812      	ldr	r2, [r2, #0]
   b65fa:	466b      	mov	r3, sp
   b65fc:	e9cd 4400 	strd	r4, r4, [sp]
   b6600:	47b0      	blx	r6
   b6602:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b6606:	f003 0306 	and.w	r3, r3, #6
   b660a:	2b06      	cmp	r3, #6
   b660c:	bf03      	ittte	eq
   b660e:	9b00      	ldreq	r3, [sp, #0]
   b6610:	602b      	streq	r3, [r5, #0]
   b6612:	2001      	moveq	r0, #1
   b6614:	4620      	movne	r0, r4
   b6616:	b004      	add	sp, #16
   b6618:	bd70      	pop	{r4, r5, r6, pc}

000b661a <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b661a:	9800      	ldr	r0, [sp, #0]
   b661c:	4290      	cmp	r0, r2
   b661e:	bf14      	ite	ne
   b6620:	2001      	movne	r0, #1
   b6622:	2006      	moveq	r0, #6
   b6624:	4770      	bx	lr
	...

000b6628 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b6628:	b510      	push	{r4, lr}
   b662a:	4b03      	ldr	r3, [pc, #12]	; (b6638 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b662c:	6003      	str	r3, [r0, #0]
   b662e:	4604      	mov	r4, r0
   b6630:	f000 f8cd 	bl	b67ce <_ZNSt9type_infoD1Ev>
   b6634:	4620      	mov	r0, r4
   b6636:	bd10      	pop	{r4, pc}
   b6638:	000b70c0 	.word	0x000b70c0

000b663c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b663c:	b510      	push	{r4, lr}
   b663e:	4604      	mov	r4, r0
   b6640:	f7ff fff2 	bl	b6628 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6644:	4620      	mov	r0, r4
   b6646:	2108      	movs	r1, #8
   b6648:	f7fd fd27 	bl	b409a <_ZdlPvj>
   b664c:	4620      	mov	r0, r4
   b664e:	bd10      	pop	{r4, pc}

000b6650 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b6650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6654:	461f      	mov	r7, r3
   b6656:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b665a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b665e:	4598      	cmp	r8, r3
   b6660:	4606      	mov	r6, r0
   b6662:	4615      	mov	r5, r2
   b6664:	d107      	bne.n	b6676 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6666:	9907      	ldr	r1, [sp, #28]
   b6668:	f000 f8b4 	bl	b67d4 <_ZNKSt9type_infoeqERKS_>
   b666c:	b118      	cbz	r0, b6676 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b666e:	7165      	strb	r5, [r4, #5]
   b6670:	2000      	movs	r0, #0
   b6672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6676:	4639      	mov	r1, r7
   b6678:	4630      	mov	r0, r6
   b667a:	f000 f8ab 	bl	b67d4 <_ZNKSt9type_infoeqERKS_>
   b667e:	2800      	cmp	r0, #0
   b6680:	d0f6      	beq.n	b6670 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b6682:	2301      	movs	r3, #1
   b6684:	f8c4 8000 	str.w	r8, [r4]
   b6688:	7125      	strb	r5, [r4, #4]
   b668a:	71a3      	strb	r3, [r4, #6]
   b668c:	e7f0      	b.n	b6670 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b668e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b668e:	b538      	push	{r3, r4, r5, lr}
   b6690:	4615      	mov	r5, r2
   b6692:	461c      	mov	r4, r3
   b6694:	f000 f89e 	bl	b67d4 <_ZNKSt9type_infoeqERKS_>
   b6698:	b120      	cbz	r0, b66a4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b669a:	2308      	movs	r3, #8
   b669c:	60e3      	str	r3, [r4, #12]
   b669e:	2306      	movs	r3, #6
   b66a0:	6025      	str	r5, [r4, #0]
   b66a2:	7123      	strb	r3, [r4, #4]
   b66a4:	bd38      	pop	{r3, r4, r5, pc}

000b66a6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b66a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b66a8:	4605      	mov	r5, r0
   b66aa:	460c      	mov	r4, r1
   b66ac:	9201      	str	r2, [sp, #4]
   b66ae:	461e      	mov	r6, r3
   b66b0:	f000 f890 	bl	b67d4 <_ZNKSt9type_infoeqERKS_>
   b66b4:	b950      	cbnz	r0, b66cc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b66b6:	2e03      	cmp	r6, #3
   b66b8:	d808      	bhi.n	b66cc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b66ba:	6823      	ldr	r3, [r4, #0]
   b66bc:	9a01      	ldr	r2, [sp, #4]
   b66be:	695b      	ldr	r3, [r3, #20]
   b66c0:	4629      	mov	r1, r5
   b66c2:	4620      	mov	r0, r4
   b66c4:	b002      	add	sp, #8
   b66c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b66ca:	4718      	bx	r3
   b66cc:	b002      	add	sp, #8
   b66ce:	bd70      	pop	{r4, r5, r6, pc}

000b66d0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b66d0:	b510      	push	{r4, lr}
   b66d2:	4b03      	ldr	r3, [pc, #12]	; (b66e0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b66d4:	6003      	str	r3, [r0, #0]
   b66d6:	4604      	mov	r4, r0
   b66d8:	f7ff ffa6 	bl	b6628 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b66dc:	4620      	mov	r0, r4
   b66de:	bd10      	pop	{r4, pc}
   b66e0:	000b7120 	.word	0x000b7120

000b66e4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b66e4:	b510      	push	{r4, lr}
   b66e6:	4604      	mov	r4, r0
   b66e8:	f7ff fff2 	bl	b66d0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b66ec:	4620      	mov	r0, r4
   b66ee:	210c      	movs	r1, #12
   b66f0:	f7fd fcd3 	bl	b409a <_ZdlPvj>
   b66f4:	4620      	mov	r0, r4
   b66f6:	bd10      	pop	{r4, pc}

000b66f8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b66f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b66fa:	9f08      	ldr	r7, [sp, #32]
   b66fc:	4297      	cmp	r7, r2
   b66fe:	4605      	mov	r5, r0
   b6700:	460e      	mov	r6, r1
   b6702:	4614      	mov	r4, r2
   b6704:	d00a      	beq.n	b671c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b6706:	68a8      	ldr	r0, [r5, #8]
   b6708:	6802      	ldr	r2, [r0, #0]
   b670a:	9708      	str	r7, [sp, #32]
   b670c:	6a15      	ldr	r5, [r2, #32]
   b670e:	4631      	mov	r1, r6
   b6710:	4622      	mov	r2, r4
   b6712:	46ac      	mov	ip, r5
   b6714:	b003      	add	sp, #12
   b6716:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b671a:	4760      	bx	ip
   b671c:	4619      	mov	r1, r3
   b671e:	9301      	str	r3, [sp, #4]
   b6720:	f000 f858 	bl	b67d4 <_ZNKSt9type_infoeqERKS_>
   b6724:	9b01      	ldr	r3, [sp, #4]
   b6726:	2800      	cmp	r0, #0
   b6728:	d0ed      	beq.n	b6706 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b672a:	2006      	movs	r0, #6
   b672c:	b003      	add	sp, #12
   b672e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6730 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b6730:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6734:	460d      	mov	r5, r1
   b6736:	4619      	mov	r1, r3
   b6738:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b673c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b6740:	4681      	mov	r9, r0
   b6742:	4617      	mov	r7, r2
   b6744:	4698      	mov	r8, r3
   b6746:	f000 f845 	bl	b67d4 <_ZNKSt9type_infoeqERKS_>
   b674a:	b190      	cbz	r0, b6772 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b674c:	2d00      	cmp	r5, #0
   b674e:	6034      	str	r4, [r6, #0]
   b6750:	7137      	strb	r7, [r6, #4]
   b6752:	db09      	blt.n	b6768 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b6754:	1961      	adds	r1, r4, r5
   b6756:	458a      	cmp	sl, r1
   b6758:	bf0c      	ite	eq
   b675a:	2106      	moveq	r1, #6
   b675c:	2101      	movne	r1, #1
   b675e:	71b1      	strb	r1, [r6, #6]
   b6760:	2000      	movs	r0, #0
   b6762:	b001      	add	sp, #4
   b6764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6768:	3502      	adds	r5, #2
   b676a:	d1f9      	bne.n	b6760 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b676c:	2301      	movs	r3, #1
   b676e:	71b3      	strb	r3, [r6, #6]
   b6770:	e7f6      	b.n	b6760 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6772:	4554      	cmp	r4, sl
   b6774:	d106      	bne.n	b6784 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6776:	4659      	mov	r1, fp
   b6778:	4648      	mov	r0, r9
   b677a:	f000 f82b 	bl	b67d4 <_ZNKSt9type_infoeqERKS_>
   b677e:	b108      	cbz	r0, b6784 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6780:	7177      	strb	r7, [r6, #5]
   b6782:	e7ed      	b.n	b6760 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6784:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b6788:	6803      	ldr	r3, [r0, #0]
   b678a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b678e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b6792:	69dc      	ldr	r4, [r3, #28]
   b6794:	463a      	mov	r2, r7
   b6796:	4643      	mov	r3, r8
   b6798:	4629      	mov	r1, r5
   b679a:	46a4      	mov	ip, r4
   b679c:	b001      	add	sp, #4
   b679e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b67a2:	4760      	bx	ip

000b67a4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b67a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b67a8:	4607      	mov	r7, r0
   b67aa:	460c      	mov	r4, r1
   b67ac:	4615      	mov	r5, r2
   b67ae:	461e      	mov	r6, r3
   b67b0:	f7ff ff6d 	bl	b668e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b67b4:	b948      	cbnz	r0, b67ca <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b67b6:	68b8      	ldr	r0, [r7, #8]
   b67b8:	6803      	ldr	r3, [r0, #0]
   b67ba:	699f      	ldr	r7, [r3, #24]
   b67bc:	462a      	mov	r2, r5
   b67be:	4633      	mov	r3, r6
   b67c0:	4621      	mov	r1, r4
   b67c2:	46bc      	mov	ip, r7
   b67c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b67c8:	4760      	bx	ip
   b67ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b67ce <_ZNSt9type_infoD1Ev>:
   b67ce:	4770      	bx	lr

000b67d0 <_ZNKSt9type_info14__is_pointer_pEv>:
   b67d0:	2000      	movs	r0, #0
   b67d2:	4770      	bx	lr

000b67d4 <_ZNKSt9type_infoeqERKS_>:
   b67d4:	4281      	cmp	r1, r0
   b67d6:	b508      	push	{r3, lr}
   b67d8:	d00e      	beq.n	b67f8 <_ZNKSt9type_infoeqERKS_+0x24>
   b67da:	6840      	ldr	r0, [r0, #4]
   b67dc:	7803      	ldrb	r3, [r0, #0]
   b67de:	2b2a      	cmp	r3, #42	; 0x2a
   b67e0:	d00c      	beq.n	b67fc <_ZNKSt9type_infoeqERKS_+0x28>
   b67e2:	6849      	ldr	r1, [r1, #4]
   b67e4:	780b      	ldrb	r3, [r1, #0]
   b67e6:	2b2a      	cmp	r3, #42	; 0x2a
   b67e8:	bf08      	it	eq
   b67ea:	3101      	addeq	r1, #1
   b67ec:	f000 f852 	bl	b6894 <strcmp>
   b67f0:	fab0 f080 	clz	r0, r0
   b67f4:	0940      	lsrs	r0, r0, #5
   b67f6:	bd08      	pop	{r3, pc}
   b67f8:	2001      	movs	r0, #1
   b67fa:	e7fc      	b.n	b67f6 <_ZNKSt9type_infoeqERKS_+0x22>
   b67fc:	2000      	movs	r0, #0
   b67fe:	e7fa      	b.n	b67f6 <_ZNKSt9type_infoeqERKS_+0x22>

000b6800 <atexit>:
   b6800:	2300      	movs	r3, #0
   b6802:	4601      	mov	r1, r0
   b6804:	461a      	mov	r2, r3
   b6806:	4618      	mov	r0, r3
   b6808:	f000 b85e 	b.w	b68c8 <__register_exitproc>

000b680c <memcpy>:
   b680c:	440a      	add	r2, r1
   b680e:	4291      	cmp	r1, r2
   b6810:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b6814:	d100      	bne.n	b6818 <memcpy+0xc>
   b6816:	4770      	bx	lr
   b6818:	b510      	push	{r4, lr}
   b681a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b681e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6822:	4291      	cmp	r1, r2
   b6824:	d1f9      	bne.n	b681a <memcpy+0xe>
   b6826:	bd10      	pop	{r4, pc}

000b6828 <memset>:
   b6828:	4402      	add	r2, r0
   b682a:	4603      	mov	r3, r0
   b682c:	4293      	cmp	r3, r2
   b682e:	d100      	bne.n	b6832 <memset+0xa>
   b6830:	4770      	bx	lr
   b6832:	f803 1b01 	strb.w	r1, [r3], #1
   b6836:	e7f9      	b.n	b682c <memset+0x4>

000b6838 <srand>:
   b6838:	b538      	push	{r3, r4, r5, lr}
   b683a:	4b10      	ldr	r3, [pc, #64]	; (b687c <srand+0x44>)
   b683c:	681d      	ldr	r5, [r3, #0]
   b683e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6840:	4604      	mov	r4, r0
   b6842:	b9b3      	cbnz	r3, b6872 <srand+0x3a>
   b6844:	2018      	movs	r0, #24
   b6846:	f7fe fc59 	bl	b50fc <malloc>
   b684a:	4602      	mov	r2, r0
   b684c:	63a8      	str	r0, [r5, #56]	; 0x38
   b684e:	b920      	cbnz	r0, b685a <srand+0x22>
   b6850:	4b0b      	ldr	r3, [pc, #44]	; (b6880 <srand+0x48>)
   b6852:	480c      	ldr	r0, [pc, #48]	; (b6884 <srand+0x4c>)
   b6854:	2142      	movs	r1, #66	; 0x42
   b6856:	f7fe fc81 	bl	b515c <__assert_func>
   b685a:	490b      	ldr	r1, [pc, #44]	; (b6888 <srand+0x50>)
   b685c:	4b0b      	ldr	r3, [pc, #44]	; (b688c <srand+0x54>)
   b685e:	e9c0 1300 	strd	r1, r3, [r0]
   b6862:	4b0b      	ldr	r3, [pc, #44]	; (b6890 <srand+0x58>)
   b6864:	6083      	str	r3, [r0, #8]
   b6866:	230b      	movs	r3, #11
   b6868:	8183      	strh	r3, [r0, #12]
   b686a:	2100      	movs	r1, #0
   b686c:	2001      	movs	r0, #1
   b686e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6872:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6874:	2200      	movs	r2, #0
   b6876:	611c      	str	r4, [r3, #16]
   b6878:	615a      	str	r2, [r3, #20]
   b687a:	bd38      	pop	{r3, r4, r5, pc}
   b687c:	2003e4c4 	.word	0x2003e4c4
   b6880:	000b7159 	.word	0x000b7159
   b6884:	000b7170 	.word	0x000b7170
   b6888:	abcd330e 	.word	0xabcd330e
   b688c:	e66d1234 	.word	0xe66d1234
   b6890:	0005deec 	.word	0x0005deec

000b6894 <strcmp>:
   b6894:	f810 2b01 	ldrb.w	r2, [r0], #1
   b6898:	f811 3b01 	ldrb.w	r3, [r1], #1
   b689c:	2a01      	cmp	r2, #1
   b689e:	bf28      	it	cs
   b68a0:	429a      	cmpcs	r2, r3
   b68a2:	d0f7      	beq.n	b6894 <strcmp>
   b68a4:	1ad0      	subs	r0, r2, r3
   b68a6:	4770      	bx	lr

000b68a8 <strcpy>:
   b68a8:	4603      	mov	r3, r0
   b68aa:	f811 2b01 	ldrb.w	r2, [r1], #1
   b68ae:	f803 2b01 	strb.w	r2, [r3], #1
   b68b2:	2a00      	cmp	r2, #0
   b68b4:	d1f9      	bne.n	b68aa <strcpy+0x2>
   b68b6:	4770      	bx	lr

000b68b8 <strlen>:
   b68b8:	4603      	mov	r3, r0
   b68ba:	f813 2b01 	ldrb.w	r2, [r3], #1
   b68be:	2a00      	cmp	r2, #0
   b68c0:	d1fb      	bne.n	b68ba <strlen+0x2>
   b68c2:	1a18      	subs	r0, r3, r0
   b68c4:	3801      	subs	r0, #1
   b68c6:	4770      	bx	lr

000b68c8 <__register_exitproc>:
   b68c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b68cc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6988 <__register_exitproc+0xc0>
   b68d0:	4606      	mov	r6, r0
   b68d2:	f8d8 0000 	ldr.w	r0, [r8]
   b68d6:	461f      	mov	r7, r3
   b68d8:	460d      	mov	r5, r1
   b68da:	4691      	mov	r9, r2
   b68dc:	f000 f856 	bl	b698c <__retarget_lock_acquire_recursive>
   b68e0:	4b25      	ldr	r3, [pc, #148]	; (b6978 <__register_exitproc+0xb0>)
   b68e2:	681c      	ldr	r4, [r3, #0]
   b68e4:	b934      	cbnz	r4, b68f4 <__register_exitproc+0x2c>
   b68e6:	4c25      	ldr	r4, [pc, #148]	; (b697c <__register_exitproc+0xb4>)
   b68e8:	601c      	str	r4, [r3, #0]
   b68ea:	4b25      	ldr	r3, [pc, #148]	; (b6980 <__register_exitproc+0xb8>)
   b68ec:	b113      	cbz	r3, b68f4 <__register_exitproc+0x2c>
   b68ee:	681b      	ldr	r3, [r3, #0]
   b68f0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b68f4:	6863      	ldr	r3, [r4, #4]
   b68f6:	2b1f      	cmp	r3, #31
   b68f8:	dd07      	ble.n	b690a <__register_exitproc+0x42>
   b68fa:	f8d8 0000 	ldr.w	r0, [r8]
   b68fe:	f000 f847 	bl	b6990 <__retarget_lock_release_recursive>
   b6902:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b690a:	b34e      	cbz	r6, b6960 <__register_exitproc+0x98>
   b690c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6910:	b988      	cbnz	r0, b6936 <__register_exitproc+0x6e>
   b6912:	4b1c      	ldr	r3, [pc, #112]	; (b6984 <__register_exitproc+0xbc>)
   b6914:	b923      	cbnz	r3, b6920 <__register_exitproc+0x58>
   b6916:	f8d8 0000 	ldr.w	r0, [r8]
   b691a:	f000 f838 	bl	b698e <__retarget_lock_release>
   b691e:	e7f0      	b.n	b6902 <__register_exitproc+0x3a>
   b6920:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6924:	f7fe fbea 	bl	b50fc <malloc>
   b6928:	2800      	cmp	r0, #0
   b692a:	d0f4      	beq.n	b6916 <__register_exitproc+0x4e>
   b692c:	2300      	movs	r3, #0
   b692e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6932:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6936:	6863      	ldr	r3, [r4, #4]
   b6938:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b693c:	2201      	movs	r2, #1
   b693e:	409a      	lsls	r2, r3
   b6940:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6944:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6948:	4313      	orrs	r3, r2
   b694a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b694e:	2e02      	cmp	r6, #2
   b6950:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6954:	bf02      	ittt	eq
   b6956:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b695a:	4313      	orreq	r3, r2
   b695c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6960:	6863      	ldr	r3, [r4, #4]
   b6962:	f8d8 0000 	ldr.w	r0, [r8]
   b6966:	1c5a      	adds	r2, r3, #1
   b6968:	3302      	adds	r3, #2
   b696a:	6062      	str	r2, [r4, #4]
   b696c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6970:	f000 f80e 	bl	b6990 <__retarget_lock_release_recursive>
   b6974:	2000      	movs	r0, #0
   b6976:	e7c6      	b.n	b6906 <__register_exitproc+0x3e>
   b6978:	2003e7e8 	.word	0x2003e7e8
   b697c:	2003e75c 	.word	0x2003e75c
   b6980:	00000000 	.word	0x00000000
   b6984:	000b50fd 	.word	0x000b50fd
   b6988:	2003e528 	.word	0x2003e528

000b698c <__retarget_lock_acquire_recursive>:
   b698c:	4770      	bx	lr

000b698e <__retarget_lock_release>:
   b698e:	4770      	bx	lr

000b6990 <__retarget_lock_release_recursive>:
   b6990:	4770      	bx	lr

000b6992 <link_code_end>:
	...

000b6994 <dynalib_user>:
   b6994:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b69a4:	0000 0000 7341 6573 7472 6f69 466e 6961     ....AssertionFai
   b69b4:	756c 6572 2a20 5f70 6970 206e 203c 3328     lure *p_pin < (3
   b69c4:	2032 202b 3631 0029 6f4e 4320 6168 676e     2 + 16).No Chang
   b69d4:	2065 202d 6143 636e 6c65 696c 676e 4320     e - Cancelling C
   b69e4:	444d 000a 227b 6e6f 3a22 7274 6575 222c     MD..{"on":true,"
   b69f4:	6173 2274 003a 222c 7262 2269 003a 222c     sat":.,"bri":.,"
   b6a04:	7568 2265 003a 227b 6e6f 3a22 6166 736c     hue":.{"on":fals
   b6a14:	7d65 5300 6e65 6964 676e 4320 6d6f 616d     e}.Sending Comma
   b6a24:	646e 7420 206f 7548 0065 5550 2054 612f     nd to Hue.PUT /a
   b6a34:	6970 002f 6c2f 6769 7468 2f73 2f00 7473     pi/./lights/./st
   b6a44:	7461 2065 5448 5054 312f 312e 4800 736f     ate HTTP/1.1.Hos
   b6a54:	3a74 0020 6f43 746e 6e65 2d74 654c 676e     t: .Content-Leng
   b6a64:	6874 203a 4300 6e6f 6574 746e 542d 7079     th: .Content-Typ
   b6a74:	3a65 7420 7865 2f74 6c70 6961 3b6e 6863     e: text/plain;ch
   b6a84:	7261 6573 3d74 5455 2d46 0038 7246 6d6f     arset=UTF-8.From
   b6a94:	4820 6575 5300 6977 6374 4f68 204e 6925      Hue.SwitchON %i
   b6aa4:	0a20 3c00 783f 6c6d 7620 7265 6973 6e6f      ..<?xml version
   b6ab4:	223d 2e31 2230 6520 636e 646f 6e69 3d67     ="1.0" encoding=
   b6ac4:	7522 6674 382d 3f22 3c3e 3a73 6e45 6576     "utf-8"?><s:Enve
   b6ad4:	6f6c 6570 7820 6c6d 736e 733a 223d 7468     lope xmlns:s="ht
   b6ae4:	7074 2f3a 732f 6863 6d65 7361 782e 6c6d     tp://schemas.xml
   b6af4:	6f73 7061 6f2e 6772 732f 616f 2f70 6e65     soap.org/soap/en
   b6b04:	6576 6f6c 6570 222f 7320 653a 636e 646f     velope/" s:encod
   b6b14:	6e69 5367 7974 656c 223d 7468 7074 2f3a     ingStyle="http:/
   b6b24:	732f 6863 6d65 7361 782e 6c6d 6f73 7061     /schemas.xmlsoap
   b6b34:	6f2e 6772 732f 616f 2f70 6e65 6f63 6964     .org/soap/encodi
   b6b44:	676e 222f 3c3e 3a73 6f42 7964 3c3e 3a75     ng/"><s:Body><u:
   b6b54:	6553 4274 6e69 7261 5379 6174 6574 7820     SetBinaryState x
   b6b64:	6c6d 736e 753a 223d 7275 3a6e 6542 6b6c     mlns:u="urn:Belk
   b6b74:	6e69 733a 7265 6976 6563 623a 7361 6369     in:service:basic
   b6b84:	7665 6e65 3a74 2231 3c3e 6942 616e 7972     event:1"><Binary
   b6b94:	7453 7461 3e65 3c31 422f 6e69 7261 5379     State>1</BinaryS
   b6ba4:	6174 6574 3c3e 752f 533a 7465 6942 616e     tate></u:SetBina
   b6bb4:	7972 7453 7461 3e65 2f3c 3a73 6f42 7964     ryState></s:Body
   b6bc4:	3c3e 732f 453a 766e 6c65 706f 3e65 5000     ></s:Envelope>.P
   b6bd4:	534f 2054 752f 6e70 2f70 6f63 746e 6f72     OST /upnp/contro
   b6be4:	2f6c 6162 6973 6563 6576 746e 2031 5448     l/basicevent1 HT
   b6bf4:	5054 312f 312e 4300 6e6f 6574 746e 542d     TP/1.1.Content-T
   b6c04:	7079 3a65 7420 7865 2f74 6d78 3b6c 6320     ype: text/xml; c
   b6c14:	6168 7372 7465 753d 6674 382d 5300 414f     harset=utf-8.SOA
   b6c24:	4150 5443 4f49 3a4e 2220 7275 3a6e 6542     PACTION: "urn:Be
   b6c34:	6b6c 6e69 733a 7265 6976 6563 623a 7361     lkin:service:bas
   b6c44:	6369 7665 6e65 3a74 2331 6553 4274 6e69     icevent:1#SetBin
   b6c54:	7261 5379 6174 6574 0022 6f43 6e6e 6365     aryState".Connec
   b6c64:	6974 6e6f 203a 656b 7065 612d 696c 6576     tion: keep-alive
   b6c74:	7300 6977 6374 4f68 4646 2520 2069 000a     .switchOFF %i ..
   b6c84:	3f3c 6d78 206c 6576 7372 6f69 3d6e 3122     <?xml version="1
   b6c94:	302e 2022 6e65 6f63 6964 676e 223d 7475     .0" encoding="ut
   b6ca4:	2d66 2238 3e3f 733c 453a 766e 6c65 706f     f-8"?><s:Envelop
   b6cb4:	2065 6d78 6e6c 3a73 3d73 6822 7474 3a70     e xmlns:s="http:
   b6cc4:	2f2f 6373 6568 616d 2e73 6d78 736c 616f     //schemas.xmlsoa
   b6cd4:	2e70 726f 2f67 6f73 7061 652f 766e 6c65     p.org/soap/envel
   b6ce4:	706f 2f65 2022 3a73 6e65 6f63 6964 676e     ope/" s:encoding
   b6cf4:	7453 6c79 3d65 6822 7474 3a70 2f2f 6373     Style="http://sc
   b6d04:	6568 616d 2e73 6d78 736c 616f 2e70 726f     hemas.xmlsoap.or
   b6d14:	2f67 6f73 7061 652f 636e 646f 6e69 2f67     g/soap/encoding/
   b6d24:	3e22 733c 423a 646f 3e79 753c 533a 7465     "><s:Body><u:Set
   b6d34:	6942 616e 7972 7453 7461 2065 6d78 6e6c     BinaryState xmln
   b6d44:	3a73 3d75 7522 6e72 423a 6c65 696b 3a6e     s:u="urn:Belkin:
   b6d54:	6573 7672 6369 3a65 6162 6973 6563 6576     service:basiceve
   b6d64:	746e 313a 3e22 423c 6e69 7261 5379 6174     nt:1"><BinarySta
   b6d74:	6574 303e 2f3c 6942 616e 7972 7453 7461     te>0</BinaryStat
   b6d84:	3e65 2f3c 3a75 6553 4274 6e69 7261 5379     e></u:SetBinaryS
   b6d94:	6174 6574 3c3e 732f 423a 646f 3e79 2f3c     tate></s:Body></
   b6da4:	3a73 6e45 6576 6f6c 6570 003e 6f49 4e54     s:Envelope>.IoTN
   b6db4:	7465 6f77 6b72 2c00 0a00 000a 4853 5455     etwork.,....SHUT
   b6dc4:	4520 2052 4f44 4e57 000a 6573 7474 6e69      ER DOWN..settin
   b6dd4:	2067 6f63 6f6c 2072 666f 6220 6c75 2062     g color of bulb 
   b6de4:	6925 7420 206f 6f63 6f6c 2072 3025 6936     %i to color %06i
   b6df4:	000a 3931 2e32 3631 2e38 2e31 3033 3100     ..192.168.1.30.1
   b6e04:	3239 312e 3836 312e 332e 0031 3931 2e32     92.168.1.31.192.
   b6e14:	3631 2e38 2e31 3233 3100 3239 312e 3836     168.1.32.192.168
   b6e24:	312e 332e 0033 3931 2e32 3631 2e38 2e31     .1.33.192.168.1.
   b6e34:	3433                                         34.

000b6e37 <_ZL11hueUsername>:
   b6e37:	514d 5a6c 697a 4f52 5730 6961 4d35 4d73     MQlZziRO0Wai5MsM
   b6e47:	6c48 386c 4178 4155 7151 3877 5135 7272     Hll8xAUAQqw85Qrr
   b6e57:	7438 334d 4637 5433                          8tM37F3T.

000b6e60 <_ZL8hueHubIP>:
   b6e60:	3931 2e32 3631 2e38 2e31 0035               192.168.1.5.

000b6e6c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b6e74 <_ZTVN5spark13EthernetClassE>:
	...
   b6e7c:	521b 000b 5211 000b 5207 000b 51fd 000b     .R...R...R...Q..
   b6e8c:	51f1 000b 51e5 000b 5501 000b 5509 000b     .Q...Q...U...U..
   b6e9c:	51d9 000b 51d1 000b 51c7 000b 51bd 000b     .Q...Q...Q...Q..
   b6eac:	5539 000b                                   9U..

000b6eb0 <_ZTV7TwoWire>:
	...
   b6eb8:	5239 000b 5283 000b 525b 000b 523b 000b     9R...R..[R..;R..
   b6ec8:	5263 000b 526b 000b 5273 000b 527b 000b     cR..kR..sR..{R..

000b6ed8 <_ZTV9IPAddress>:
	...
   b6ee0:	53a5 000b 5395 000b 5397 000b 7061 0070     .S...S...S..app.

000b6ef0 <_ZTVN5spark12NetworkClassE>:
	...
   b6ef8:	54c1 000b 54cb 000b 54d5 000b 54df 000b     .T...T...T...T..
   b6f08:	54e9 000b 54f5 000b 5501 000b 5509 000b     .T...T...U...U..
   b6f18:	5511 000b 551d 000b 5525 000b 552f 000b     .U...U..%U../U..
   b6f28:	5539 000b 6977 6972 676e 7200 6365 2076     9U..wiring.recv 
   b6f38:	7265 6f72 2072 203d 6425 0000               error = %d..

000b6f44 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b6f4c:	5ae5 000b 5b09 000b 5ff3 000b 5b17 000b     .Z...[..._...[..
   b6f5c:	5ae9 000b                                   .Z..

000b6f60 <_ZTV9TCPClient>:
	...
   b6f68:	4331 000b 4365 000b 5a61 000b 5a7b 000b     1C..eC..aZ..{Z..
   b6f78:	5e89 000b 5aa5 000b 5cff 000b 5ad9 000b     .^...Z...\...Z..
   b6f88:	5d91 000b 5bd1 000b 5d2d 000b 5f3d 000b     .]...[..-]..=_..
   b6f98:	5ccd 000b 5adb 000b 5a8d 000b 5b1d 000b     .\...Z...Z...[..
   b6fa8:	5bb1 000b 5925 252d 2d6d 6425 2554 3a48     .[..%Y-%m-%dT%H:
   b6fb8:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b6fc8 <_ZTV11USARTSerial>:
	...
   b6fd0:	600d 000b 6079 000b 6051 000b 5625 000b     .`..y`..Q`..%V..
   b6fe0:	6021 000b 603d 000b 602f 000b 604b 000b     !`..=`../`..K`..
   b6ff0:	600f 000b 6013 000b                         .`...`..

000b6ff8 <_ZTV9USBSerial>:
	...
   b7000:	60b7 000b 611f 000b 60f5 000b 5625 000b     .`...a...`..%V..
   b7010:	60e7 000b 60b9 000b 60c9 000b 6119 000b     .`...`...`...a..
   b7020:	60d9 000b 60b1 000b                         .`...`..

000b7028 <_ZTVN5spark9WiFiClassE>:
	...
   b7030:	621f 000b 6215 000b 620b 000b 61c1 000b     .b...b...b...a..
   b7040:	61ff 000b 61f3 000b 5501 000b 5509 000b     .a...a...U...U..
   b7050:	61e7 000b 61df 000b 61d5 000b 61cb 000b     .a...a...a...a..
   b7060:	5539 000b                                   9U..

000b7064 <_ZSt7nothrow>:
	...

000b7065 <_ZTSSt19_Sp_make_shared_tag>:
   b7065:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b7075:	6572 5f64 6174 0067 0000                     red_tag....

000b7080 <_ZTISt19_Sp_make_shared_tag>:
   b7080:	70c0 000b 7065 000b                         .p..ep..

000b7088 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b7088:	7120 000b 7094 000b 7144 000b                q...p..Dq..

000b7094 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b7094:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b70a4:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b70b4:	0045 0000                                   E...

000b70b8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b70b8:	0000 0000 7088 000b 6629 000b 663d 000b     .....p..)f..=f..
   b70c8:	67d1 000b 67d1 000b 66a7 000b 65e9 000b     .g...g...f...e..
   b70d8:	668f 000b 6651 000b 661b 000b               .f..Qf...f..

000b70e4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b70e4:	7120 000b 70f0 000b 7088 000b                q...p...p..

000b70f0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b70f0:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b7100:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b7110:	666e 456f 0000 0000                         nfoE....

000b7118 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b7118:	0000 0000 70e4 000b 66d1 000b 66e5 000b     .....p...f...f..
   b7128:	67d1 000b 67d1 000b 66a7 000b 65e9 000b     .g...g...f...e..
   b7138:	67a5 000b 6731 000b 66f9 000b               .g..1g...f..

000b7144 <_ZTISt9type_info>:
   b7144:	70c0 000b 714c 000b                         .p..Lq..

000b714c <_ZTSSt9type_info>:
   b714c:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b715c:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b716c:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   b717c:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   b718c:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   b719c:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   b71ac:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   b71bc:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000b71c9 <link_const_variable_data_end>:
   b71c9:	00          	.byte	0x00
	...

000b71cc <link_constructors_location>:
   b71cc:	000b4b3d 	.word	0x000b4b3d
   b71d0:	000b4c45 	.word	0x000b4c45
   b71d4:	000b51ad 	.word	0x000b51ad
   b71d8:	000b5225 	.word	0x000b5225
   b71dc:	000b54b1 	.word	0x000b54b1
   b71e0:	000b5611 	.word	0x000b5611
   b71e4:	000b574d 	.word	0x000b574d
   b71e8:	000b5a3d 	.word	0x000b5a3d
   b71ec:	000b5ff9 	.word	0x000b5ff9
   b71f0:	000b6229 	.word	0x000b6229

000b71f4 <link_constructors_end>:
	...
