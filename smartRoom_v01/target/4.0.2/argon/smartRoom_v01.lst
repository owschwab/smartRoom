
/Users/owenschwab/Documents/IoT/smartRoom/smartRoom_v01/target/4.0.2/argon/smartRoom_v01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004d94  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b8db0  000b8db0  00008db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b8dd4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000004ac  2003e044  000b8dd8  0001e044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000300  2003e4f0  2003e4f0  0002e4f0  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b9284  000b9284  00029284  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b92ac  000b92ac  000292ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0013c283  00000000  00000000  000292b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00016c30  00000000  00000000  00165533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00040fc0  00000000  00000000  0017c163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003340  00000000  00000000  001bd123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000b080  00000000  00000000  001c0463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000401ff  00000000  00000000  001cb4e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004db2c  00000000  00000000  0020b6e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013ac99  00000000  00000000  0025920e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000091e0  00000000  00000000  00393ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f003 febb 	bl	b7da8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f003 fec3 	bl	b7dc4 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e044 	.word	0x2003e044
   b4048:	000b8dd8 	.word	0x000b8dd8
   b404c:	2003e4f0 	.word	0x2003e4f0
   b4050:	2003e4f0 	.word	0x2003e4f0
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f003 fc37 	bl	b78d0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b8d7c 	.word	0x000b8d7c
   b407c:	000b8da4 	.word	0x000b8da4

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 bc40 	b.w	b4904 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 fce3 	bl	b4a50 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f003 bbd7 	b.w	b7840 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f002 ba35 	b.w	b6500 <malloc>

000b4096 <_Znaj>:
   b4096:	f002 ba33 	b.w	b6500 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f002 ba39 	b.w	b6510 <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f002 f986 	bl	b63b8 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b5fe9 	.word	0x000b5fe9
   b40b4:	000b7f44 	.word	0x000b7f44

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <nrf_gpio_pin_read>:
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b40c8:	282f      	cmp	r0, #47	; 0x2f
    }
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
   b40ca:	b510      	push	{r4, lr}
   b40cc:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b40ce:	d90d      	bls.n	b40ec <nrf_gpio_pin_read+0x24>
   b40d0:	4a09      	ldr	r2, [pc, #36]	; (b40f8 <nrf_gpio_pin_read+0x30>)
   b40d2:	490a      	ldr	r1, [pc, #40]	; (b40fc <nrf_gpio_pin_read+0x34>)
   b40d4:	200a      	movs	r0, #10
   b40d6:	f002 f96f 	bl	b63b8 <panic_>
        return NRF_P1;
   b40da:	4b09      	ldr	r3, [pc, #36]	; (b4100 <nrf_gpio_pin_read+0x38>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b40dc:	f004 041f 	and.w	r4, r4, #31
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   b40e0:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   b40e4:	40e0      	lsrs	r0, r4
}
   b40e6:	f000 0001 	and.w	r0, r0, #1
   b40ea:	bd10      	pop	{r4, pc}
    if (*p_pin < P0_PIN_NUM)
   b40ec:	281f      	cmp	r0, #31
   b40ee:	d8f4      	bhi.n	b40da <nrf_gpio_pin_read+0x12>
        return NRF_P0;
   b40f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   b40f4:	e7f4      	b.n	b40e0 <nrf_gpio_pin_read+0x18>
   b40f6:	bf00      	nop
   b40f8:	000b5fe9 	.word	0x000b5fe9
   b40fc:	000b7f59 	.word	0x000b7f59
   b4100:	50000300 	.word	0x50000300

000b4104 <_ZN7Encoder16interruptHandlerEv>:
		state = (s >> 2);
	}
*/

private:
	void interruptHandler() {
   b4104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#ifdef	__cplusplus
extern "C" {
#endif

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4108:	f8df 812c 	ldr.w	r8, [pc, #300]	; b4238 <_ZN7Encoder16interruptHandlerEv+0x134>
		uint8_t p1val = DIRECT_PIN_READ(pin1_register, pin1_bitmask);
   b410c:	6887      	ldr	r7, [r0, #8]
   b410e:	f898 3000 	ldrb.w	r3, [r8]
   b4112:	4d48      	ldr	r5, [pc, #288]	; (b4234 <_ZN7Encoder16interruptHandlerEv+0x130>)
   b4114:	f3bf 8f5b 	dmb	ish
   b4118:	f013 0f01 	tst.w	r3, #1
	void interruptHandler() {
   b411c:	4604      	mov	r4, r0
   b411e:	d109      	bne.n	b4134 <_ZN7Encoder16interruptHandlerEv+0x30>
   b4120:	4640      	mov	r0, r8
   b4122:	f7ff ffc9 	bl	b40b8 <__cxa_guard_acquire>
   b4126:	b128      	cbz	r0, b4134 <_ZN7Encoder16interruptHandlerEv+0x30>
   b4128:	f001 ff76 	bl	b6018 <HAL_Pin_Map>
   b412c:	6028      	str	r0, [r5, #0]
   b412e:	4640      	mov	r0, r8
   b4130:	f7ff ffc7 	bl	b40c2 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4134:	b2bf      	uxth	r7, r7
   b4136:	682b      	ldr	r3, [r5, #0]
   b4138:	013f      	lsls	r7, r7, #4
   b413a:	5dde      	ldrb	r6, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b413c:	f898 3000 	ldrb.w	r3, [r8]
   b4140:	f3bf 8f5b 	dmb	ish
   b4144:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4146:	ea4f 1946 	mov.w	r9, r6, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b414a:	d409      	bmi.n	b4160 <_ZN7Encoder16interruptHandlerEv+0x5c>
   b414c:	483a      	ldr	r0, [pc, #232]	; (b4238 <_ZN7Encoder16interruptHandlerEv+0x134>)
   b414e:	f7ff ffb3 	bl	b40b8 <__cxa_guard_acquire>
   b4152:	b128      	cbz	r0, b4160 <_ZN7Encoder16interruptHandlerEv+0x5c>
   b4154:	f001 ff60 	bl	b6018 <HAL_Pin_Map>
   b4158:	6028      	str	r0, [r5, #0]
   b415a:	4837      	ldr	r0, [pc, #220]	; (b4238 <_ZN7Encoder16interruptHandlerEv+0x134>)
   b415c:	f7ff ffb1 	bl	b40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4160:	682b      	ldr	r3, [r5, #0]
   b4162:	443b      	add	r3, r7
   b4164:	785e      	ldrb	r6, [r3, #1]
   b4166:	f006 061f 	and.w	r6, r6, #31
   b416a:	ea46 0609 	orr.w	r6, r6, r9
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   b416e:	4630      	mov	r0, r6
   b4170:	f7ff ffaa 	bl	b40c8 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   b4174:	4630      	mov	r0, r6
   b4176:	f7ff ffa7 	bl	b40c8 <nrf_gpio_pin_read>
		uint8_t p2val = DIRECT_PIN_READ(pin2_register, pin2_bitmask);
   b417a:	68e7      	ldr	r7, [r4, #12]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b417c:	f898 3000 	ldrb.w	r3, [r8]
   b4180:	f3bf 8f5b 	dmb	ish
   b4184:	07da      	lsls	r2, r3, #31
		uint8_t p1val = DIRECT_PIN_READ(pin1_register, pin1_bitmask);
   b4186:	b2c6      	uxtb	r6, r0
   b4188:	d409      	bmi.n	b419e <_ZN7Encoder16interruptHandlerEv+0x9a>
   b418a:	482b      	ldr	r0, [pc, #172]	; (b4238 <_ZN7Encoder16interruptHandlerEv+0x134>)
   b418c:	f7ff ff94 	bl	b40b8 <__cxa_guard_acquire>
   b4190:	b128      	cbz	r0, b419e <_ZN7Encoder16interruptHandlerEv+0x9a>
   b4192:	f001 ff41 	bl	b6018 <HAL_Pin_Map>
   b4196:	6028      	str	r0, [r5, #0]
   b4198:	4827      	ldr	r0, [pc, #156]	; (b4238 <_ZN7Encoder16interruptHandlerEv+0x134>)
   b419a:	f7ff ff92 	bl	b40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b419e:	b2bf      	uxth	r7, r7
   b41a0:	682b      	ldr	r3, [r5, #0]
   b41a2:	013f      	lsls	r7, r7, #4
   b41a4:	f813 9007 	ldrb.w	r9, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b41a8:	f898 3000 	ldrb.w	r3, [r8]
   b41ac:	f3bf 8f5b 	dmb	ish
   b41b0:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b41b2:	ea4f 1949 	mov.w	r9, r9, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b41b6:	d409      	bmi.n	b41cc <_ZN7Encoder16interruptHandlerEv+0xc8>
   b41b8:	481f      	ldr	r0, [pc, #124]	; (b4238 <_ZN7Encoder16interruptHandlerEv+0x134>)
   b41ba:	f7ff ff7d 	bl	b40b8 <__cxa_guard_acquire>
   b41be:	b128      	cbz	r0, b41cc <_ZN7Encoder16interruptHandlerEv+0xc8>
   b41c0:	f001 ff2a 	bl	b6018 <HAL_Pin_Map>
   b41c4:	6028      	str	r0, [r5, #0]
   b41c6:	481c      	ldr	r0, [pc, #112]	; (b4238 <_ZN7Encoder16interruptHandlerEv+0x134>)
   b41c8:	f7ff ff7b 	bl	b40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b41cc:	682b      	ldr	r3, [r5, #0]
   b41ce:	441f      	add	r7, r3
   b41d0:	787d      	ldrb	r5, [r7, #1]
   b41d2:	f005 051f 	and.w	r5, r5, #31
   b41d6:	ea45 0509 	orr.w	r5, r5, r9
    (void)nrf_gpio_pin_read(nrf_pin);
   b41da:	4628      	mov	r0, r5
   b41dc:	f7ff ff74 	bl	b40c8 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   b41e0:	4628      	mov	r0, r5
   b41e2:	f7ff ff71 	bl	b40c8 <nrf_gpio_pin_read>
		uint8_t newState = state & 3;
   b41e6:	7c23      	ldrb	r3, [r4, #16]
		uint8_t p2val = DIRECT_PIN_READ(pin2_register, pin2_bitmask);
   b41e8:	b2c0      	uxtb	r0, r0
		uint8_t newState = state & 3;
   b41ea:	f003 0303 	and.w	r3, r3, #3
		if (p1val) newState |= 4;
   b41ee:	b10e      	cbz	r6, b41f4 <_ZN7Encoder16interruptHandlerEv+0xf0>
   b41f0:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) newState |= 8;
   b41f4:	b108      	cbz	r0, b41fa <_ZN7Encoder16interruptHandlerEv+0xf6>
   b41f6:	f043 0308 	orr.w	r3, r3, #8
		state = (newState >> 2);
   b41fa:	089a      	lsrs	r2, r3, #2
   b41fc:	3b01      	subs	r3, #1
   b41fe:	7422      	strb	r2, [r4, #16]
		switch (newState) {
   b4200:	2b0d      	cmp	r3, #13
   b4202:	d80b      	bhi.n	b421c <_ZN7Encoder16interruptHandlerEv+0x118>
   b4204:	e8df f003 	tbb	[pc, r3]
   b4208:	0c0f0c07 	.word	0x0c0f0c07
   b420c:	0707120a 	.word	0x0707120a
   b4210:	0f0c0a12 	.word	0x0f0c0a12
   b4214:	070c      	.short	0x070c
			case 1: case 7: case 8: case 14:
				position++;
   b4216:	6963      	ldr	r3, [r4, #20]
   b4218:	3301      	adds	r3, #1
				return;
			case 3: case 12:
				position += 2;
				return;
			case 6: case 9:
				position -= 2;
   b421a:	6163      	str	r3, [r4, #20]
				return;
		}
	}
   b421c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				position--;
   b4220:	6963      	ldr	r3, [r4, #20]
   b4222:	3b01      	subs	r3, #1
   b4224:	e7f9      	b.n	b421a <_ZN7Encoder16interruptHandlerEv+0x116>
				position += 2;
   b4226:	6963      	ldr	r3, [r4, #20]
   b4228:	3302      	adds	r3, #2
   b422a:	e7f6      	b.n	b421a <_ZN7Encoder16interruptHandlerEv+0x116>
				position -= 2;
   b422c:	6963      	ldr	r3, [r4, #20]
   b422e:	3b02      	subs	r3, #2
   b4230:	e7f3      	b.n	b421a <_ZN7Encoder16interruptHandlerEv+0x116>
   b4232:	bf00      	nop
   b4234:	2003e4f4 	.word	0x2003e4f4
   b4238:	2003e4f0 	.word	0x2003e4f0

000b423c <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b423c:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b423e:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b4240:	4606      	mov	r6, r0
   b4242:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b4244:	da0b      	bge.n	b425e <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b4246:	2a0a      	cmp	r2, #10
   b4248:	d109      	bne.n	b425e <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b424a:	212d      	movs	r1, #45	; 0x2d
   b424c:	f002 fc2c 	bl	b6aa8 <_ZN5Print5printEc>
            val = -n;
   b4250:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4252:	b2ea      	uxtb	r2, r5
   b4254:	4630      	mov	r0, r6
    }
}
   b4256:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b425a:	f002 bc3e 	b.w	b6ada <_ZN5Print11printNumberEmh>
            val = n;
   b425e:	4621      	mov	r1, r4
   b4260:	e7f7      	b.n	b4252 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>

000b4262 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4262:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
   b4264:	6803      	ldr	r3, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   b4266:	685a      	ldr	r2, [r3, #4]
   b4268:	6899      	ldr	r1, [r3, #8]
   b426a:	681b      	ldr	r3, [r3, #0]
   b426c:	1054      	asrs	r4, r2, #1
   b426e:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b4272:	07d2      	lsls	r2, r2, #31
   b4274:	bf48      	it	mi
   b4276:	590a      	ldrmi	r2, [r1, r4]
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b4278:	f85d 4b04 	ldr.w	r4, [sp], #4
   b427c:	bf48      	it	mi
   b427e:	58d3      	ldrmi	r3, [r2, r3]
   b4280:	4718      	bx	r3

000b4282 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	switch (__op)
   b4282:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4284:	b538      	push	{r3, r4, r5, lr}
   b4286:	4604      	mov	r4, r0
	switch (__op)
   b4288:	d102      	bne.n	b4290 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b428a:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b428c:	6023      	str	r3, [r4, #0]
	}
   b428e:	e003      	b.n	b4298 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	  switch (__op)
   b4290:	2a02      	cmp	r2, #2
   b4292:	d003      	beq.n	b429c <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
   b4294:	2a03      	cmp	r2, #3
   b4296:	d00d      	beq.n	b42b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
      }
   b4298:	2000      	movs	r0, #0
   b429a:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b429c:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b429e:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b42a0:	f7ff fef7 	bl	b4092 <_Znwj>
   b42a4:	4603      	mov	r3, r0
   b42a6:	2800      	cmp	r0, #0
   b42a8:	d0f0      	beq.n	b428c <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
   b42aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b42ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b42b2:	e7eb      	b.n	b428c <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b42b4:	6800      	ldr	r0, [r0, #0]
   b42b6:	2800      	cmp	r0, #0
   b42b8:	d0ee      	beq.n	b4298 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
   b42ba:	210c      	movs	r1, #12
   b42bc:	f7ff feed 	bl	b409a <_ZdlPvj>
   b42c0:	e7ea      	b.n	b4298 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	...

000b42c4 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0>:
 * GPIO Interrupts
 */
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
   b42c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b42c6:	b08d      	sub	sp, #52	; 0x34
   b42c8:	ad02      	add	r5, sp, #8
   b42ca:	e885 0006 	stmia.w	r5, {r1, r2}
   b42ce:	4606      	mov	r6, r0

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b42d0:	e895 0003 	ldmia.w	r5, {r0, r1}
   b42d4:	ac05      	add	r4, sp, #20
   b42d6:	e884 0005 	stmia.w	r4, {r0, r2}
   b42da:	461f      	mov	r7, r3
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b42dc:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b42de:	2300      	movs	r3, #0
   b42e0:	930a      	str	r3, [sp, #40]	; 0x28
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b42e2:	f7ff fed6 	bl	b4092 <_Znwj>
   b42e6:	4602      	mov	r2, r0
   b42e8:	b120      	cbz	r0, b42f4 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0+0x30>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b42ea:	e894 0003 	ldmia.w	r4, {r0, r1}
   b42ee:	e882 0003 	stmia.w	r2, {r0, r1}
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b42f2:	6097      	str	r7, [r2, #8]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   b42f4:	4b0b      	ldr	r3, [pc, #44]	; (b4324 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0+0x60>)
   b42f6:	930b      	str	r3, [sp, #44]	; 0x2c
	    _M_manager = &_My_handler::_M_manager;
   b42f8:	4b0b      	ldr	r3, [pc, #44]	; (b4328 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0+0x64>)
   b42fa:	930a      	str	r3, [sp, #40]	; 0x28
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
   b42fc:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4300:	9208      	str	r2, [sp, #32]
   b4302:	9300      	str	r3, [sp, #0]
   b4304:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   b4308:	f99d 304c 	ldrsb.w	r3, [sp, #76]	; 0x4c
   b430c:	a908      	add	r1, sp, #32
   b430e:	4630      	mov	r0, r6
   b4310:	f002 fa20 	bl	b6754 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>
      if (_M_manager)
   b4314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b4316:	b11b      	cbz	r3, b4320 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0+0x5c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4318:	a908      	add	r1, sp, #32
   b431a:	2203      	movs	r2, #3
   b431c:	4608      	mov	r0, r1
   b431e:	4798      	blx	r3
}
   b4320:	b00d      	add	sp, #52	; 0x34
   b4322:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4324:	000b4263 	.word	0x000b4263
   b4328:	000b4283 	.word	0x000b4283

000b432c <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b432c:	b40e      	push	{r1, r2, r3}
   b432e:	b503      	push	{r0, r1, lr}
   b4330:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b4332:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4334:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4338:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b433a:	f002 fbec 	bl	b6b16 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b433e:	b002      	add	sp, #8
   b4340:	f85d eb04 	ldr.w	lr, [sp], #4
   b4344:	b003      	add	sp, #12
   b4346:	4770      	bx	lr

000b4348 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b4348:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b434a:	6984      	ldr	r4, [r0, #24]
   b434c:	4b0a      	ldr	r3, [pc, #40]	; (b4378 <_ZN9TCPClientD1Ev+0x30>)
   b434e:	6003      	str	r3, [r0, #0]
   b4350:	4605      	mov	r5, r0
   b4352:	b17c      	cbz	r4, b4374 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b4354:	6863      	ldr	r3, [r4, #4]
   b4356:	3b01      	subs	r3, #1
   b4358:	6063      	str	r3, [r4, #4]
   b435a:	b95b      	cbnz	r3, b4374 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b435c:	6823      	ldr	r3, [r4, #0]
   b435e:	4620      	mov	r0, r4
   b4360:	689b      	ldr	r3, [r3, #8]
   b4362:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4364:	68a3      	ldr	r3, [r4, #8]
   b4366:	3b01      	subs	r3, #1
   b4368:	60a3      	str	r3, [r4, #8]
   b436a:	b91b      	cbnz	r3, b4374 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b436c:	6823      	ldr	r3, [r4, #0]
   b436e:	4620      	mov	r0, r4
   b4370:	68db      	ldr	r3, [r3, #12]
   b4372:	4798      	blx	r3
   b4374:	4628      	mov	r0, r5
   b4376:	bd38      	pop	{r3, r4, r5, pc}
   b4378:	000b8b18 	.word	0x000b8b18

000b437c <_ZN9TCPClientD0Ev>:
   b437c:	b510      	push	{r4, lr}
   b437e:	4604      	mov	r4, r0
   b4380:	f7ff ffe2 	bl	b4348 <_ZN9TCPClientD1Ev>
   b4384:	4620      	mov	r0, r4
   b4386:	211c      	movs	r1, #28
   b4388:	f7ff fe87 	bl	b409a <_ZdlPvj>
   b438c:	4620      	mov	r0, r4
   b438e:	bd10      	pop	{r4, pc}

000b4390 <_ZN7EncoderC1Ett>:
	Encoder(pin_t pin1, pin_t pin2) {
   b4390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4394:	460f      	mov	r7, r1
   b4396:	4604      	mov	r4, r0
   b4398:	4616      	mov	r6, r2
   b439a:	b089      	sub	sp, #36	; 0x24
		pinMode(pin1, INPUT_PULLUP);
   b439c:	2102      	movs	r1, #2
   b439e:	4638      	mov	r0, r7
   b43a0:	f003 fb06 	bl	b79b0 <pinMode>
		pinMode(pin2, INPUT_PULLUP);
   b43a4:	2102      	movs	r1, #2
   b43a6:	4630      	mov	r0, r6
   b43a8:	f003 fb02 	bl	b79b0 <pinMode>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b43ac:	f8df b158 	ldr.w	fp, [pc, #344]	; b4508 <_ZN7EncoderC1Ett+0x178>
		pin2_bitmask = PIN_TO_BITMASK(pin2);
   b43b0:	60e6      	str	r6, [r4, #12]
		pin1_register = PIN_TO_BASEREG(pin1);
   b43b2:	2300      	movs	r3, #0
		pin2_register = PIN_TO_BASEREG(pin2);
   b43b4:	e9c4 3701 	strd	r3, r7, [r4, #4]
		pin1_register = PIN_TO_BASEREG(pin1);
   b43b8:	6023      	str	r3, [r4, #0]
		position = 0;
   b43ba:	6163      	str	r3, [r4, #20]
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b43bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b43c0:	f001 fe12 	bl	b5fe8 <HAL_Delay_Microseconds>
		if (DIRECT_PIN_READ(pin1_register, pin1_bitmask)) s |= 1;
   b43c4:	f8d4 a008 	ldr.w	sl, [r4, #8]
   b43c8:	f89b 3000 	ldrb.w	r3, [fp]
   b43cc:	4d4d      	ldr	r5, [pc, #308]	; (b4504 <_ZN7EncoderC1Ett+0x174>)
   b43ce:	f3bf 8f5b 	dmb	ish
   b43d2:	f013 0f01 	tst.w	r3, #1
   b43d6:	d109      	bne.n	b43ec <_ZN7EncoderC1Ett+0x5c>
   b43d8:	4658      	mov	r0, fp
   b43da:	f7ff fe6d 	bl	b40b8 <__cxa_guard_acquire>
   b43de:	b128      	cbz	r0, b43ec <_ZN7EncoderC1Ett+0x5c>
   b43e0:	f001 fe1a 	bl	b6018 <HAL_Pin_Map>
   b43e4:	6028      	str	r0, [r5, #0]
   b43e6:	4658      	mov	r0, fp
   b43e8:	f7ff fe6b 	bl	b40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b43ec:	fa1f fa8a 	uxth.w	sl, sl
   b43f0:	682b      	ldr	r3, [r5, #0]
   b43f2:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
   b43f6:	f813 800a 	ldrb.w	r8, [r3, sl]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b43fa:	f89b 3000 	ldrb.w	r3, [fp]
   b43fe:	f3bf 8f5b 	dmb	ish
   b4402:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4404:	ea4f 1948 	mov.w	r9, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4408:	d409      	bmi.n	b441e <_ZN7EncoderC1Ett+0x8e>
   b440a:	483f      	ldr	r0, [pc, #252]	; (b4508 <_ZN7EncoderC1Ett+0x178>)
   b440c:	f7ff fe54 	bl	b40b8 <__cxa_guard_acquire>
   b4410:	b128      	cbz	r0, b441e <_ZN7EncoderC1Ett+0x8e>
   b4412:	f001 fe01 	bl	b6018 <HAL_Pin_Map>
   b4416:	6028      	str	r0, [r5, #0]
   b4418:	483b      	ldr	r0, [pc, #236]	; (b4508 <_ZN7EncoderC1Ett+0x178>)
   b441a:	f7ff fe52 	bl	b40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b441e:	682b      	ldr	r3, [r5, #0]
   b4420:	4453      	add	r3, sl
   b4422:	f893 8001 	ldrb.w	r8, [r3, #1]
   b4426:	f008 081f 	and.w	r8, r8, #31
   b442a:	ea48 0809 	orr.w	r8, r8, r9
    (void)nrf_gpio_pin_read(nrf_pin);
   b442e:	4640      	mov	r0, r8
   b4430:	f7ff fe4a 	bl	b40c8 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   b4434:	4640      	mov	r0, r8
   b4436:	f7ff fe47 	bl	b40c8 <nrf_gpio_pin_read>
		if (DIRECT_PIN_READ(pin2_register, pin2_bitmask)) s |= 2;
   b443a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b443e:	f89b 3000 	ldrb.w	r3, [fp]
   b4442:	f3bf 8f5b 	dmb	ish
		uint8_t s = 0;
   b4446:	f1b0 0800 	subs.w	r8, r0, #0
   b444a:	bf18      	it	ne
   b444c:	f04f 0801 	movne.w	r8, #1
   b4450:	07da      	lsls	r2, r3, #31
   b4452:	d409      	bmi.n	b4468 <_ZN7EncoderC1Ett+0xd8>
   b4454:	482c      	ldr	r0, [pc, #176]	; (b4508 <_ZN7EncoderC1Ett+0x178>)
   b4456:	f7ff fe2f 	bl	b40b8 <__cxa_guard_acquire>
   b445a:	b128      	cbz	r0, b4468 <_ZN7EncoderC1Ett+0xd8>
   b445c:	f001 fddc 	bl	b6018 <HAL_Pin_Map>
   b4460:	6028      	str	r0, [r5, #0]
   b4462:	4829      	ldr	r0, [pc, #164]	; (b4508 <_ZN7EncoderC1Ett+0x178>)
   b4464:	f7ff fe2d 	bl	b40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4468:	fa1f fa8a 	uxth.w	sl, sl
   b446c:	682b      	ldr	r3, [r5, #0]
   b446e:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
   b4472:	f813 900a 	ldrb.w	r9, [r3, sl]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4476:	f89b 3000 	ldrb.w	r3, [fp]
   b447a:	f3bf 8f5b 	dmb	ish
   b447e:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4480:	ea4f 1949 	mov.w	r9, r9, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4484:	d409      	bmi.n	b449a <_ZN7EncoderC1Ett+0x10a>
   b4486:	4820      	ldr	r0, [pc, #128]	; (b4508 <_ZN7EncoderC1Ett+0x178>)
   b4488:	f7ff fe16 	bl	b40b8 <__cxa_guard_acquire>
   b448c:	b128      	cbz	r0, b449a <_ZN7EncoderC1Ett+0x10a>
   b448e:	f001 fdc3 	bl	b6018 <HAL_Pin_Map>
   b4492:	6028      	str	r0, [r5, #0]
   b4494:	481c      	ldr	r0, [pc, #112]	; (b4508 <_ZN7EncoderC1Ett+0x178>)
   b4496:	f7ff fe14 	bl	b40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b449a:	682b      	ldr	r3, [r5, #0]
   b449c:	449a      	add	sl, r3
   b449e:	f89a 5001 	ldrb.w	r5, [sl, #1]
   b44a2:	f005 051f 	and.w	r5, r5, #31
   b44a6:	ea45 0509 	orr.w	r5, r5, r9
    (void)nrf_gpio_pin_read(nrf_pin);
   b44aa:	4628      	mov	r0, r5
   b44ac:	f7ff fe0c 	bl	b40c8 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   b44b0:	4628      	mov	r0, r5
   b44b2:	f7ff fe09 	bl	b40c8 <nrf_gpio_pin_read>
		if (DIRECT_PIN_READ(pin2_register, pin2_bitmask)) s |= 2;
   b44b6:	b108      	cbz	r0, b44bc <_ZN7EncoderC1Ett+0x12c>
   b44b8:	f048 0802 	orr.w	r8, r8, #2
		attachInterrupt(pin1, &Encoder::interruptHandler, this, CHANGE);
   b44bc:	f8df 904c 	ldr.w	r9, [pc, #76]	; b450c <_ZN7EncoderC1Ett+0x17c>
		state = s;
   b44c0:	f884 8010 	strb.w	r8, [r4, #16]
		attachInterrupt(pin1, &Encoder::interruptHandler, this, CHANGE);
   b44c4:	2500      	movs	r5, #0
   b44c6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   b44ca:	4623      	mov	r3, r4
   b44cc:	462a      	mov	r2, r5
   b44ce:	4649      	mov	r1, r9
   b44d0:	4638      	mov	r0, r7
   b44d2:	e9cd 5800 	strd	r5, r8, [sp]
   b44d6:	9502      	str	r5, [sp, #8]
   b44d8:	f8cd 9010 	str.w	r9, [sp, #16]
   b44dc:	9505      	str	r5, [sp, #20]
   b44de:	f7ff fef1 	bl	b42c4 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0>
		attachInterrupt(pin2, &Encoder::interruptHandler, this, CHANGE);
   b44e2:	e9cd 9506 	strd	r9, r5, [sp, #24]
   b44e6:	e9cd 8501 	strd	r8, r5, [sp, #4]
   b44ea:	9500      	str	r5, [sp, #0]
   b44ec:	aa08      	add	r2, sp, #32
   b44ee:	4630      	mov	r0, r6
   b44f0:	e912 0006 	ldmdb	r2, {r1, r2}
   b44f4:	4623      	mov	r3, r4
   b44f6:	f7ff fee5 	bl	b42c4 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0>
	}
   b44fa:	4620      	mov	r0, r4
   b44fc:	b009      	add	sp, #36	; 0x24
   b44fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4502:	bf00      	nop
   b4504:	2003e4f4 	.word	0x2003e4f4
   b4508:	2003e4f0 	.word	0x2003e4f0
   b450c:	000b4105 	.word	0x000b4105

000b4510 <_Z6setHueibiii>:
TCPClient HueClient;

bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat);
bool getHue(int lightNum);

bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
   b4510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4514:	b08c      	sub	sp, #48	; 0x30
   b4516:	4605      	mov	r5, r0
   b4518:	460f      	mov	r7, r1

  static int PrevLightNum,PrevOn, PrevColor, PrevBright, PrevSat;

  String command = "";  
   b451a:	4668      	mov	r0, sp
   b451c:	4977      	ldr	r1, [pc, #476]	; (b46fc <_Z6setHueibiii+0x1ec>)
bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
   b451e:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   b4522:	4614      	mov	r4, r2
   b4524:	461e      	mov	r6, r3
  String command = "";  
   b4526:	f002 fc62 	bl	b6dee <_ZN6StringC1EPK19__FlashStringHelper>

  if((lightNum==PrevLightNum)&&(HueOn==PrevOn)&&(HueColor==PrevColor)&&(HueBright==PrevBright)&&(HueSat==PrevSat)) {
   b452a:	f8df e228 	ldr.w	lr, [pc, #552]	; b4754 <_Z6setHueibiii+0x244>
   b452e:	4974      	ldr	r1, [pc, #464]	; (b4700 <_Z6setHueibiii+0x1f0>)
   b4530:	f8de 3000 	ldr.w	r3, [lr]
   b4534:	4873      	ldr	r0, [pc, #460]	; (b4704 <_Z6setHueibiii+0x1f4>)
   b4536:	4a74      	ldr	r2, [pc, #464]	; (b4708 <_Z6setHueibiii+0x1f8>)
   b4538:	f8df c21c 	ldr.w	ip, [pc, #540]	; b4758 <_Z6setHueibiii+0x248>
   b453c:	42ab      	cmp	r3, r5
   b453e:	d119      	bne.n	b4574 <_Z6setHueibiii+0x64>
   b4540:	680b      	ldr	r3, [r1, #0]
   b4542:	42bb      	cmp	r3, r7
   b4544:	d116      	bne.n	b4574 <_Z6setHueibiii+0x64>
   b4546:	6803      	ldr	r3, [r0, #0]
   b4548:	42a3      	cmp	r3, r4
   b454a:	d113      	bne.n	b4574 <_Z6setHueibiii+0x64>
   b454c:	6813      	ldr	r3, [r2, #0]
   b454e:	42b3      	cmp	r3, r6
   b4550:	d110      	bne.n	b4574 <_Z6setHueibiii+0x64>
   b4552:	f8dc 3000 	ldr.w	r3, [ip]
   b4556:	4543      	cmp	r3, r8
   b4558:	d10c      	bne.n	b4574 <_Z6setHueibiii+0x64>
    Serial.printf("No Change - Cancelling CMD\n");
   b455a:	f003 f89f 	bl	b769c <_Z16_fetch_usbserialv>
   b455e:	496b      	ldr	r1, [pc, #428]	; (b470c <_Z6setHueibiii+0x1fc>)
   b4560:	f7ff fee4 	bl	b432c <_ZN5Print6printfEPKcz>
    return false;
   b4564:	2400      	movs	r4, #0
  String command = "";  
   b4566:	4668      	mov	r0, sp
   b4568:	f002 fbf6 	bl	b6d58 <_ZN6StringD1Ev>
    HueClient.stop();
    return true;  // command executed
  }
  else
    return false;  // command failed
}
   b456c:	4620      	mov	r0, r4
   b456e:	b00c      	add	sp, #48	; 0x30
   b4570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  PrevLightNum = lightNum;
   b4574:	f8ce 5000 	str.w	r5, [lr]
  PrevOn = HueOn;
   b4578:	600f      	str	r7, [r1, #0]
  PrevColor=HueColor;
   b457a:	6004      	str	r4, [r0, #0]
  PrevBright=HueBright;
   b457c:	6016      	str	r6, [r2, #0]
  PrevSat=HueSat;
   b457e:	f8cc 8000 	str.w	r8, [ip]
  if(HueOn == true) {
   b4582:	2f00      	cmp	r7, #0
   b4584:	f000 80b5 	beq.w	b46f2 <_Z6setHueibiii+0x1e2>
    command = "{\"on\":true,\"sat\":";
   b4588:	4961      	ldr	r1, [pc, #388]	; (b4710 <_Z6setHueibiii+0x200>)
   b458a:	4668      	mov	r0, sp
   b458c:	f002 fc5d 	bl	b6e4a <_ZN6StringaSEPKc>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b4590:	4669      	mov	r1, sp
   b4592:	a808      	add	r0, sp, #32
   b4594:	f002 fc4e 	bl	b6e34 <_ZN6StringC1ERKS_>
    command = command + String(HueSat) + ",\"bri\":";
   b4598:	220a      	movs	r2, #10
   b459a:	4641      	mov	r1, r8
   b459c:	a804      	add	r0, sp, #16
   b459e:	f002 fc66 	bl	b6e6e <_ZN6StringC1Eih>
   b45a2:	a904      	add	r1, sp, #16
   b45a4:	a808      	add	r0, sp, #32
   b45a6:	f002 fcaa 	bl	b6efe <_ZplRK15StringSumHelperRK6String>
   b45aa:	495a      	ldr	r1, [pc, #360]	; (b4714 <_Z6setHueibiii+0x204>)
   b45ac:	f002 fcb3 	bl	b6f16 <_ZplRK15StringSumHelperPKc>
   b45b0:	4601      	mov	r1, r0
   b45b2:	4668      	mov	r0, sp
   b45b4:	f002 fc2f 	bl	b6e16 <_ZN6StringaSERKS_>
   b45b8:	a804      	add	r0, sp, #16
   b45ba:	f002 fbcd 	bl	b6d58 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b45be:	a808      	add	r0, sp, #32
   b45c0:	f002 fbca 	bl	b6d58 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b45c4:	4669      	mov	r1, sp
   b45c6:	a808      	add	r0, sp, #32
   b45c8:	f002 fc34 	bl	b6e34 <_ZN6StringC1ERKS_>
    command = command + String(HueBright) + ",\"hue\":";
   b45cc:	220a      	movs	r2, #10
   b45ce:	4631      	mov	r1, r6
   b45d0:	a804      	add	r0, sp, #16
   b45d2:	f002 fc4c 	bl	b6e6e <_ZN6StringC1Eih>
   b45d6:	a904      	add	r1, sp, #16
   b45d8:	a808      	add	r0, sp, #32
   b45da:	f002 fc90 	bl	b6efe <_ZplRK15StringSumHelperRK6String>
   b45de:	494e      	ldr	r1, [pc, #312]	; (b4718 <_Z6setHueibiii+0x208>)
   b45e0:	f002 fc99 	bl	b6f16 <_ZplRK15StringSumHelperPKc>
   b45e4:	4601      	mov	r1, r0
   b45e6:	4668      	mov	r0, sp
   b45e8:	f002 fc15 	bl	b6e16 <_ZN6StringaSERKS_>
   b45ec:	a804      	add	r0, sp, #16
   b45ee:	f002 fbb3 	bl	b6d58 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b45f2:	a808      	add	r0, sp, #32
   b45f4:	f002 fbb0 	bl	b6d58 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b45f8:	4669      	mov	r1, sp
   b45fa:	a808      	add	r0, sp, #32
   b45fc:	f002 fc1a 	bl	b6e34 <_ZN6StringC1ERKS_>
    command = command + String(HueColor) + "}";
   b4600:	220a      	movs	r2, #10
   b4602:	4621      	mov	r1, r4
   b4604:	a804      	add	r0, sp, #16
   b4606:	f002 fc32 	bl	b6e6e <_ZN6StringC1Eih>
   b460a:	a904      	add	r1, sp, #16
   b460c:	a808      	add	r0, sp, #32
   b460e:	f002 fc76 	bl	b6efe <_ZplRK15StringSumHelperRK6String>
   b4612:	4942      	ldr	r1, [pc, #264]	; (b471c <_Z6setHueibiii+0x20c>)
   b4614:	f002 fc7f 	bl	b6f16 <_ZplRK15StringSumHelperPKc>
   b4618:	4601      	mov	r1, r0
   b461a:	4668      	mov	r0, sp
   b461c:	f002 fbfb 	bl	b6e16 <_ZN6StringaSERKS_>
   b4620:	a804      	add	r0, sp, #16
   b4622:	f002 fb99 	bl	b6d58 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4626:	a808      	add	r0, sp, #32
   b4628:	f002 fb96 	bl	b6d58 <_ZN6StringD1Ev>
  if (HueClient.connect(hueHubIP, hueHubPort)) {
   b462c:	493c      	ldr	r1, [pc, #240]	; (b4720 <_Z6setHueibiii+0x210>)
   b462e:	483d      	ldr	r0, [pc, #244]	; (b4724 <_Z6setHueibiii+0x214>)
   b4630:	2300      	movs	r3, #0
   b4632:	2250      	movs	r2, #80	; 0x50
   b4634:	f002 fd4e 	bl	b70d4 <_ZN9TCPClient7connectEPKctm>
   b4638:	4604      	mov	r4, r0
   b463a:	2800      	cmp	r0, #0
   b463c:	d093      	beq.n	b4566 <_Z6setHueibiii+0x56>
      Serial.println("Sending Command to Hue");
   b463e:	f003 f82d 	bl	b769c <_Z16_fetch_usbserialv>
   b4642:	4939      	ldr	r1, [pc, #228]	; (b4728 <_Z6setHueibiii+0x218>)
   b4644:	f002 fa3f 	bl	b6ac6 <_ZN5Print7printlnEPKc>
      Serial.println(command);
   b4648:	f003 f828 	bl	b769c <_Z16_fetch_usbserialv>
   b464c:	9900      	ldr	r1, [sp, #0]
   b464e:	f002 fa3a 	bl	b6ac6 <_ZN5Print7printlnEPKc>
      HueClient.print("PUT /api/");
   b4652:	4936      	ldr	r1, [pc, #216]	; (b472c <_Z6setHueibiii+0x21c>)
   b4654:	4833      	ldr	r0, [pc, #204]	; (b4724 <_Z6setHueibiii+0x214>)
   b4656:	f002 fa23 	bl	b6aa0 <_ZN5Print5printEPKc>
      HueClient.print(hueUsername);
   b465a:	4935      	ldr	r1, [pc, #212]	; (b4730 <_Z6setHueibiii+0x220>)
   b465c:	4831      	ldr	r0, [pc, #196]	; (b4724 <_Z6setHueibiii+0x214>)
   b465e:	f002 fa1f 	bl	b6aa0 <_ZN5Print5printEPKc>
      HueClient.print("/lights/");
   b4662:	4934      	ldr	r1, [pc, #208]	; (b4734 <_Z6setHueibiii+0x224>)
   b4664:	482f      	ldr	r0, [pc, #188]	; (b4724 <_Z6setHueibiii+0x214>)
   b4666:	f002 fa1b 	bl	b6aa0 <_ZN5Print5printEPKc>
size_t Print::print(T n, int base)
   b466a:	220a      	movs	r2, #10
   b466c:	482d      	ldr	r0, [pc, #180]	; (b4724 <_Z6setHueibiii+0x214>)
   b466e:	4629      	mov	r1, r5
   b4670:	f7ff fde4 	bl	b423c <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
      HueClient.println("/state HTTP/1.1");
   b4674:	4930      	ldr	r1, [pc, #192]	; (b4738 <_Z6setHueibiii+0x228>)
   b4676:	482b      	ldr	r0, [pc, #172]	; (b4724 <_Z6setHueibiii+0x214>)
   b4678:	f002 fa25 	bl	b6ac6 <_ZN5Print7printlnEPKc>
      HueClient.println("keep-alive");
   b467c:	492f      	ldr	r1, [pc, #188]	; (b473c <_Z6setHueibiii+0x22c>)
   b467e:	4829      	ldr	r0, [pc, #164]	; (b4724 <_Z6setHueibiii+0x214>)
   b4680:	f002 fa21 	bl	b6ac6 <_ZN5Print7printlnEPKc>
      HueClient.print("Host: ");
   b4684:	492e      	ldr	r1, [pc, #184]	; (b4740 <_Z6setHueibiii+0x230>)
   b4686:	4827      	ldr	r0, [pc, #156]	; (b4724 <_Z6setHueibiii+0x214>)
   b4688:	f002 fa0a 	bl	b6aa0 <_ZN5Print5printEPKc>
      HueClient.println(hueHubIP);
   b468c:	4924      	ldr	r1, [pc, #144]	; (b4720 <_Z6setHueibiii+0x210>)
   b468e:	4825      	ldr	r0, [pc, #148]	; (b4724 <_Z6setHueibiii+0x214>)
   b4690:	f002 fa19 	bl	b6ac6 <_ZN5Print7printlnEPKc>
      HueClient.print("Content-Length: ");
   b4694:	492b      	ldr	r1, [pc, #172]	; (b4744 <_Z6setHueibiii+0x234>)
   b4696:	4823      	ldr	r0, [pc, #140]	; (b4724 <_Z6setHueibiii+0x214>)
   b4698:	f002 fa02 	bl	b6aa0 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b469c:	220a      	movs	r2, #10
   b469e:	9902      	ldr	r1, [sp, #8]
   b46a0:	4820      	ldr	r0, [pc, #128]	; (b4724 <_Z6setHueibiii+0x214>)
   b46a2:	f002 fa1a 	bl	b6ada <_ZN5Print11printNumberEmh>
        n += println();
   b46a6:	481f      	ldr	r0, [pc, #124]	; (b4724 <_Z6setHueibiii+0x214>)
   b46a8:	f002 fa01 	bl	b6aae <_ZN5Print7printlnEv>
      HueClient.println("Content-Type: text/plain;charset=UTF-8");
   b46ac:	4926      	ldr	r1, [pc, #152]	; (b4748 <_Z6setHueibiii+0x238>)
   b46ae:	481d      	ldr	r0, [pc, #116]	; (b4724 <_Z6setHueibiii+0x214>)
   b46b0:	f002 fa09 	bl	b6ac6 <_ZN5Print7printlnEPKc>
      HueClient.println();  // blank line before body
   b46b4:	481b      	ldr	r0, [pc, #108]	; (b4724 <_Z6setHueibiii+0x214>)
   b46b6:	f002 f9fa 	bl	b6aae <_ZN5Print7printlnEv>
      HueClient.println(command);  // Hue command
   b46ba:	9900      	ldr	r1, [sp, #0]
   b46bc:	4819      	ldr	r0, [pc, #100]	; (b4724 <_Z6setHueibiii+0x214>)
   b46be:	f002 fa02 	bl	b6ac6 <_ZN5Print7printlnEPKc>
      Serial.println("From Hue");
   b46c2:	f002 ffeb 	bl	b769c <_Z16_fetch_usbserialv>
   b46c6:	4921      	ldr	r1, [pc, #132]	; (b474c <_Z6setHueibiii+0x23c>)
   b46c8:	f002 f9fd 	bl	b6ac6 <_ZN5Print7printlnEPKc>
      Serial.println(HueClient.readString()); // To close connection
   b46cc:	f002 ffe6 	bl	b769c <_Z16_fetch_usbserialv>
   b46d0:	4914      	ldr	r1, [pc, #80]	; (b4724 <_Z6setHueibiii+0x214>)
   b46d2:	4604      	mov	r4, r0
   b46d4:	a808      	add	r0, sp, #32
   b46d6:	f002 fb2b 	bl	b6d30 <_ZN6Stream10readStringEv>
   b46da:	9908      	ldr	r1, [sp, #32]
   b46dc:	4620      	mov	r0, r4
   b46de:	f002 f9f2 	bl	b6ac6 <_ZN5Print7printlnEPKc>
   b46e2:	a808      	add	r0, sp, #32
   b46e4:	f002 fb38 	bl	b6d58 <_ZN6StringD1Ev>
    HueClient.stop();
   b46e8:	480e      	ldr	r0, [pc, #56]	; (b4724 <_Z6setHueibiii+0x214>)
   b46ea:	f002 fea9 	bl	b7440 <_ZN9TCPClient4stopEv>
    return true;  // command executed
   b46ee:	2401      	movs	r4, #1
   b46f0:	e739      	b.n	b4566 <_Z6setHueibiii+0x56>
    command = "{\"on\":false}";
   b46f2:	4917      	ldr	r1, [pc, #92]	; (b4750 <_Z6setHueibiii+0x240>)
   b46f4:	4668      	mov	r0, sp
   b46f6:	f002 fba8 	bl	b6e4a <_ZN6StringaSEPKc>
   b46fa:	e797      	b.n	b462c <_Z6setHueibiii+0x11c>
   b46fc:	000b838f 	.word	0x000b838f
   b4700:	2003e564 	.word	0x2003e564
   b4704:	2003e56c 	.word	0x2003e56c
   b4708:	2003e55c 	.word	0x2003e55c
   b470c:	000b7f7d 	.word	0x000b7f7d
   b4710:	000b7f99 	.word	0x000b7f99
   b4714:	000b7fab 	.word	0x000b7fab
   b4718:	000b7fb3 	.word	0x000b7fb3
   b471c:	000b7fc6 	.word	0x000b7fc6
   b4720:	000b8486 	.word	0x000b8486
   b4724:	2003e4f8 	.word	0x2003e4f8
   b4728:	000b7fc8 	.word	0x000b7fc8
   b472c:	000b7fdf 	.word	0x000b7fdf
   b4730:	000b845d 	.word	0x000b845d
   b4734:	000b7fe9 	.word	0x000b7fe9
   b4738:	000b7ff2 	.word	0x000b7ff2
   b473c:	000b821b 	.word	0x000b821b
   b4740:	000b8002 	.word	0x000b8002
   b4744:	000b8009 	.word	0x000b8009
   b4748:	000b801a 	.word	0x000b801a
   b474c:	000b8041 	.word	0x000b8041
   b4750:	000b7fbb 	.word	0x000b7fbb
   b4754:	2003e560 	.word	0x2003e560
   b4758:	2003e568 	.word	0x2003e568

000b475c <_Z8switchONi>:
TCPClient WemoClient;

int wemoPort = 49153;
const char *wemoIP[5] = {"192.168.1.30","192.168.1.31","192.168.1.32","192.168.1.33","192.168.1.34"};

void switchON(int wemo) {
   b475c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  
  String data1;
   b475e:	4925      	ldr	r1, [pc, #148]	; (b47f4 <_Z8switchONi+0x98>)
void switchON(int wemo) {
   b4760:	4604      	mov	r4, r0
  String data1;
   b4762:	4668      	mov	r0, sp
   b4764:	f002 fb43 	bl	b6dee <_ZN6StringC1EPK19__FlashStringHelper>
  
  Serial.printf("SwitchON %i \n",wemo);
   b4768:	f002 ff98 	bl	b769c <_Z16_fetch_usbserialv>
   b476c:	4622      	mov	r2, r4
   b476e:	4922      	ldr	r1, [pc, #136]	; (b47f8 <_Z8switchONi+0x9c>)
   b4770:	f7ff fddc 	bl	b432c <_ZN5Print6printfEPKcz>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b4774:	4921      	ldr	r1, [pc, #132]	; (b47fc <_Z8switchONi+0xa0>)
   b4776:	4668      	mov	r0, sp
   b4778:	f002 fba3 	bl	b6ec2 <_ZN6String6concatEPKc>
  data1+="<?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"><s:Body><u:SetBinaryState xmlns:u=\"urn:Belkin:service:basicevent:1\"><BinaryState>1</BinaryState></u:SetBinaryState></s:Body></s:Envelope>"; // Use HTML encoding for comma's
  if (WemoClient.connect(wemoIP[wemo],wemoPort)) {
   b477c:	4a20      	ldr	r2, [pc, #128]	; (b4800 <_Z8switchONi+0xa4>)
   b477e:	4921      	ldr	r1, [pc, #132]	; (b4804 <_Z8switchONi+0xa8>)
   b4780:	8812      	ldrh	r2, [r2, #0]
   b4782:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
   b4786:	4820      	ldr	r0, [pc, #128]	; (b4808 <_Z8switchONi+0xac>)
   b4788:	2300      	movs	r3, #0
   b478a:	f002 fca3 	bl	b70d4 <_ZN9TCPClient7connectEPKctm>
   b478e:	b328      	cbz	r0, b47dc <_Z8switchONi+0x80>
        WemoClient.println("POST /upnp/control/basicevent1 HTTP/1.1");
   b4790:	491e      	ldr	r1, [pc, #120]	; (b480c <_Z8switchONi+0xb0>)
   b4792:	481d      	ldr	r0, [pc, #116]	; (b4808 <_Z8switchONi+0xac>)
   b4794:	f002 f997 	bl	b6ac6 <_ZN5Print7printlnEPKc>
        WemoClient.println("Content-Type: text/xml; charset=utf-8");
   b4798:	491d      	ldr	r1, [pc, #116]	; (b4810 <_Z8switchONi+0xb4>)
   b479a:	481b      	ldr	r0, [pc, #108]	; (b4808 <_Z8switchONi+0xac>)
   b479c:	f002 f993 	bl	b6ac6 <_ZN5Print7printlnEPKc>
        WemoClient.println("SOAPACTION: \"urn:Belkin:service:basicevent:1#SetBinaryState\"");
   b47a0:	491c      	ldr	r1, [pc, #112]	; (b4814 <_Z8switchONi+0xb8>)
   b47a2:	4819      	ldr	r0, [pc, #100]	; (b4808 <_Z8switchONi+0xac>)
   b47a4:	f002 f98f 	bl	b6ac6 <_ZN5Print7printlnEPKc>
        WemoClient.println("Connection: keep-alive");
   b47a8:	491b      	ldr	r1, [pc, #108]	; (b4818 <_Z8switchONi+0xbc>)
   b47aa:	4817      	ldr	r0, [pc, #92]	; (b4808 <_Z8switchONi+0xac>)
   b47ac:	f002 f98b 	bl	b6ac6 <_ZN5Print7printlnEPKc>
        WemoClient.print("Content-Length: ");
   b47b0:	491a      	ldr	r1, [pc, #104]	; (b481c <_Z8switchONi+0xc0>)
   b47b2:	4815      	ldr	r0, [pc, #84]	; (b4808 <_Z8switchONi+0xac>)
   b47b4:	f002 f974 	bl	b6aa0 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b47b8:	9902      	ldr	r1, [sp, #8]
   b47ba:	4813      	ldr	r0, [pc, #76]	; (b4808 <_Z8switchONi+0xac>)
   b47bc:	220a      	movs	r2, #10
   b47be:	f002 f98c 	bl	b6ada <_ZN5Print11printNumberEmh>
        n += println();
   b47c2:	4811      	ldr	r0, [pc, #68]	; (b4808 <_Z8switchONi+0xac>)
   b47c4:	f002 f973 	bl	b6aae <_ZN5Print7printlnEv>
        WemoClient.println(data1.length());
        WemoClient.println();
   b47c8:	480f      	ldr	r0, [pc, #60]	; (b4808 <_Z8switchONi+0xac>)
   b47ca:	f002 f970 	bl	b6aae <_ZN5Print7printlnEv>
        WemoClient.print(data1);
   b47ce:	9900      	ldr	r1, [sp, #0]
   b47d0:	480d      	ldr	r0, [pc, #52]	; (b4808 <_Z8switchONi+0xac>)
   b47d2:	f002 f965 	bl	b6aa0 <_ZN5Print5printEPKc>
        WemoClient.println();
   b47d6:	480c      	ldr	r0, [pc, #48]	; (b4808 <_Z8switchONi+0xac>)
   b47d8:	f002 f969 	bl	b6aae <_ZN5Print7printlnEv>
    }

  if (WemoClient.connected()) {
   b47dc:	480a      	ldr	r0, [pc, #40]	; (b4808 <_Z8switchONi+0xac>)
   b47de:	f002 fcf7 	bl	b71d0 <_ZN9TCPClient9connectedEv>
   b47e2:	b110      	cbz	r0, b47ea <_Z8switchONi+0x8e>
     WemoClient.stop();
   b47e4:	4808      	ldr	r0, [pc, #32]	; (b4808 <_Z8switchONi+0xac>)
   b47e6:	f002 fe2b 	bl	b7440 <_ZN9TCPClient4stopEv>
  String data1;
   b47ea:	4668      	mov	r0, sp
   b47ec:	f002 fab4 	bl	b6d58 <_ZN6StringD1Ev>
  }
}
   b47f0:	b004      	add	sp, #16
   b47f2:	bd10      	pop	{r4, pc}
   b47f4:	000b838f 	.word	0x000b838f
   b47f8:	000b804a 	.word	0x000b804a
   b47fc:	000b8058 	.word	0x000b8058
   b4800:	2003e070 	.word	0x2003e070
   b4804:	2003e05c 	.word	0x2003e05c
   b4808:	2003e540 	.word	0x2003e540
   b480c:	000b8184 	.word	0x000b8184
   b4810:	000b81ac 	.word	0x000b81ac
   b4814:	000b81d2 	.word	0x000b81d2
   b4818:	000b820f 	.word	0x000b820f
   b481c:	000b8009 	.word	0x000b8009

000b4820 <_Z9switchOFFi>:

void switchOFF(int wemo){
   b4820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String data1;
   b4822:	4925      	ldr	r1, [pc, #148]	; (b48b8 <_Z9switchOFFi+0x98>)
void switchOFF(int wemo){
   b4824:	4604      	mov	r4, r0
  String data1;
   b4826:	4668      	mov	r0, sp
   b4828:	f002 fae1 	bl	b6dee <_ZN6StringC1EPK19__FlashStringHelper>
  
  Serial.printf("switchOFF %i \n",wemo);
   b482c:	f002 ff36 	bl	b769c <_Z16_fetch_usbserialv>
   b4830:	4622      	mov	r2, r4
   b4832:	4922      	ldr	r1, [pc, #136]	; (b48bc <_Z9switchOFFi+0x9c>)
   b4834:	f7ff fd7a 	bl	b432c <_ZN5Print6printfEPKcz>
   b4838:	4921      	ldr	r1, [pc, #132]	; (b48c0 <_Z9switchOFFi+0xa0>)
   b483a:	4668      	mov	r0, sp
   b483c:	f002 fb41 	bl	b6ec2 <_ZN6String6concatEPKc>
  data1+="<?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"><s:Body><u:SetBinaryState xmlns:u=\"urn:Belkin:service:basicevent:1\"><BinaryState>0</BinaryState></u:SetBinaryState></s:Body></s:Envelope>"; // Use HTML encoding for comma's
  if (WemoClient.connect(wemoIP[wemo],wemoPort)) {
   b4840:	4a20      	ldr	r2, [pc, #128]	; (b48c4 <_Z9switchOFFi+0xa4>)
   b4842:	4921      	ldr	r1, [pc, #132]	; (b48c8 <_Z9switchOFFi+0xa8>)
   b4844:	8812      	ldrh	r2, [r2, #0]
   b4846:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
   b484a:	4820      	ldr	r0, [pc, #128]	; (b48cc <_Z9switchOFFi+0xac>)
   b484c:	2300      	movs	r3, #0
   b484e:	f002 fc41 	bl	b70d4 <_ZN9TCPClient7connectEPKctm>
   b4852:	b328      	cbz	r0, b48a0 <_Z9switchOFFi+0x80>
        WemoClient.println("POST /upnp/control/basicevent1 HTTP/1.1");
   b4854:	491e      	ldr	r1, [pc, #120]	; (b48d0 <_Z9switchOFFi+0xb0>)
   b4856:	481d      	ldr	r0, [pc, #116]	; (b48cc <_Z9switchOFFi+0xac>)
   b4858:	f002 f935 	bl	b6ac6 <_ZN5Print7printlnEPKc>
        WemoClient.println("Content-Type: text/xml; charset=utf-8");
   b485c:	491d      	ldr	r1, [pc, #116]	; (b48d4 <_Z9switchOFFi+0xb4>)
   b485e:	481b      	ldr	r0, [pc, #108]	; (b48cc <_Z9switchOFFi+0xac>)
   b4860:	f002 f931 	bl	b6ac6 <_ZN5Print7printlnEPKc>
        WemoClient.println("SOAPACTION: \"urn:Belkin:service:basicevent:1#SetBinaryState\"");
   b4864:	491c      	ldr	r1, [pc, #112]	; (b48d8 <_Z9switchOFFi+0xb8>)
   b4866:	4819      	ldr	r0, [pc, #100]	; (b48cc <_Z9switchOFFi+0xac>)
   b4868:	f002 f92d 	bl	b6ac6 <_ZN5Print7printlnEPKc>
        WemoClient.println("Connection: keep-alive");
   b486c:	491b      	ldr	r1, [pc, #108]	; (b48dc <_Z9switchOFFi+0xbc>)
   b486e:	4817      	ldr	r0, [pc, #92]	; (b48cc <_Z9switchOFFi+0xac>)
   b4870:	f002 f929 	bl	b6ac6 <_ZN5Print7printlnEPKc>
        WemoClient.print("Content-Length: ");
   b4874:	491a      	ldr	r1, [pc, #104]	; (b48e0 <_Z9switchOFFi+0xc0>)
   b4876:	4815      	ldr	r0, [pc, #84]	; (b48cc <_Z9switchOFFi+0xac>)
   b4878:	f002 f912 	bl	b6aa0 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b487c:	9902      	ldr	r1, [sp, #8]
   b487e:	4813      	ldr	r0, [pc, #76]	; (b48cc <_Z9switchOFFi+0xac>)
   b4880:	220a      	movs	r2, #10
   b4882:	f002 f92a 	bl	b6ada <_ZN5Print11printNumberEmh>
        n += println();
   b4886:	4811      	ldr	r0, [pc, #68]	; (b48cc <_Z9switchOFFi+0xac>)
   b4888:	f002 f911 	bl	b6aae <_ZN5Print7printlnEv>
        WemoClient.println(data1.length());
        WemoClient.println();
   b488c:	480f      	ldr	r0, [pc, #60]	; (b48cc <_Z9switchOFFi+0xac>)
   b488e:	f002 f90e 	bl	b6aae <_ZN5Print7printlnEv>
        WemoClient.print(data1);
   b4892:	9900      	ldr	r1, [sp, #0]
   b4894:	480d      	ldr	r0, [pc, #52]	; (b48cc <_Z9switchOFFi+0xac>)
   b4896:	f002 f903 	bl	b6aa0 <_ZN5Print5printEPKc>
        WemoClient.println();
   b489a:	480c      	ldr	r0, [pc, #48]	; (b48cc <_Z9switchOFFi+0xac>)
   b489c:	f002 f907 	bl	b6aae <_ZN5Print7printlnEv>
    }
   
  if (WemoClient.connected()) {
   b48a0:	480a      	ldr	r0, [pc, #40]	; (b48cc <_Z9switchOFFi+0xac>)
   b48a2:	f002 fc95 	bl	b71d0 <_ZN9TCPClient9connectedEv>
   b48a6:	b110      	cbz	r0, b48ae <_Z9switchOFFi+0x8e>
     WemoClient.stop();
   b48a8:	4808      	ldr	r0, [pc, #32]	; (b48cc <_Z9switchOFFi+0xac>)
   b48aa:	f002 fdc9 	bl	b7440 <_ZN9TCPClient4stopEv>
  String data1;
   b48ae:	4668      	mov	r0, sp
   b48b0:	f002 fa52 	bl	b6d58 <_ZN6StringD1Ev>
  }
}
   b48b4:	b004      	add	sp, #16
   b48b6:	bd10      	pop	{r4, pc}
   b48b8:	000b838f 	.word	0x000b838f
   b48bc:	000b8226 	.word	0x000b8226
   b48c0:	000b8235 	.word	0x000b8235
   b48c4:	2003e070 	.word	0x2003e070
   b48c8:	2003e05c 	.word	0x2003e05c
   b48cc:	2003e540 	.word	0x2003e540
   b48d0:	000b8184 	.word	0x000b8184
   b48d4:	000b81ac 	.word	0x000b81ac
   b48d8:	000b81d2 	.word	0x000b81d2
   b48dc:	000b820f 	.word	0x000b820f
   b48e0:	000b8009 	.word	0x000b8009

000b48e4 <_ZN6Button9isClickedEv>:

    bool isPressed() {
      return digitalRead(_buttonPin);
    }

    bool isClicked() {
   b48e4:	b510      	push	{r4, lr}
   b48e6:	4604      	mov	r4, r0
      bool _buttonState, _clicked;

      _buttonState = digitalRead(_buttonPin);
   b48e8:	8800      	ldrh	r0, [r0, #0]
   b48ea:	f003 f88b 	bl	b7a04 <digitalRead>
      if(_buttonState != _prevButtonState) {
   b48ee:	6862      	ldr	r2, [r4, #4]
      _buttonState = digitalRead(_buttonPin);
   b48f0:	1e03      	subs	r3, r0, #0
   b48f2:	bf18      	it	ne
   b48f4:	2301      	movne	r3, #1
        _clicked = _buttonState;
      }
      else {
        _clicked = false;
      }
      _prevButtonState=_buttonState;
   b48f6:	6063      	str	r3, [r4, #4]
      return _clicked;
    }
   b48f8:	4293      	cmp	r3, r2
   b48fa:	bf14      	ite	ne
   b48fc:	4618      	movne	r0, r3
   b48fe:	2000      	moveq	r0, #0
   b4900:	bd10      	pop	{r4, pc}
	...

000b4904 <setup>:

Encoder myEnc(PINA,PINB);

SYSTEM_MODE(MANUAL);

void setup() {
   b4904:	b5f0      	push	{r4, r5, r6, r7, lr}
    display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b4906:	223c      	movs	r2, #60	; 0x3c
void setup() {
   b4908:	b097      	sub	sp, #92	; 0x5c
    display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b490a:	2102      	movs	r1, #2
   b490c:	4837      	ldr	r0, [pc, #220]	; (b49ec <setup+0xe8>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b490e:	4c38      	ldr	r4, [pc, #224]	; (b49f0 <setup+0xec>)
    WiFi.on();
    WiFi.setCredentials("IoTNetwork");
    WiFi.connect();

    while(WiFi.connecting()) {
        Serial.printf(",");
   b4910:	4f38      	ldr	r7, [pc, #224]	; (b49f4 <setup+0xf0>)
        display.drawCircle(60,30,30,HIGH);
   b4912:	4d36      	ldr	r5, [pc, #216]	; (b49ec <setup+0xe8>)
        display.printf("i am trying\nto get it\ntogether");
   b4914:	4e38      	ldr	r6, [pc, #224]	; (b49f8 <setup+0xf4>)
    display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b4916:	f001 f805 	bl	b5924 <_ZN16Adafruit_SSD13065beginEhh>
    display.clearDisplay();
   b491a:	4834      	ldr	r0, [pc, #208]	; (b49ec <setup+0xe8>)
   b491c:	f000 ff36 	bl	b578c <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setRotation(2);
   b4920:	2102      	movs	r1, #2
   b4922:	4832      	ldr	r0, [pc, #200]	; (b49ec <setup+0xe8>)
   b4924:	f000 fd45 	bl	b53b2 <_ZN12Adafruit_GFX11setRotationEh>
    pixel.begin();
   b4928:	4834      	ldr	r0, [pc, #208]	; (b49fc <setup+0xf8>)
   b492a:	f001 f8f0 	bl	b5b0e <_ZN17Adafruit_NeoPixel5beginEv>
    pixel.show();
   b492e:	4833      	ldr	r0, [pc, #204]	; (b49fc <setup+0xf8>)
   b4930:	f001 f926 	bl	b5b80 <_ZN17Adafruit_NeoPixel4showEv>
    pixel.setBrightness(10);
   b4934:	4831      	ldr	r0, [pc, #196]	; (b49fc <setup+0xf8>)
   b4936:	210a      	movs	r1, #10
   b4938:	f001 fb11 	bl	b5f5e <_ZN17Adafruit_NeoPixel13setBrightnessEh>
    pinMode(SPKRPIN, OUTPUT);
   b493c:	2101      	movs	r1, #1
   b493e:	2012      	movs	r0, #18
   b4940:	f003 f836 	bl	b79b0 <pinMode>
    pinMode(PIXPIN, OUTPUT);
   b4944:	2101      	movs	r1, #1
   b4946:	2008      	movs	r0, #8
   b4948:	f003 f832 	bl	b79b0 <pinMode>
    pinMode(ENBPIN, INPUT_PULLDOWN);
   b494c:	2103      	movs	r1, #3
   b494e:	200c      	movs	r0, #12
   b4950:	f003 f82e 	bl	b79b0 <pinMode>
    Serial.begin(9600);
   b4954:	f002 fea2 	bl	b769c <_Z16_fetch_usbserialv>
   b4958:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b495c:	f002 fe92 	bl	b7684 <_ZN9USBSerial5beginEl>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b4960:	2300      	movs	r3, #0
   b4962:	461a      	mov	r2, r3
   b4964:	4619      	mov	r1, r3
   b4966:	6860      	ldr	r0, [r4, #4]
   b4968:	f001 fd82 	bl	b6470 <network_on>

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   b496c:	2238      	movs	r2, #56	; 0x38
   b496e:	2100      	movs	r1, #0
   b4970:	a808      	add	r0, sp, #32
   b4972:	f003 fa27 	bl	b7dc4 <memset>
        creds.size = sizeof(creds);
   b4976:	234c      	movs	r3, #76	; 0x4c
   b4978:	9303      	str	r3, [sp, #12]
        creds.ssid = ssid;
   b497a:	4b21      	ldr	r3, [pc, #132]	; (b4a00 <setup+0xfc>)
   b497c:	9304      	str	r3, [sp, #16]
        creds.ssid_len = ssidLen;
        creds.password = password;
   b497e:	220a      	movs	r2, #10
   b4980:	2300      	movs	r3, #0
   b4982:	e9cd 2305 	strd	r2, r3, [sp, #20]
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4986:	4619      	mov	r1, r3
   b4988:	aa03      	add	r2, sp, #12
   b498a:	6860      	ldr	r0, [r4, #4]
        creds.password_len = passwordLen;
   b498c:	9307      	str	r3, [sp, #28]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b498e:	f001 fd8f 	bl	b64b0 <network_set_credentials>
        network_connect(*this, flags, 0, NULL);
   b4992:	2300      	movs	r3, #0
   b4994:	6860      	ldr	r0, [r4, #4]
   b4996:	461a      	mov	r2, r3
   b4998:	4619      	mov	r1, r3
   b499a:	f001 fd49 	bl	b6430 <network_connect>
        return network_connecting(*this, 0, NULL);
   b499e:	2200      	movs	r2, #0
   b49a0:	6860      	ldr	r0, [r4, #4]
   b49a2:	4611      	mov	r1, r2
   b49a4:	f001 fd4c 	bl	b6440 <network_connecting>
    while(WiFi.connecting()) {
   b49a8:	b1a0      	cbz	r0, b49d4 <setup+0xd0>
        Serial.printf(",");
   b49aa:	f002 fe77 	bl	b769c <_Z16_fetch_usbserialv>
   b49ae:	4639      	mov	r1, r7
   b49b0:	f7ff fcbc 	bl	b432c <_ZN5Print6printfEPKcz>
        display.drawCircle(60,30,30,HIGH);
   b49b4:	2301      	movs	r3, #1
   b49b6:	9300      	str	r3, [sp, #0]
   b49b8:	231e      	movs	r3, #30
   b49ba:	461a      	mov	r2, r3
   b49bc:	4628      	mov	r0, r5
   b49be:	213c      	movs	r1, #60	; 0x3c
   b49c0:	f000 fb74 	bl	b50ac <_ZN12Adafruit_GFX10drawCircleEssst>
        display.printf("i am trying\nto get it\ntogether");
   b49c4:	4631      	mov	r1, r6
   b49c6:	4628      	mov	r0, r5
   b49c8:	f7ff fcb0 	bl	b432c <_ZN5Print6printfEPKcz>
        display.display();
   b49cc:	4628      	mov	r0, r5
   b49ce:	f000 ff39 	bl	b5844 <_ZN16Adafruit_SSD13067displayEv>
    while(WiFi.connecting()) {
   b49d2:	e7e4      	b.n	b499e <setup+0x9a>
    }
    delay(1000);
   b49d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b49d8:	f001 fdde 	bl	b6598 <delay>
    Serial.printf("\n\n");
   b49dc:	f002 fe5e 	bl	b769c <_Z16_fetch_usbserialv>
   b49e0:	4908      	ldr	r1, [pc, #32]	; (b4a04 <setup+0x100>)
   b49e2:	f7ff fca3 	bl	b432c <_ZN5Print6printfEPKcz>

}
   b49e6:	b017      	add	sp, #92	; 0x5c
   b49e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b49ea:	bf00      	nop
   b49ec:	2003e5ac 	.word	0x2003e5ac
   b49f0:	2003e718 	.word	0x2003e718
   b49f4:	000b836c 	.word	0x000b836c
   b49f8:	000b836e 	.word	0x000b836e
   b49fc:	2003e610 	.word	0x2003e610
   b4a00:	000b8361 	.word	0x000b8361
   b4a04:	000b838d 	.word	0x000b838d

000b4a08 <_Z10wemoSwitchii>:
}


///FUNCTION AREA

void wemoSwitch(int oF, int wM) {
   b4a08:	4603      	mov	r3, r0
   b4a0a:	4608      	mov	r0, r1
    if(oF) {
   b4a0c:	b10b      	cbz	r3, b4a12 <_Z10wemoSwitchii+0xa>
        switchON(wM);
   b4a0e:	f7ff bea5 	b.w	b475c <_Z8switchONi>
       // Serial.printf("turn on Wemo %d\n", wM);
    }

    if(!oF) {
        switchOFF(wM);
   b4a12:	f7ff bf05 	b.w	b4820 <_Z9switchOFFi>
	...

000b4a18 <_Z9pixelFilliii>:
        display.clearDisplay();
        display.display();
    }
}

void pixelFill(int startingPixel, int endingPixel, int color) {
   b4a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for(i=startingPixel; i<=endingPixel; i++) { 
   b4a1a:	4c0b      	ldr	r4, [pc, #44]	; (b4a48 <_Z9pixelFilliii+0x30>)
        pixel.setPixelColor(i, color);
   b4a1c:	4e0b      	ldr	r6, [pc, #44]	; (b4a4c <_Z9pixelFilliii+0x34>)
    for(i=startingPixel; i<=endingPixel; i++) { 
   b4a1e:	6020      	str	r0, [r4, #0]
void pixelFill(int startingPixel, int endingPixel, int color) {
   b4a20:	460d      	mov	r5, r1
   b4a22:	4617      	mov	r7, r2
    for(i=startingPixel; i<=endingPixel; i++) { 
   b4a24:	6821      	ldr	r1, [r4, #0]
   b4a26:	42a9      	cmp	r1, r5
   b4a28:	dc08      	bgt.n	b4a3c <_Z9pixelFilliii+0x24>
        pixel.setPixelColor(i, color);
   b4a2a:	463a      	mov	r2, r7
   b4a2c:	b289      	uxth	r1, r1
   b4a2e:	4630      	mov	r0, r6
   b4a30:	f001 fa52 	bl	b5ed8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    for(i=startingPixel; i<=endingPixel; i++) { 
   b4a34:	6823      	ldr	r3, [r4, #0]
   b4a36:	3301      	adds	r3, #1
   b4a38:	6023      	str	r3, [r4, #0]
   b4a3a:	e7f3      	b.n	b4a24 <_Z9pixelFilliii+0xc>
    }
    pixel.show();
}
   b4a3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    pixel.show();
   b4a40:	4802      	ldr	r0, [pc, #8]	; (b4a4c <_Z9pixelFilliii+0x34>)
   b4a42:	f001 b89d 	b.w	b5b80 <_ZN17Adafruit_NeoPixel4showEv>
   b4a46:	bf00      	nop
   b4a48:	2003e5e8 	.word	0x2003e5e8
   b4a4c:	2003e610 	.word	0x2003e610

000b4a50 <loop>:
    tone(SPKRPIN, 0);
   b4a50:	2200      	movs	r2, #0
void loop() {
   b4a52:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    tone(SPKRPIN, 0);
   b4a56:	4611      	mov	r1, r2
   b4a58:	2012      	movs	r0, #18
   b4a5a:	f002 fd59 	bl	b7510 <tone>
    if(button4.isClicked()) {
   b4a5e:	48aa      	ldr	r0, [pc, #680]	; (b4d08 <loop+0x2b8>)
   b4a60:	4daa      	ldr	r5, [pc, #680]	; (b4d0c <loop+0x2bc>)
   b4a62:	f7ff ff3f 	bl	b48e4 <_ZN6Button9isClickedEv>
   b4a66:	b118      	cbz	r0, b4a70 <loop+0x20>
        onOFF4 = !onOFF4;
   b4a68:	782b      	ldrb	r3, [r5, #0]
   b4a6a:	f083 0301 	eor.w	r3, r3, #1
   b4a6e:	702b      	strb	r3, [r5, #0]
    if(onOFF4 &&!onOFF5) {
   b4a70:	782b      	ldrb	r3, [r5, #0]
   b4a72:	4ca7      	ldr	r4, [pc, #668]	; (b4d10 <loop+0x2c0>)
   b4a74:	b34b      	cbz	r3, b4aca <loop+0x7a>
   b4a76:	7826      	ldrb	r6, [r4, #0]
   b4a78:	bb3e      	cbnz	r6, b4aca <loop+0x7a>
        display.clearDisplay();
   b4a7a:	48a6      	ldr	r0, [pc, #664]	; (b4d14 <loop+0x2c4>)
   b4a7c:	f000 fe86 	bl	b578c <_ZN16Adafruit_SSD130612clearDisplayEv>
        display.setTextSize(2);
   b4a80:	48a4      	ldr	r0, [pc, #656]	; (b4d14 <loop+0x2c4>)
   b4a82:	2102      	movs	r1, #2
   b4a84:	f000 fc8b 	bl	b539e <_ZN12Adafruit_GFX11setTextSizeEh>
        display.setTextColor(WHITE);
   b4a88:	48a2      	ldr	r0, [pc, #648]	; (b4d14 <loop+0x2c4>)
   b4a8a:	2101      	movs	r1, #1
   b4a8c:	f000 fc8c 	bl	b53a8 <_ZN12Adafruit_GFX12setTextColorEt>
        display.setCursor(0,0);
   b4a90:	4632      	mov	r2, r6
   b4a92:	48a0      	ldr	r0, [pc, #640]	; (b4d14 <loop+0x2c4>)
   b4a94:	4631      	mov	r1, r6
   b4a96:	f000 fc7f 	bl	b5398 <_ZN12Adafruit_GFX9setCursorEss>
        display.printf("HELLO\nLOVE");
   b4a9a:	499f      	ldr	r1, [pc, #636]	; (b4d18 <loop+0x2c8>)
   b4a9c:	489d      	ldr	r0, [pc, #628]	; (b4d14 <loop+0x2c4>)
   b4a9e:	f7ff fc45 	bl	b432c <_ZN5Print6printfEPKcz>
        display.display();
   b4aa2:	489c      	ldr	r0, [pc, #624]	; (b4d14 <loop+0x2c4>)
   b4aa4:	f000 fece 	bl	b5844 <_ZN16Adafruit_SSD13067displayEv>
        pixel.clear();
   b4aa8:	489c      	ldr	r0, [pc, #624]	; (b4d1c <loop+0x2cc>)
   b4aaa:	f001 fa7f 	bl	b5fac <_ZN17Adafruit_NeoPixel5clearEv>
        pixelFill(0,6,0xFFFFFF);
   b4aae:	2106      	movs	r1, #6
   b4ab0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
   b4ab4:	4630      	mov	r0, r6
   b4ab6:	f7ff ffaf 	bl	b4a18 <_Z9pixelFilliii>
        pixel.show();
   b4aba:	4898      	ldr	r0, [pc, #608]	; (b4d1c <loop+0x2cc>)
   b4abc:	f001 f860 	bl	b5b80 <_ZN17Adafruit_NeoPixel4showEv>
        Serial.printf("button 4 is pressed\r");
   b4ac0:	f002 fdec 	bl	b769c <_Z16_fetch_usbserialv>
   b4ac4:	4996      	ldr	r1, [pc, #600]	; (b4d20 <loop+0x2d0>)
   b4ac6:	f7ff fc31 	bl	b432c <_ZN5Print6printfEPKcz>
    if(button5.isClicked()) {
   b4aca:	4896      	ldr	r0, [pc, #600]	; (b4d24 <loop+0x2d4>)
   b4acc:	f7ff ff0a 	bl	b48e4 <_ZN6Button9isClickedEv>
   b4ad0:	b118      	cbz	r0, b4ada <loop+0x8a>
        onOFF5 = !onOFF5;
   b4ad2:	7823      	ldrb	r3, [r4, #0]
   b4ad4:	f083 0301 	eor.w	r3, r3, #1
   b4ad8:	7023      	strb	r3, [r4, #0]
    if(!onOFF4 && !onOFF5) {
   b4ada:	782b      	ldrb	r3, [r5, #0]
   b4adc:	2b00      	cmp	r3, #0
   b4ade:	d07a      	beq.n	b4bd6 <loop+0x186>
    if(onOFF4 && onOFF5) {
   b4ae0:	7823      	ldrb	r3, [r4, #0]
   b4ae2:	2b00      	cmp	r3, #0
   b4ae4:	f000 80bc 	beq.w	b4c60 <loop+0x210>
        display.clearDisplay();
   b4ae8:	488a      	ldr	r0, [pc, #552]	; (b4d14 <loop+0x2c4>)
   b4aea:	f000 fe4f 	bl	b578c <_ZN16Adafruit_SSD130612clearDisplayEv>
        display.setCursor(0,20);
   b4aee:	2214      	movs	r2, #20
   b4af0:	4888      	ldr	r0, [pc, #544]	; (b4d14 <loop+0x2c4>)
   b4af2:	2100      	movs	r1, #0
   b4af4:	f000 fc50 	bl	b5398 <_ZN12Adafruit_GFX9setCursorEss>
        display.printf("WHAT DO U\nNEED<3");
   b4af8:	498b      	ldr	r1, [pc, #556]	; (b4d28 <loop+0x2d8>)
   b4afa:	4886      	ldr	r0, [pc, #536]	; (b4d14 <loop+0x2c4>)
   b4afc:	f7ff fc16 	bl	b432c <_ZN5Print6printfEPKcz>
        display.display();
   b4b00:	4884      	ldr	r0, [pc, #528]	; (b4d14 <loop+0x2c4>)
   b4b02:	f000 fe9f 	bl	b5844 <_ZN16Adafruit_SSD13067displayEv>
        Serial.printf("Buttons are clickED\r");
   b4b06:	f002 fdc9 	bl	b769c <_Z16_fetch_usbserialv>
   b4b0a:	4988      	ldr	r1, [pc, #544]	; (b4d2c <loop+0x2dc>)
   b4b0c:	f7ff fc0e 	bl	b432c <_ZN5Print6printfEPKcz>
        pixel.clear();
   b4b10:	4882      	ldr	r0, [pc, #520]	; (b4d1c <loop+0x2cc>)
   b4b12:	f001 fa4b 	bl	b5fac <_ZN17Adafruit_NeoPixel5clearEv>
        pixelFill(0, 12, 0xFFFFFF);
   b4b16:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
   b4b1a:	210c      	movs	r1, #12
   b4b1c:	2000      	movs	r0, #0
   b4b1e:	f7ff ff7b 	bl	b4a18 <_Z9pixelFilliii>
        pixel.show();
   b4b22:	487e      	ldr	r0, [pc, #504]	; (b4d1c <loop+0x2cc>)
   b4b24:	f001 f82c 	bl	b5b80 <_ZN17Adafruit_NeoPixel4showEv>
        if(button1.isClicked()) {
   b4b28:	4881      	ldr	r0, [pc, #516]	; (b4d30 <loop+0x2e0>)
   b4b2a:	f7ff fedb 	bl	b48e4 <_ZN6Button9isClickedEv>
   b4b2e:	4b81      	ldr	r3, [pc, #516]	; (b4d34 <loop+0x2e4>)
   b4b30:	b118      	cbz	r0, b4b3a <loop+0xea>
            onOFF1 = !onOFF1;
   b4b32:	781a      	ldrb	r2, [r3, #0]
   b4b34:	f082 0201 	eor.w	r2, r2, #1
   b4b38:	701a      	strb	r2, [r3, #0]
        wemoSwitch(onOFF1, WEMO1);
   b4b3a:	7818      	ldrb	r0, [r3, #0]
   b4b3c:	2101      	movs	r1, #1
   b4b3e:	f7ff ff63 	bl	b4a08 <_Z10wemoSwitchii>
        if(button2.isClicked()) {
   b4b42:	487d      	ldr	r0, [pc, #500]	; (b4d38 <loop+0x2e8>)
   b4b44:	f7ff fece 	bl	b48e4 <_ZN6Button9isClickedEv>
   b4b48:	4b7c      	ldr	r3, [pc, #496]	; (b4d3c <loop+0x2ec>)
   b4b4a:	b118      	cbz	r0, b4b54 <loop+0x104>
            onOFF2 = !onOFF2;
   b4b4c:	781a      	ldrb	r2, [r3, #0]
   b4b4e:	f082 0201 	eor.w	r2, r2, #1
   b4b52:	701a      	strb	r2, [r3, #0]
		int32_t ret = position;
   b4b54:	4d7a      	ldr	r5, [pc, #488]	; (b4d40 <loop+0x2f0>)
        wemoSwitch(onOFF2, WEMO2); 
   b4b56:	7818      	ldrb	r0, [r3, #0]
        encValue = myEnc.read();
   b4b58:	4c7a      	ldr	r4, [pc, #488]	; (b4d44 <loop+0x2f4>)
        wemoSwitch(onOFF2, WEMO2); 
   b4b5a:	2102      	movs	r1, #2
   b4b5c:	f7ff ff54 	bl	b4a08 <_Z10wemoSwitchii>
		noInterrupts();
   b4b60:	f001 fe2a 	bl	b67b8 <_Z12noInterruptsv>
		int32_t ret = position;
   b4b64:	696e      	ldr	r6, [r5, #20]
		interrupts();
   b4b66:	f001 fe29 	bl	b67bc <_Z10interruptsv>
        if(encValue >= 95) {
   b4b6a:	2e5e      	cmp	r6, #94	; 0x5e
        encValue = myEnc.read();
   b4b6c:	6026      	str	r6, [r4, #0]
        if(encValue >= 95) {
   b4b6e:	f340 809c 	ble.w	b4caa <loop+0x25a>
		noInterrupts();
   b4b72:	f001 fe21 	bl	b67b8 <_Z12noInterruptsv>
		position = p;
   b4b76:	265f      	movs	r6, #95	; 0x5f
   b4b78:	616e      	str	r6, [r5, #20]
		interrupts();
   b4b7a:	f001 fe1f 	bl	b67bc <_Z10interruptsv>
            encValue = 0;
   b4b7e:	6026      	str	r6, [r4, #0]
        brightness = map(encValue,0,95,0,255);
   b4b80:	23ff      	movs	r3, #255	; 0xff
   b4b82:	9300      	str	r3, [sp, #0]
   b4b84:	2300      	movs	r3, #0
   b4b86:	6820      	ldr	r0, [r4, #0]
   b4b88:	4f6f      	ldr	r7, [pc, #444]	; (b4d48 <loop+0x2f8>)
   b4b8a:	225f      	movs	r2, #95	; 0x5f
   b4b8c:	4619      	mov	r1, r3
   b4b8e:	f001 fcf7 	bl	b6580 <_Z3mapiiiii>
   b4b92:	6038      	str	r0, [r7, #0]
        if(button3.isClicked()) {
   b4b94:	486d      	ldr	r0, [pc, #436]	; (b4d4c <loop+0x2fc>)
   b4b96:	f7ff fea5 	bl	b48e4 <_ZN6Button9isClickedEv>
   b4b9a:	b118      	cbz	r0, b4ba4 <loop+0x154>
            color++;
   b4b9c:	4a6c      	ldr	r2, [pc, #432]	; (b4d50 <loop+0x300>)
   b4b9e:	6813      	ldr	r3, [r2, #0]
   b4ba0:	3301      	adds	r3, #1
   b4ba2:	6013      	str	r3, [r2, #0]
        if(buttonE.isClicked()) {
   b4ba4:	486b      	ldr	r0, [pc, #428]	; (b4d54 <loop+0x304>)
   b4ba6:	4d6c      	ldr	r5, [pc, #432]	; (b4d58 <loop+0x308>)
   b4ba8:	f7ff fe9c 	bl	b48e4 <_ZN6Button9isClickedEv>
   b4bac:	b118      	cbz	r0, b4bb6 <loop+0x166>
            onOFFE = !onOFFE;
   b4bae:	782b      	ldrb	r3, [r5, #0]
   b4bb0:	f083 0301 	eor.w	r3, r3, #1
   b4bb4:	702b      	strb	r3, [r5, #0]
        if(onOFFE) {
   b4bb6:	782b      	ldrb	r3, [r5, #0]
   b4bb8:	2b00      	cmp	r3, #0
   b4bba:	d17d      	bne.n	b4cb8 <loop+0x268>
            Serial.printf("SHUT ER DOWN\n");
   b4bbc:	f002 fd6e 	bl	b769c <_Z16_fetch_usbserialv>
   b4bc0:	4966      	ldr	r1, [pc, #408]	; (b4d5c <loop+0x30c>)
   b4bc2:	f7ff fbb3 	bl	b432c <_ZN5Print6printfEPKcz>
            setHue(BULB1,false,0,0,0);
   b4bc6:	2300      	movs	r3, #0
   b4bc8:	9300      	str	r3, [sp, #0]
   b4bca:	461a      	mov	r2, r3
   b4bcc:	4619      	mov	r1, r3
   b4bce:	2001      	movs	r0, #1
   b4bd0:	f7ff fc9e 	bl	b4510 <_Z6setHueibiii>
   b4bd4:	e044      	b.n	b4c60 <loop+0x210>
    if(!onOFF4 && !onOFF5) {
   b4bd6:	7823      	ldrb	r3, [r4, #0]
   b4bd8:	2b00      	cmp	r3, #0
   b4bda:	d141      	bne.n	b4c60 <loop+0x210>
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4bdc:	f001 fa14 	bl	b6008 <HAL_Timer_Get_Milli_Seconds>
        if((currentTime - lastSecond) >5000) {
   b4be0:	4f5f      	ldr	r7, [pc, #380]	; (b4d60 <loop+0x310>)
        currentTime=millis();
   b4be2:	4b60      	ldr	r3, [pc, #384]	; (b4d64 <loop+0x314>)
   b4be4:	4e60      	ldr	r6, [pc, #384]	; (b4d68 <loop+0x318>)
   b4be6:	6018      	str	r0, [r3, #0]
        if((currentTime - lastSecond) >5000) {
   b4be8:	683b      	ldr	r3, [r7, #0]
   b4bea:	1ac0      	subs	r0, r0, r3
   b4bec:	f241 3388 	movw	r3, #5000	; 0x1388
   b4bf0:	4298      	cmp	r0, r3
   b4bf2:	dd06      	ble.n	b4c02 <loop+0x1b2>
            doyouloveme = !doyouloveme;
   b4bf4:	7833      	ldrb	r3, [r6, #0]
   b4bf6:	f083 0301 	eor.w	r3, r3, #1
   b4bfa:	7033      	strb	r3, [r6, #0]
   b4bfc:	f001 fa04 	bl	b6008 <HAL_Timer_Get_Milli_Seconds>
            lastSecond=millis();
   b4c00:	6038      	str	r0, [r7, #0]
        if(doyouloveme) {
   b4c02:	7836      	ldrb	r6, [r6, #0]
   b4c04:	b37e      	cbz	r6, b4c66 <loop+0x216>
            pixelFill(0, 12, 0xFFA500);
   b4c06:	4a59      	ldr	r2, [pc, #356]	; (b4d6c <loop+0x31c>)
   b4c08:	210c      	movs	r1, #12
   b4c0a:	2000      	movs	r0, #0
   b4c0c:	f7ff ff04 	bl	b4a18 <_Z9pixelFilliii>
            pixel.show();
   b4c10:	4842      	ldr	r0, [pc, #264]	; (b4d1c <loop+0x2cc>)
   b4c12:	f000 ffb5 	bl	b5b80 <_ZN17Adafruit_NeoPixel4showEv>
            setHue(BULB1,false,0,0,0);
   b4c16:	2300      	movs	r3, #0
   b4c18:	461a      	mov	r2, r3
   b4c1a:	4619      	mov	r1, r3
   b4c1c:	9300      	str	r3, [sp, #0]
   b4c1e:	2001      	movs	r0, #1
   b4c20:	f7ff fc76 	bl	b4510 <_Z6setHueibiii>
            display.clearDisplay();
   b4c24:	483b      	ldr	r0, [pc, #236]	; (b4d14 <loop+0x2c4>)
   b4c26:	f000 fdb1 	bl	b578c <_ZN16Adafruit_SSD130612clearDisplayEv>
            display.setTextSize(2);
   b4c2a:	483a      	ldr	r0, [pc, #232]	; (b4d14 <loop+0x2c4>)
   b4c2c:	2102      	movs	r1, #2
   b4c2e:	f000 fbb6 	bl	b539e <_ZN12Adafruit_GFX11setTextSizeEh>
            display.setTextColor(WHITE);
   b4c32:	2101      	movs	r1, #1
   b4c34:	4837      	ldr	r0, [pc, #220]	; (b4d14 <loop+0x2c4>)
   b4c36:	f000 fbb7 	bl	b53a8 <_ZN12Adafruit_GFX12setTextColorEt>
            display.clearDisplay();
   b4c3a:	4836      	ldr	r0, [pc, #216]	; (b4d14 <loop+0x2c4>)
   b4c3c:	f000 fda6 	bl	b578c <_ZN16Adafruit_SSD130612clearDisplayEv>
            display.setCursor(10,20);
   b4c40:	4834      	ldr	r0, [pc, #208]	; (b4d14 <loop+0x2c4>)
   b4c42:	210a      	movs	r1, #10
   b4c44:	2214      	movs	r2, #20
   b4c46:	f000 fba7 	bl	b5398 <_ZN12Adafruit_GFX9setCursorEss>
            display.printf("DO YOU\nLOVE ME?");
   b4c4a:	4949      	ldr	r1, [pc, #292]	; (b4d70 <loop+0x320>)
   b4c4c:	4831      	ldr	r0, [pc, #196]	; (b4d14 <loop+0x2c4>)
   b4c4e:	f7ff fb6d 	bl	b432c <_ZN5Print6printfEPKcz>
            display.display();
   b4c52:	4830      	ldr	r0, [pc, #192]	; (b4d14 <loop+0x2c4>)
   b4c54:	f000 fdf6 	bl	b5844 <_ZN16Adafruit_SSD13067displayEv>
    if(onOFF4 && onOFF5) {
   b4c58:	782b      	ldrb	r3, [r5, #0]
   b4c5a:	2b00      	cmp	r3, #0
   b4c5c:	f47f af40 	bne.w	b4ae0 <loop+0x90>
}
   b4c60:	b002      	add	sp, #8
   b4c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            pixel.clear();
   b4c66:	482d      	ldr	r0, [pc, #180]	; (b4d1c <loop+0x2cc>)
   b4c68:	f001 f9a0 	bl	b5fac <_ZN17Adafruit_NeoPixel5clearEv>
            pixel.show();
   b4c6c:	482b      	ldr	r0, [pc, #172]	; (b4d1c <loop+0x2cc>)
   b4c6e:	f000 ff87 	bl	b5b80 <_ZN17Adafruit_NeoPixel4showEv>
            setHue(BULB1,true,HueRainbow[color%7],brightness,255);
   b4c72:	4b37      	ldr	r3, [pc, #220]	; (b4d50 <loop+0x300>)
   b4c74:	493f      	ldr	r1, [pc, #252]	; (b4d74 <loop+0x324>)
   b4c76:	681a      	ldr	r2, [r3, #0]
   b4c78:	2307      	movs	r3, #7
   b4c7a:	fb92 f3f3 	sdiv	r3, r2, r3
   b4c7e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   b4c82:	1ad2      	subs	r2, r2, r3
   b4c84:	23ff      	movs	r3, #255	; 0xff
   b4c86:	9300      	str	r3, [sp, #0]
   b4c88:	4b2f      	ldr	r3, [pc, #188]	; (b4d48 <loop+0x2f8>)
   b4c8a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   b4c8e:	681b      	ldr	r3, [r3, #0]
   b4c90:	2101      	movs	r1, #1
   b4c92:	4608      	mov	r0, r1
   b4c94:	f7ff fc3c 	bl	b4510 <_Z6setHueibiii>
            tone(SPKRPIN, 0);
   b4c98:	4632      	mov	r2, r6
   b4c9a:	4631      	mov	r1, r6
   b4c9c:	2012      	movs	r0, #18
   b4c9e:	f002 fc37 	bl	b7510 <tone>
            display.clearDisplay();
   b4ca2:	481c      	ldr	r0, [pc, #112]	; (b4d14 <loop+0x2c4>)
   b4ca4:	f000 fd72 	bl	b578c <_ZN16Adafruit_SSD130612clearDisplayEv>
   b4ca8:	e7d3      	b.n	b4c52 <loop+0x202>
        if(encValue <= 0) {
   b4caa:	2e00      	cmp	r6, #0
   b4cac:	f73f af68 	bgt.w	b4b80 <loop+0x130>
		noInterrupts();
   b4cb0:	f001 fd82 	bl	b67b8 <_Z12noInterruptsv>
		position = p;
   b4cb4:	2600      	movs	r6, #0
   b4cb6:	e75f      	b.n	b4b78 <loop+0x128>
                Serial.printf("setting color of bulb %i to color %06i\n", BULB1, HueRainbow[color%7]);
   b4cb8:	f8df 8094 	ldr.w	r8, [pc, #148]	; b4d50 <loop+0x300>
   b4cbc:	4e2d      	ldr	r6, [pc, #180]	; (b4d74 <loop+0x324>)
   b4cbe:	f002 fced 	bl	b769c <_Z16_fetch_usbserialv>
   b4cc2:	f8d8 3000 	ldr.w	r3, [r8]
   b4cc6:	492c      	ldr	r1, [pc, #176]	; (b4d78 <loop+0x328>)
   b4cc8:	2407      	movs	r4, #7
   b4cca:	fb93 f2f4 	sdiv	r2, r3, r4
   b4cce:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   b4cd2:	1a9b      	subs	r3, r3, r2
   b4cd4:	2201      	movs	r2, #1
   b4cd6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
   b4cda:	f7ff fb27 	bl	b432c <_ZN5Print6printfEPKcz>
                setHue(BULB1,true,HueRainbow[color%7],brightness,255);
   b4cde:	f8d8 3000 	ldr.w	r3, [r8]
   b4ce2:	fb93 f4f4 	sdiv	r4, r3, r4
   b4ce6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   b4cea:	1b1c      	subs	r4, r3, r4
   b4cec:	23ff      	movs	r3, #255	; 0xff
   b4cee:	9300      	str	r3, [sp, #0]
   b4cf0:	2101      	movs	r1, #1
   b4cf2:	683b      	ldr	r3, [r7, #0]
   b4cf4:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   b4cf8:	4608      	mov	r0, r1
   b4cfa:	f7ff fc09 	bl	b4510 <_Z6setHueibiii>
        if(!onOFFE) {
   b4cfe:	782b      	ldrb	r3, [r5, #0]
   b4d00:	2b00      	cmp	r3, #0
   b4d02:	d1ad      	bne.n	b4c60 <loop+0x210>
   b4d04:	e75a      	b.n	b4bbc <loop+0x16c>
   b4d06:	bf00      	nop
   b4d08:	2003e58c 	.word	0x2003e58c
   b4d0c:	2003e60a 	.word	0x2003e60a
   b4d10:	2003e60b 	.word	0x2003e60b
   b4d14:	2003e5ac 	.word	0x2003e5ac
   b4d18:	000b8390 	.word	0x000b8390
   b4d1c:	2003e610 	.word	0x2003e610
   b4d20:	000b839b 	.word	0x000b839b
   b4d24:	2003e594 	.word	0x2003e594
   b4d28:	000b83c0 	.word	0x000b83c0
   b4d2c:	000b83d1 	.word	0x000b83d1
   b4d30:	2003e574 	.word	0x2003e574
   b4d34:	2003e608 	.word	0x2003e608
   b4d38:	2003e57c 	.word	0x2003e57c
   b4d3c:	2003e609 	.word	0x2003e609
   b4d40:	2003e5f0 	.word	0x2003e5f0
   b4d44:	2003e5d4 	.word	0x2003e5d4
   b4d48:	2003e570 	.word	0x2003e570
   b4d4c:	2003e584 	.word	0x2003e584
   b4d50:	2003e5a4 	.word	0x2003e5a4
   b4d54:	2003e59c 	.word	0x2003e59c
   b4d58:	2003e60c 	.word	0x2003e60c
   b4d5c:	000b83e6 	.word	0x000b83e6
   b4d60:	2003e5ec 	.word	0x2003e5ec
   b4d64:	2003e5a8 	.word	0x2003e5a8
   b4d68:	2003e5d0 	.word	0x2003e5d0
   b4d6c:	00ffa500 	.word	0x00ffa500
   b4d70:	000b83b0 	.word	0x000b83b0
   b4d74:	2003e514 	.word	0x2003e514
   b4d78:	000b83f4 	.word	0x000b83f4

000b4d7c <_GLOBAL__sub_I_hueOn>:
}
   b4d7c:	b538      	push	{r3, r4, r5, lr}
String hueCmd;  // Hue command
   b4d7e:	4931      	ldr	r1, [pc, #196]	; (b4e44 <_GLOBAL__sub_I_hueOn+0xc8>)
   b4d80:	4831      	ldr	r0, [pc, #196]	; (b4e48 <_GLOBAL__sub_I_hueOn+0xcc>)
   b4d82:	f002 f834 	bl	b6dee <_ZN6StringC1EPK19__FlashStringHelper>
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b4d86:	4a31      	ldr	r2, [pc, #196]	; (b4e4c <_GLOBAL__sub_I_hueOn+0xd0>)
   b4d88:	4b31      	ldr	r3, [pc, #196]	; (b4e50 <_GLOBAL__sub_I_hueOn+0xd4>)
   b4d8a:	6812      	ldr	r2, [r2, #0]
   b4d8c:	601a      	str	r2, [r3, #0]
   b4d8e:	4a31      	ldr	r2, [pc, #196]	; (b4e54 <_GLOBAL__sub_I_hueOn+0xd8>)
TCPClient HueClient;
   b4d90:	4831      	ldr	r0, [pc, #196]	; (b4e58 <_GLOBAL__sub_I_hueOn+0xdc>)
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b4d92:	6812      	ldr	r2, [r2, #0]
   b4d94:	605a      	str	r2, [r3, #4]
   b4d96:	4a31      	ldr	r2, [pc, #196]	; (b4e5c <_GLOBAL__sub_I_hueOn+0xe0>)
   b4d98:	6812      	ldr	r2, [r2, #0]
   b4d9a:	609a      	str	r2, [r3, #8]
   b4d9c:	4a30      	ldr	r2, [pc, #192]	; (b4e60 <_GLOBAL__sub_I_hueOn+0xe4>)
   b4d9e:	6812      	ldr	r2, [r2, #0]
   b4da0:	60da      	str	r2, [r3, #12]
   b4da2:	4a30      	ldr	r2, [pc, #192]	; (b4e64 <_GLOBAL__sub_I_hueOn+0xe8>)
   b4da4:	6812      	ldr	r2, [r2, #0]
   b4da6:	611a      	str	r2, [r3, #16]
   b4da8:	4a2f      	ldr	r2, [pc, #188]	; (b4e68 <_GLOBAL__sub_I_hueOn+0xec>)
   b4daa:	6812      	ldr	r2, [r2, #0]
   b4dac:	615a      	str	r2, [r3, #20]
   b4dae:	4a2f      	ldr	r2, [pc, #188]	; (b4e6c <_GLOBAL__sub_I_hueOn+0xf0>)
   b4db0:	6812      	ldr	r2, [r2, #0]
   b4db2:	619a      	str	r2, [r3, #24]
TCPClient HueClient;
   b4db4:	f002 fb8e 	bl	b74d4 <_ZN9TCPClientC1Ev>
TCPClient WemoClient;
   b4db8:	482d      	ldr	r0, [pc, #180]	; (b4e70 <_GLOBAL__sub_I_hueOn+0xf4>)
   b4dba:	f002 fb8b 	bl	b74d4 <_ZN9TCPClientC1Ev>
      _buttonPin = buttonPin;
   b4dbe:	4a2d      	ldr	r2, [pc, #180]	; (b4e74 <_GLOBAL__sub_I_hueOn+0xf8>)
   b4dc0:	2302      	movs	r3, #2
   b4dc2:	6013      	str	r3, [r2, #0]
      pinMode(_buttonPin,INPUT);
   b4dc4:	4618      	mov	r0, r3
   b4dc6:	2100      	movs	r1, #0
   b4dc8:	f002 fdf2 	bl	b79b0 <pinMode>
      _buttonPin = buttonPin;
   b4dcc:	4a2a      	ldr	r2, [pc, #168]	; (b4e78 <_GLOBAL__sub_I_hueOn+0xfc>)
   b4dce:	2403      	movs	r4, #3
   b4dd0:	6014      	str	r4, [r2, #0]
      pinMode(_buttonPin,INPUT);
   b4dd2:	4620      	mov	r0, r4
   b4dd4:	2100      	movs	r1, #0
   b4dd6:	f002 fdeb 	bl	b79b0 <pinMode>
      _buttonPin = buttonPin;
   b4dda:	4a28      	ldr	r2, [pc, #160]	; (b4e7c <_GLOBAL__sub_I_hueOn+0x100>)
   b4ddc:	2004      	movs	r0, #4
   b4dde:	6010      	str	r0, [r2, #0]
      pinMode(_buttonPin,INPUT);
   b4de0:	2100      	movs	r1, #0
   b4de2:	f002 fde5 	bl	b79b0 <pinMode>
      _buttonPin = buttonPin;
   b4de6:	4a26      	ldr	r2, [pc, #152]	; (b4e80 <_GLOBAL__sub_I_hueOn+0x104>)
   b4de8:	2005      	movs	r0, #5
   b4dea:	6010      	str	r0, [r2, #0]
      pinMode(_buttonPin,INPUT);
   b4dec:	2100      	movs	r1, #0
   b4dee:	f002 fddf 	bl	b79b0 <pinMode>
      _buttonPin = buttonPin;
   b4df2:	4a24      	ldr	r2, [pc, #144]	; (b4e84 <_GLOBAL__sub_I_hueOn+0x108>)
   b4df4:	2006      	movs	r0, #6
   b4df6:	6010      	str	r0, [r2, #0]
      pinMode(_buttonPin,INPUT);
   b4df8:	2100      	movs	r1, #0
   b4dfa:	f002 fdd9 	bl	b79b0 <pinMode>
      _buttonPin = buttonPin;
   b4dfe:	4a22      	ldr	r2, [pc, #136]	; (b4e88 <_GLOBAL__sub_I_hueOn+0x10c>)
   b4e00:	250c      	movs	r5, #12
   b4e02:	6015      	str	r5, [r2, #0]
      pinMode(_buttonPin,INPUT);
   b4e04:	4628      	mov	r0, r5
   b4e06:	2100      	movs	r1, #0
   b4e08:	f002 fdd2 	bl	b79b0 <pinMode>
Adafruit_SSD1306 display(OLED_RESET);
   b4e0c:	2113      	movs	r1, #19
   b4e0e:	481f      	ldr	r0, [pc, #124]	; (b4e8c <_GLOBAL__sub_I_hueOn+0x110>)
   b4e10:	f000 fca6 	bl	b5760 <_ZN16Adafruit_SSD1306C1Ea>
Adafruit_NeoPixel pixel(PIXELCOUNT, PIXELPIN, WS2812B);
   b4e14:	2302      	movs	r3, #2
   b4e16:	4629      	mov	r1, r5
   b4e18:	2207      	movs	r2, #7
   b4e1a:	481d      	ldr	r0, [pc, #116]	; (b4e90 <_GLOBAL__sub_I_hueOn+0x114>)
   b4e1c:	f000 fe9e 	bl	b5b5c <_ZN17Adafruit_NeoPixelC1Ethh>
Encoder myEnc(PINA,PINB);
   b4e20:	220f      	movs	r2, #15
   b4e22:	481c      	ldr	r0, [pc, #112]	; (b4e94 <_GLOBAL__sub_I_hueOn+0x118>)
   b4e24:	210e      	movs	r1, #14
   b4e26:	f7ff fab3 	bl	b4390 <_ZN7EncoderC1Ett>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4e2a:	4b1b      	ldr	r3, [pc, #108]	; (b4e98 <_GLOBAL__sub_I_hueOn+0x11c>)
   b4e2c:	2200      	movs	r2, #0
   b4e2e:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b4e32:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4e36:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4e38:	4620      	mov	r0, r4
}
   b4e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4e3e:	f001 bacb 	b.w	b63d8 <set_system_mode>
   b4e42:	bf00      	nop
   b4e44:	000b838f 	.word	0x000b838f
   b4e48:	2003e5d8 	.word	0x2003e5d8
   b4e4c:	2003e530 	.word	0x2003e530
   b4e50:	2003e514 	.word	0x2003e514
   b4e54:	2003e050 	.word	0x2003e050
   b4e58:	2003e4f8 	.word	0x2003e4f8
   b4e5c:	2003e058 	.word	0x2003e058
   b4e60:	2003e048 	.word	0x2003e048
   b4e64:	2003e044 	.word	0x2003e044
   b4e68:	2003e04c 	.word	0x2003e04c
   b4e6c:	2003e054 	.word	0x2003e054
   b4e70:	2003e540 	.word	0x2003e540
   b4e74:	2003e574 	.word	0x2003e574
   b4e78:	2003e57c 	.word	0x2003e57c
   b4e7c:	2003e584 	.word	0x2003e584
   b4e80:	2003e58c 	.word	0x2003e58c
   b4e84:	2003e594 	.word	0x2003e594
   b4e88:	2003e59c 	.word	0x2003e59c
   b4e8c:	2003e5ac 	.word	0x2003e5ac
   b4e90:	2003e610 	.word	0x2003e610
   b4e94:	2003e5f0 	.word	0x2003e5f0
   b4e98:	2003e534 	.word	0x2003e534

000b4e9c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b4e9c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b4e9e:	4c0b      	ldr	r4, [pc, #44]	; (b4ecc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b4ea0:	7821      	ldrb	r1, [r4, #0]
   b4ea2:	f3bf 8f5b 	dmb	ish
   b4ea6:	f011 0101 	ands.w	r1, r1, #1
   b4eaa:	d10b      	bne.n	b4ec4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4eac:	4620      	mov	r0, r4
   b4eae:	9101      	str	r1, [sp, #4]
   b4eb0:	f7ff f902 	bl	b40b8 <__cxa_guard_acquire>
   b4eb4:	9901      	ldr	r1, [sp, #4]
   b4eb6:	b128      	cbz	r0, b4ec4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4eb8:	4805      	ldr	r0, [pc, #20]	; (b4ed0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4eba:	f001 fe69 	bl	b6b90 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4ebe:	4620      	mov	r0, r4
   b4ec0:	f7ff f8ff 	bl	b40c2 <__cxa_guard_release>
        return instance;
    }
   b4ec4:	4802      	ldr	r0, [pc, #8]	; (b4ed0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4ec6:	b002      	add	sp, #8
   b4ec8:	bd10      	pop	{r4, pc}
   b4eca:	bf00      	nop
   b4ecc:	2003e624 	.word	0x2003e624
   b4ed0:	2003e628 	.word	0x2003e628

000b4ed4 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b4ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4ed8:	b085      	sub	sp, #20
   b4eda:	461f      	mov	r7, r3
   b4edc:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b4ee0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b4ee4:	eba8 0902 	sub.w	r9, r8, r2
   b4ee8:	eba7 0a01 	sub.w	sl, r7, r1
   b4eec:	f1b9 0f00 	cmp.w	r9, #0
   b4ef0:	bfb8      	it	lt
   b4ef2:	f1c9 0900 	rsblt	r9, r9, #0
   b4ef6:	f1ba 0f00 	cmp.w	sl, #0
   b4efa:	bfb8      	it	lt
   b4efc:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b4f00:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b4f02:	4683      	mov	fp, r0
   b4f04:	460c      	mov	r4, r1
   b4f06:	4615      	mov	r5, r2
  if (steep) {
   b4f08:	dd04      	ble.n	b4f14 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b4f0a:	463a      	mov	r2, r7
    swap(x0, y0);
   b4f0c:	462c      	mov	r4, r5
    swap(x1, y1);
   b4f0e:	4647      	mov	r7, r8
    swap(x0, y0);
   b4f10:	460d      	mov	r5, r1
    swap(x1, y1);
   b4f12:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b4f14:	42bc      	cmp	r4, r7
   b4f16:	dd05      	ble.n	b4f24 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b4f18:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b4f1a:	4645      	mov	r5, r8
   b4f1c:	4690      	mov	r8, r2
  if (x0 > x1) {
   b4f1e:	4622      	mov	r2, r4
   b4f20:	463c      	mov	r4, r7
   b4f22:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b4f24:	1b3e      	subs	r6, r7, r4
   b4f26:	b2b2      	uxth	r2, r6
   b4f28:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b4f2a:	eba8 0205 	sub.w	r2, r8, r5
   b4f2e:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b4f32:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b4f36:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b4f3a:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b4f3e:	4545      	cmp	r5, r8
   b4f40:	bfb4      	ite	lt
   b4f42:	2201      	movlt	r2, #1
   b4f44:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
  dy = abs(y1 - y0);
   b4f48:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b4f4a:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b4f4c:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b4f4e:	42bc      	cmp	r4, r7
   b4f50:	dc1c      	bgt.n	b4f8c <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b4f52:	f8db 2000 	ldr.w	r2, [fp]
   b4f56:	9303      	str	r3, [sp, #12]
    if (steep) {
   b4f58:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b4f5a:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b4f5e:	bfc7      	ittee	gt
   b4f60:	4629      	movgt	r1, r5
   b4f62:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b4f64:	462a      	movle	r2, r5
   b4f66:	4621      	movle	r1, r4
   b4f68:	4658      	mov	r0, fp
   b4f6a:	47c0      	blx	r8
    }
    err -= dy;
   b4f6c:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b4f6e:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b4f70:	1ab6      	subs	r6, r6, r2
   b4f72:	b2b1      	uxth	r1, r6
   b4f74:	b236      	sxth	r6, r6
    if (err < 0) {
   b4f76:	2e00      	cmp	r6, #0
   b4f78:	da05      	bge.n	b4f86 <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b4f7a:	9a02      	ldr	r2, [sp, #8]
   b4f7c:	4415      	add	r5, r2
      err += dx;
   b4f7e:	9a00      	ldr	r2, [sp, #0]
   b4f80:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b4f82:	b22d      	sxth	r5, r5
      err += dx;
   b4f84:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b4f86:	3401      	adds	r4, #1
   b4f88:	b224      	sxth	r4, r4
   b4f8a:	e7e0      	b.n	b4f4e <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b4f8c:	b005      	add	sp, #20
   b4f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4f92 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b4f92:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4f96:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b4f9a:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b4f9c:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b4fa0:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b4fa4:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b4fa6:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b4fa8:	4616      	mov	r6, r2
   b4faa:	468a      	mov	sl, r1
   b4fac:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b4fae:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b4fb0:	6823      	ldr	r3, [r4, #0]
   b4fb2:	f8cd 8000 	str.w	r8, [sp]
   b4fb6:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b4fba:	4432      	add	r2, r6
   b4fbc:	69df      	ldr	r7, [r3, #28]
   b4fbe:	4651      	mov	r1, sl
   b4fc0:	462b      	mov	r3, r5
   b4fc2:	4620      	mov	r0, r4
   b4fc4:	b212      	sxth	r2, r2
   b4fc6:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b4fc8:	6823      	ldr	r3, [r4, #0]
   b4fca:	f8cd 8000 	str.w	r8, [sp]
   b4fce:	699f      	ldr	r7, [r3, #24]
   b4fd0:	4632      	mov	r2, r6
   b4fd2:	464b      	mov	r3, r9
   b4fd4:	4651      	mov	r1, sl
   b4fd6:	4620      	mov	r0, r4
   b4fd8:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b4fda:	1e6b      	subs	r3, r5, #1
   b4fdc:	eb03 010a 	add.w	r1, r3, sl
   b4fe0:	6823      	ldr	r3, [r4, #0]
   b4fe2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b4fe6:	699d      	ldr	r5, [r3, #24]
   b4fe8:	4632      	mov	r2, r6
   b4fea:	464b      	mov	r3, r9
   b4fec:	b209      	sxth	r1, r1
   b4fee:	4620      	mov	r0, r4
   b4ff0:	46ac      	mov	ip, r5
}
   b4ff2:	b002      	add	sp, #8
   b4ff4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b4ff8:	4760      	bx	ip

000b4ffa <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b4ffa:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b4ffc:	3b01      	subs	r3, #1
   b4ffe:	4413      	add	r3, r2
   b5000:	6804      	ldr	r4, [r0, #0]
   b5002:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b5006:	9501      	str	r5, [sp, #4]
   b5008:	b21b      	sxth	r3, r3
   b500a:	9300      	str	r3, [sp, #0]
   b500c:	6964      	ldr	r4, [r4, #20]
   b500e:	460b      	mov	r3, r1
   b5010:	47a0      	blx	r4
}
   b5012:	b003      	add	sp, #12
   b5014:	bd30      	pop	{r4, r5, pc}

000b5016 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b5016:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b5018:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b501c:	6804      	ldr	r4, [r0, #0]
   b501e:	e9cd 2500 	strd	r2, r5, [sp]
   b5022:	3b01      	subs	r3, #1
   b5024:	440b      	add	r3, r1
   b5026:	6964      	ldr	r4, [r4, #20]
   b5028:	b21b      	sxth	r3, r3
   b502a:	47a0      	blx	r4
}
   b502c:	b003      	add	sp, #12
   b502e:	bd30      	pop	{r4, r5, pc}

000b5030 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b5030:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5034:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b5038:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b503c:	4605      	mov	r5, r0
   b503e:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b5040:	460c      	mov	r4, r1
   b5042:	18ce      	adds	r6, r1, r3
   b5044:	42b4      	cmp	r4, r6
   b5046:	da0b      	bge.n	b5060 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b5048:	682b      	ldr	r3, [r5, #0]
   b504a:	f8cd 8000 	str.w	r8, [sp]
   b504e:	699f      	ldr	r7, [r3, #24]
   b5050:	4621      	mov	r1, r4
   b5052:	464b      	mov	r3, r9
   b5054:	4652      	mov	r2, sl
   b5056:	4628      	mov	r0, r5
   b5058:	3401      	adds	r4, #1
   b505a:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b505c:	b224      	sxth	r4, r4
   b505e:	e7f1      	b.n	b5044 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b5060:	b002      	add	sp, #8
   b5062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b5066 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b5066:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b5068:	6802      	ldr	r2, [r0, #0]
   b506a:	9101      	str	r1, [sp, #4]
   b506c:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b5070:	9100      	str	r1, [sp, #0]
   b5072:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b5074:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5078:	2200      	movs	r2, #0
   b507a:	4611      	mov	r1, r2
   b507c:	47a0      	blx	r4
}
   b507e:	b002      	add	sp, #8
   b5080:	bd10      	pop	{r4, pc}

000b5082 <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b5082:	4770      	bx	lr

000b5084 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b5084:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b5086:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b5088:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b508a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    Print() : write_error(0) {}
   b508e:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b5090:	4d05      	ldr	r5, [pc, #20]	; (b50a8 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b5092:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b5094:	2201      	movs	r2, #1
   b5096:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b5098:	6005      	str	r5, [r0, #0]
   b509a:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b509c:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b509e:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b50a0:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b50a2:	7682      	strb	r2, [r0, #26]
}
   b50a4:	bd30      	pop	{r4, r5, pc}
   b50a6:	bf00      	nop
   b50a8:	000b8998 	.word	0x000b8998

000b50ac <_ZN12Adafruit_GFX10drawCircleEssst>:
    uint16_t color) {
   b50ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int16_t f = 1 - r;
   b50b0:	b29d      	uxth	r5, r3
    uint16_t color) {
   b50b2:	4691      	mov	r9, r2
  int16_t f = 1 - r;
   b50b4:	f1c5 0201 	rsb	r2, r5, #1
    uint16_t color) {
   b50b8:	b087      	sub	sp, #28
   b50ba:	461f      	mov	r7, r3
  int16_t f = 1 - r;
   b50bc:	b213      	sxth	r3, r2
  int16_t ddF_y = -2 * r;
   b50be:	ebc5 32c5 	rsb	r2, r5, r5, lsl #15
   b50c2:	0052      	lsls	r2, r2, #1
  int16_t f = 1 - r;
   b50c4:	9301      	str	r3, [sp, #4]
  int16_t ddF_y = -2 * r;
   b50c6:	b213      	sxth	r3, r2
   b50c8:	9304      	str	r3, [sp, #16]
  drawPixel(x0  , y0+r, color);
   b50ca:	fa1f f389 	uxth.w	r3, r9
    uint16_t color) {
   b50ce:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
  drawPixel(x0  , y0+r, color);
   b50d2:	9300      	str	r3, [sp, #0]
   b50d4:	6803      	ldr	r3, [r0, #0]
   b50d6:	fa15 f289 	uxtah	r2, r5, r9
    uint16_t color) {
   b50da:	4604      	mov	r4, r0
  drawPixel(x0  , y0+r, color);
   b50dc:	f8d3 8010 	ldr.w	r8, [r3, #16]
   b50e0:	b212      	sxth	r2, r2
   b50e2:	465b      	mov	r3, fp
    uint16_t color) {
   b50e4:	460e      	mov	r6, r1
  drawPixel(x0  , y0+r, color);
   b50e6:	47c0      	blx	r8
  drawPixel(x0  , y0-r, color);
   b50e8:	9b00      	ldr	r3, [sp, #0]
   b50ea:	6821      	ldr	r1, [r4, #0]
   b50ec:	1b5a      	subs	r2, r3, r5
   b50ee:	f8d1 8010 	ldr.w	r8, [r1, #16]
   b50f2:	465b      	mov	r3, fp
   b50f4:	4631      	mov	r1, r6
   b50f6:	b212      	sxth	r2, r2
   b50f8:	4620      	mov	r0, r4
   b50fa:	47c0      	blx	r8
  drawPixel(x0+r, y0  , color);
   b50fc:	6822      	ldr	r2, [r4, #0]
   b50fe:	fa15 f186 	uxtah	r1, r5, r6
   b5102:	fa1f f886 	uxth.w	r8, r6
   b5106:	465b      	mov	r3, fp
   b5108:	6916      	ldr	r6, [r2, #16]
   b510a:	b209      	sxth	r1, r1
   b510c:	464a      	mov	r2, r9
   b510e:	4620      	mov	r0, r4
   b5110:	47b0      	blx	r6
  drawPixel(x0-r, y0  , color);
   b5112:	6822      	ldr	r2, [r4, #0]
   b5114:	eba8 0105 	sub.w	r1, r8, r5
   b5118:	6916      	ldr	r6, [r2, #16]
   b511a:	465b      	mov	r3, fp
   b511c:	464a      	mov	r2, r9
   b511e:	b209      	sxth	r1, r1
   b5120:	4620      	mov	r0, r4
   b5122:	47b0      	blx	r6
  int16_t x = 0;
   b5124:	2300      	movs	r3, #0
   b5126:	9303      	str	r3, [sp, #12]
  while (x<y) {
   b5128:	9b03      	ldr	r3, [sp, #12]
   b512a:	42bb      	cmp	r3, r7
   b512c:	da76      	bge.n	b521c <_ZN12Adafruit_GFX10drawCircleEssst+0x170>
    if (f >= 0) {
   b512e:	9b01      	ldr	r3, [sp, #4]
   b5130:	2b00      	cmp	r3, #0
   b5132:	db0a      	blt.n	b514a <_ZN12Adafruit_GFX10drawCircleEssst+0x9e>
      ddF_y += 2;
   b5134:	9a04      	ldr	r2, [sp, #16]
   b5136:	3202      	adds	r2, #2
   b5138:	b213      	sxth	r3, r2
   b513a:	9304      	str	r3, [sp, #16]
      f += ddF_y;
   b513c:	9b01      	ldr	r3, [sp, #4]
   b513e:	fa13 f282 	uxtah	r2, r3, r2
      y--;
   b5142:	3f01      	subs	r7, #1
      f += ddF_y;
   b5144:	b213      	sxth	r3, r2
      y--;
   b5146:	b23f      	sxth	r7, r7
      f += ddF_y;
   b5148:	9301      	str	r3, [sp, #4]
    x++;
   b514a:	9a03      	ldr	r2, [sp, #12]
    drawPixel(x0 + x, y0 + y, color);
   b514c:	6821      	ldr	r1, [r4, #0]
   b514e:	3201      	adds	r2, #1
   b5150:	b213      	sxth	r3, r2
   b5152:	9303      	str	r3, [sp, #12]
    ddF_x += 2;
   b5154:	9b01      	ldr	r3, [sp, #4]
    drawPixel(x0 + x, y0 + y, color);
   b5156:	690d      	ldr	r5, [r1, #16]
   b5158:	b296      	uxth	r6, r2
    ddF_x += 2;
   b515a:	eb03 0246 	add.w	r2, r3, r6, lsl #1
    f += ddF_x;
   b515e:	3201      	adds	r2, #1
   b5160:	b213      	sxth	r3, r2
   b5162:	9301      	str	r3, [sp, #4]
    drawPixel(x0 + x, y0 + y, color);
   b5164:	9b00      	ldr	r3, [sp, #0]
   b5166:	eb08 0a06 	add.w	sl, r8, r6
   b516a:	fa13 f287 	uxtah	r2, r3, r7
   b516e:	fa0f fa8a 	sxth.w	sl, sl
   b5172:	b212      	sxth	r2, r2
   b5174:	465b      	mov	r3, fp
   b5176:	9202      	str	r2, [sp, #8]
   b5178:	4651      	mov	r1, sl
   b517a:	4620      	mov	r0, r4
   b517c:	47a8      	blx	r5
    drawPixel(x0 - x, y0 + y, color);
   b517e:	eba8 0906 	sub.w	r9, r8, r6
   b5182:	6821      	ldr	r1, [r4, #0]
   b5184:	9a02      	ldr	r2, [sp, #8]
   b5186:	690d      	ldr	r5, [r1, #16]
   b5188:	fa0f f989 	sxth.w	r9, r9
   b518c:	465b      	mov	r3, fp
   b518e:	4649      	mov	r1, r9
   b5190:	4620      	mov	r0, r4
   b5192:	47a8      	blx	r5
    drawPixel(x0 + x, y0 - y, color);
   b5194:	b2bb      	uxth	r3, r7
   b5196:	9302      	str	r3, [sp, #8]
   b5198:	6821      	ldr	r1, [r4, #0]
   b519a:	9b00      	ldr	r3, [sp, #0]
   b519c:	9a02      	ldr	r2, [sp, #8]
   b519e:	1a9a      	subs	r2, r3, r2
   b51a0:	690b      	ldr	r3, [r1, #16]
   b51a2:	b212      	sxth	r2, r2
   b51a4:	461d      	mov	r5, r3
   b51a6:	9205      	str	r2, [sp, #20]
   b51a8:	465b      	mov	r3, fp
   b51aa:	4651      	mov	r1, sl
   b51ac:	4620      	mov	r0, r4
   b51ae:	47a8      	blx	r5
    drawPixel(x0 - x, y0 - y, color);
   b51b0:	6821      	ldr	r1, [r4, #0]
   b51b2:	9a05      	ldr	r2, [sp, #20]
   b51b4:	f8d1 a010 	ldr.w	sl, [r1, #16]
   b51b8:	465b      	mov	r3, fp
   b51ba:	4649      	mov	r1, r9
   b51bc:	4620      	mov	r0, r4
   b51be:	47d0      	blx	sl
    drawPixel(x0 + y, y0 + x, color);
   b51c0:	9b02      	ldr	r3, [sp, #8]
   b51c2:	6821      	ldr	r1, [r4, #0]
   b51c4:	eb08 0903 	add.w	r9, r8, r3
   b51c8:	9b00      	ldr	r3, [sp, #0]
   b51ca:	f8d1 a010 	ldr.w	sl, [r1, #16]
   b51ce:	199a      	adds	r2, r3, r6
   b51d0:	fa0f f989 	sxth.w	r9, r9
   b51d4:	b212      	sxth	r2, r2
   b51d6:	465b      	mov	r3, fp
   b51d8:	9205      	str	r2, [sp, #20]
   b51da:	4649      	mov	r1, r9
   b51dc:	4620      	mov	r0, r4
   b51de:	47d0      	blx	sl
    drawPixel(x0 - y, y0 + x, color);
   b51e0:	9b02      	ldr	r3, [sp, #8]
   b51e2:	6821      	ldr	r1, [r4, #0]
   b51e4:	9a05      	ldr	r2, [sp, #20]
   b51e6:	f8d1 a010 	ldr.w	sl, [r1, #16]
   b51ea:	eba8 0503 	sub.w	r5, r8, r3
   b51ee:	b22d      	sxth	r5, r5
   b51f0:	465b      	mov	r3, fp
   b51f2:	4629      	mov	r1, r5
   b51f4:	4620      	mov	r0, r4
   b51f6:	47d0      	blx	sl
    drawPixel(x0 + y, y0 - x, color);
   b51f8:	9b00      	ldr	r3, [sp, #0]
   b51fa:	6821      	ldr	r1, [r4, #0]
   b51fc:	1b9a      	subs	r2, r3, r6
   b51fe:	b212      	sxth	r2, r2
   b5200:	690e      	ldr	r6, [r1, #16]
   b5202:	9202      	str	r2, [sp, #8]
   b5204:	465b      	mov	r3, fp
   b5206:	4649      	mov	r1, r9
   b5208:	4620      	mov	r0, r4
   b520a:	47b0      	blx	r6
    drawPixel(x0 - y, y0 - x, color);
   b520c:	6821      	ldr	r1, [r4, #0]
   b520e:	9a02      	ldr	r2, [sp, #8]
   b5210:	690e      	ldr	r6, [r1, #16]
   b5212:	465b      	mov	r3, fp
   b5214:	4629      	mov	r1, r5
   b5216:	4620      	mov	r0, r4
   b5218:	47b0      	blx	r6
  while (x<y) {
   b521a:	e785      	b.n	b5128 <_ZN12Adafruit_GFX10drawCircleEssst+0x7c>
}
   b521c:	b007      	add	sp, #28
   b521e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000b5224 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b5224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5228:	ed2d 8b02 	vpush	{d8}
   b522c:	b08d      	sub	sp, #52	; 0x34
   b522e:	4607      	mov	r7, r0
   b5230:	9104      	str	r1, [sp, #16]
   b5232:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b5236:	9105      	str	r1, [sp, #20]
   b5238:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b523c:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b523e:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b5242:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b5244:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b5248:	4281      	cmp	r1, r0
   b524a:	dd52      	ble.n	b52f2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b524c:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b5250:	4291      	cmp	r1, r2
   b5252:	dd4e      	ble.n	b52f2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b5254:	2106      	movs	r1, #6
   b5256:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b525a:	2c00      	cmp	r4, #0
   b525c:	dd49      	ble.n	b52f2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b525e:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b5262:	2c00      	cmp	r4, #0
   b5264:	dd45      	ble.n	b52f2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b5266:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b526a:	930b      	str	r3, [sp, #44]	; 0x2c
   b526c:	b293      	uxth	r3, r2
   b526e:	9307      	str	r3, [sp, #28]
   b5270:	3308      	adds	r3, #8
   b5272:	b29b      	uxth	r3, r3
   b5274:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b5276:	2400      	movs	r4, #0
   b5278:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b527a:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b527c:	bf1c      	itt	ne
   b527e:	4b2c      	ldrne	r3, [pc, #176]	; (b5330 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b5280:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b5282:	9e07      	ldr	r6, [sp, #28]
   b5284:	bf16      	itet	ne
   b5286:	191b      	addne	r3, r3, r4
      line = 0x0;
   b5288:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b528a:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b528c:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b528e:	9a04      	ldr	r2, [sp, #16]
   b5290:	b2ab      	uxth	r3, r5
   b5292:	930a      	str	r3, [sp, #40]	; 0x28
   b5294:	fb04 f305 	mul.w	r3, r4, r5
   b5298:	fa13 f382 	uxtah	r3, r3, r2
   b529c:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b529e:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b52a2:	ee08 3a10 	vmov	s16, r3
   b52a6:	46b0      	mov	r8, r6
   b52a8:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b52ac:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b52b0:	9b03      	ldr	r3, [sp, #12]
   b52b2:	07db      	lsls	r3, r3, #31
   b52b4:	d52f      	bpl.n	b5316 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b52b6:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b52b8:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b52ba:	d11f      	bne.n	b52fc <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b52bc:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b52c0:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b52c2:	b232      	sxth	r2, r6
   b52c4:	4651      	mov	r1, sl
   b52c6:	4638      	mov	r0, r7
   b52c8:	47d8      	blx	fp
      line >>= 1;
   b52ca:	9b03      	ldr	r3, [sp, #12]
   b52cc:	085b      	lsrs	r3, r3, #1
   b52ce:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b52d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b52d2:	3601      	adds	r6, #1
   b52d4:	4498      	add	r8, r3
   b52d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b52d8:	b2b6      	uxth	r6, r6
   b52da:	42b3      	cmp	r3, r6
   b52dc:	fa1f f888 	uxth.w	r8, r8
   b52e0:	d1e6      	bne.n	b52b0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b52e2:	9b08      	ldr	r3, [sp, #32]
   b52e4:	3b01      	subs	r3, #1
   b52e6:	3401      	adds	r4, #1
   b52e8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b52ec:	b264      	sxtb	r4, r4
   b52ee:	9308      	str	r3, [sp, #32]
   b52f0:	d1c3      	bne.n	b527a <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b52f2:	b00d      	add	sp, #52	; 0x34
   b52f4:	ecbd 8b02 	vpop	{d8}
   b52f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b52fc:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b52fe:	e9cd 9200 	strd	r9, r2, [sp]
   b5302:	ee18 1a10 	vmov	r1, s16
   b5306:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b530a:	fa0f f288 	sxth.w	r2, r8
   b530e:	464b      	mov	r3, r9
   b5310:	4638      	mov	r0, r7
   b5312:	47d8      	blx	fp
   b5314:	e7d9      	b.n	b52ca <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b5316:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b531a:	4293      	cmp	r3, r2
   b531c:	d0d5      	beq.n	b52ca <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b531e:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b5320:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b5322:	d103      	bne.n	b532c <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b5324:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b5328:	9b06      	ldr	r3, [sp, #24]
   b532a:	e7ca      	b.n	b52c2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b532c:	9a06      	ldr	r2, [sp, #24]
   b532e:	e7e6      	b.n	b52fe <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b5330:	000b8492 	.word	0x000b8492

000b5334 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b5334:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b5336:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b5338:	b085      	sub	sp, #20
   b533a:	4604      	mov	r4, r0
  if (c == '\n') {
   b533c:	d107      	bne.n	b534e <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b533e:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b5340:	8a63      	ldrh	r3, [r4, #18]
   b5342:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b5346:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b5348:	2300      	movs	r3, #0
   b534a:	8223      	strh	r3, [r4, #16]
   b534c:	e021      	b.n	b5392 <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b534e:	290d      	cmp	r1, #13
   b5350:	d01f      	beq.n	b5392 <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b5352:	7e03      	ldrb	r3, [r0, #24]
   b5354:	9302      	str	r3, [sp, #8]
   b5356:	8ac3      	ldrh	r3, [r0, #22]
   b5358:	9301      	str	r3, [sp, #4]
   b535a:	8a83      	ldrh	r3, [r0, #20]
   b535c:	9300      	str	r3, [sp, #0]
   b535e:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b5362:	460b      	mov	r3, r1
   b5364:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b5368:	f7ff ff5c 	bl	b5224 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b536c:	7e20      	ldrb	r0, [r4, #24]
   b536e:	8a23      	ldrh	r3, [r4, #16]
   b5370:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b5374:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b5378:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b537a:	b21b      	sxth	r3, r3
   b537c:	4602      	mov	r2, r0
   b537e:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b5380:	b139      	cbz	r1, b5392 <_ZN12Adafruit_GFX5writeEh+0x5e>
   b5382:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b5386:	f06f 0505 	mvn.w	r5, #5
   b538a:	fb05 1100 	mla	r1, r5, r0, r1
   b538e:	428b      	cmp	r3, r1
   b5390:	dcd6      	bgt.n	b5340 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b5392:	2001      	movs	r0, #1
   b5394:	b005      	add	sp, #20
   b5396:	bd30      	pop	{r4, r5, pc}

000b5398 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   b5398:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   b539a:	8242      	strh	r2, [r0, #18]
}
   b539c:	4770      	bx	lr

000b539e <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b539e:	2901      	cmp	r1, #1
   b53a0:	bf38      	it	cc
   b53a2:	2101      	movcc	r1, #1
   b53a4:	7601      	strb	r1, [r0, #24]
}
   b53a6:	4770      	bx	lr

000b53a8 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   b53a8:	82c1      	strh	r1, [r0, #22]
   b53aa:	8281      	strh	r1, [r0, #20]
}
   b53ac:	4770      	bx	lr

000b53ae <_ZN12Adafruit_GFX11getRotationEv>:
}
   b53ae:	7e40      	ldrb	r0, [r0, #25]
   b53b0:	4770      	bx	lr

000b53b2 <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
   b53b2:	f001 0303 	and.w	r3, r1, #3
    _height = HEIGHT;
   b53b6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
  rotation = (x & 3);
   b53ba:	7643      	strb	r3, [r0, #25]
  switch(rotation) {
   b53bc:	07c9      	lsls	r1, r1, #31
    _width  = WIDTH;
   b53be:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b53c2:	bf59      	ittee	pl
   b53c4:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
   b53c6:	81c2      	strhpl	r2, [r0, #14]
    _width  = HEIGHT;
   b53c8:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
   b53ca:	81c3      	strhmi	r3, [r0, #14]
}
   b53cc:	4770      	bx	lr

000b53ce <_ZN12Adafruit_GFX5widthEv>:
}
   b53ce:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b53d2:	4770      	bx	lr

000b53d4 <_ZN12Adafruit_GFX6heightEv>:
}
   b53d4:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b53d8:	4770      	bx	lr
	...

000b53dc <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b53dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b53de:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b53e0:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b53e4:	2d02      	cmp	r5, #2
   b53e6:	d069      	beq.n	b54bc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b53e8:	2d03      	cmp	r5, #3
   b53ea:	f000 8099 	beq.w	b5520 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b53ee:	2d01      	cmp	r5, #1
   b53f0:	d16c      	bne.n	b54cc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b53f2:	8905      	ldrh	r5, [r0, #8]
   b53f4:	43d2      	mvns	r2, r2
   b53f6:	442a      	add	r2, r5
   b53f8:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b53fa:	2a00      	cmp	r2, #0
   b53fc:	db5d      	blt.n	b54ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b53fe:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b5402:	4295      	cmp	r5, r2
   b5404:	dd59      	ble.n	b54ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b5406:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b5408:	bfbe      	ittt	lt
   b540a:	185b      	addlt	r3, r3, r1
   b540c:	b21b      	sxthlt	r3, r3
    __y = 0;
   b540e:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b5410:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b5414:	18cd      	adds	r5, r1, r3
   b5416:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b5418:	bfc4      	itt	gt
   b541a:	1a43      	subgt	r3, r0, r1
   b541c:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b541e:	2b00      	cmp	r3, #0
   b5420:	dd4b      	ble.n	b54ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b5422:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b5426:	f8df c120 	ldr.w	ip, [pc, #288]	; b5548 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b542a:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b542e:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b5432:	b2db      	uxtb	r3, r3
  pBuf += x;
   b5434:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b5438:	d01a      	beq.n	b5470 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b543a:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b543e:	4e40      	ldr	r6, [pc, #256]	; (b5540 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b5440:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b5442:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b5444:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b5446:	bf3f      	itttt	cc
   b5448:	eba5 0e03 	subcc.w	lr, r5, r3
   b544c:	26ff      	movcc	r6, #255	; 0xff
   b544e:	fa46 f60e 	asrcc.w	r6, r6, lr
   b5452:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b5454:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b5458:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b545a:	bf0c      	ite	eq
   b545c:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b545e:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b5460:	42ab      	cmp	r3, r5
   b5462:	f80c 6002 	strb.w	r6, [ip, r2]
   b5466:	d328      	bcc.n	b54ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b5468:	3908      	subs	r1, #8
   b546a:	440b      	add	r3, r1
   b546c:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b546e:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b5470:	2b07      	cmp	r3, #7
   b5472:	d919      	bls.n	b54a8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b5474:	2c01      	cmp	r4, #1
   b5476:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b547a:	bf18      	it	ne
   b547c:	2500      	movne	r5, #0
   b547e:	b2ed      	uxtb	r5, r5
   b5480:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b5484:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b5486:	3a08      	subs	r2, #8
   b5488:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b548a:	2a07      	cmp	r2, #7
      *pBuf = val;
   b548c:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b5490:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b5494:	d8f7      	bhi.n	b5486 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b5496:	f1a3 0208 	sub.w	r2, r3, #8
   b549a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b549e:	3201      	adds	r2, #1
   b54a0:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b54a4:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b54a8:	b13b      	cbz	r3, b54ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b54aa:	4a26      	ldr	r2, [pc, #152]	; (b5544 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b54ac:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b54ae:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b54b0:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b54b2:	bf0c      	ite	eq
   b54b4:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b54b6:	4393      	bicne	r3, r2
   b54b8:	7003      	strb	r3, [r0, #0]
}
   b54ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b54bc:	8945      	ldrh	r5, [r0, #10]
   b54be:	43d2      	mvns	r2, r2
   b54c0:	442a      	add	r2, r5
      x -= (w-1);
   b54c2:	18cd      	adds	r5, r1, r3
   b54c4:	8901      	ldrh	r1, [r0, #8]
   b54c6:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b54c8:	b212      	sxth	r2, r2
      x -= (w-1);
   b54ca:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b54cc:	2a00      	cmp	r2, #0
   b54ce:	dbf4      	blt.n	b54ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b54d0:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b54d4:	4295      	cmp	r5, r2
   b54d6:	ddf0      	ble.n	b54ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b54d8:	2900      	cmp	r1, #0
    w += x;
   b54da:	bfbe      	ittt	lt
   b54dc:	185b      	addlt	r3, r3, r1
   b54de:	b21b      	sxthlt	r3, r3
    x = 0;
   b54e0:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b54e2:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b54e6:	18ce      	adds	r6, r1, r3
   b54e8:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b54ea:	bfc4      	itt	gt
   b54ec:	1a6b      	subgt	r3, r5, r1
   b54ee:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b54f0:	2b00      	cmp	r3, #0
   b54f2:	dde2      	ble.n	b54ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b54f4:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b54f6:	2580      	movs	r5, #128	; 0x80
   b54f8:	fb10 1105 	smlabb	r1, r0, r5, r1
   b54fc:	4812      	ldr	r0, [pc, #72]	; (b5548 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b54fe:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b5500:	f002 0007 	and.w	r0, r2, #7
   b5504:	2201      	movs	r2, #1
   b5506:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b5508:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b550a:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b550c:	440b      	add	r3, r1
   b550e:	d10c      	bne.n	b552a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b5510:	428b      	cmp	r3, r1
   b5512:	d0d2      	beq.n	b54ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5514:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5518:	4310      	orrs	r0, r2
   b551a:	f801 0c01 	strb.w	r0, [r1, #-1]
   b551e:	e7f7      	b.n	b5510 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b5520:	18cd      	adds	r5, r1, r3
   b5522:	8941      	ldrh	r1, [r0, #10]
   b5524:	1b49      	subs	r1, r1, r5
   b5526:	b209      	sxth	r1, r1
      break;
   b5528:	e767      	b.n	b53fa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b552a:	43d2      	mvns	r2, r2
   b552c:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b552e:	428b      	cmp	r3, r1
   b5530:	d0c3      	beq.n	b54ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5532:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5536:	4010      	ands	r0, r2
   b5538:	f801 0c01 	strb.w	r0, [r1, #-1]
   b553c:	e7f7      	b.n	b552e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b553e:	bf00      	nop
   b5540:	2003e07c 	.word	0x2003e07c
   b5544:	2003e074 	.word	0x2003e074
   b5548:	2003e084 	.word	0x2003e084

000b554c <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b554c:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b554e:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5550:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b5554:	2d02      	cmp	r5, #2
   b5556:	d034      	beq.n	b55c2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b5558:	2d03      	cmp	r5, #3
   b555a:	f000 809b 	beq.w	b5694 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b555e:	2d01      	cmp	r5, #1
   b5560:	d137      	bne.n	b55d2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b5562:	18d5      	adds	r5, r2, r3
   b5564:	8902      	ldrh	r2, [r0, #8]
   b5566:	1b52      	subs	r2, r2, r5
   b5568:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b556a:	2900      	cmp	r1, #0
   b556c:	f2c0 8091 	blt.w	b5692 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5570:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b5574:	428d      	cmp	r5, r1
   b5576:	f340 808c 	ble.w	b5692 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b557a:	2a00      	cmp	r2, #0
    w += x;
   b557c:	bfbe      	ittt	lt
   b557e:	189b      	addlt	r3, r3, r2
   b5580:	b21b      	sxthlt	r3, r3
    x = 0;
   b5582:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b5584:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b5588:	18d6      	adds	r6, r2, r3
   b558a:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b558c:	bfc4      	itt	gt
   b558e:	1aab      	subgt	r3, r5, r2
   b5590:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b5592:	2b00      	cmp	r3, #0
   b5594:	dd7d      	ble.n	b5692 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b5596:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b5598:	2580      	movs	r5, #128	; 0x80
   b559a:	fb10 2205 	smlabb	r2, r0, r5, r2
   b559e:	4845      	ldr	r0, [pc, #276]	; (b56b4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b55a0:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b55a2:	f001 0007 	and.w	r0, r1, #7
   b55a6:	2101      	movs	r1, #1
   b55a8:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b55aa:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b55ac:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b55ae:	4413      	add	r3, r2
   b55b0:	d175      	bne.n	b569e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b55b2:	429a      	cmp	r2, r3
   b55b4:	d06d      	beq.n	b5692 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b55b6:	f812 0b01 	ldrb.w	r0, [r2], #1
   b55ba:	4308      	orrs	r0, r1
   b55bc:	f802 0c01 	strb.w	r0, [r2, #-1]
   b55c0:	e7f7      	b.n	b55b2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b55c2:	8905      	ldrh	r5, [r0, #8]
   b55c4:	43c9      	mvns	r1, r1
   b55c6:	4429      	add	r1, r5
      y -= (h-1);
   b55c8:	18d5      	adds	r5, r2, r3
   b55ca:	8942      	ldrh	r2, [r0, #10]
   b55cc:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b55ce:	b209      	sxth	r1, r1
      y -= (h-1);
   b55d0:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b55d2:	2900      	cmp	r1, #0
   b55d4:	db5d      	blt.n	b5692 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b55d6:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b55da:	428d      	cmp	r5, r1
   b55dc:	dd59      	ble.n	b5692 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b55de:	2a00      	cmp	r2, #0
    __h += __y;
   b55e0:	bfbe      	ittt	lt
   b55e2:	189b      	addlt	r3, r3, r2
   b55e4:	b21b      	sxthlt	r3, r3
    __y = 0;
   b55e6:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b55e8:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b55ec:	18d5      	adds	r5, r2, r3
   b55ee:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b55f0:	bfc4      	itt	gt
   b55f2:	1a83      	subgt	r3, r0, r2
   b55f4:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b55f6:	2b00      	cmp	r3, #0
   b55f8:	dd4b      	ble.n	b5692 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b55fa:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b55fe:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b56b4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b5602:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b5606:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b560a:	b2db      	uxtb	r3, r3
  pBuf += x;
   b560c:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b5610:	d01a      	beq.n	b5648 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b5612:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b5616:	4e28      	ldr	r6, [pc, #160]	; (b56b8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b5618:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b561a:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b561c:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b561e:	bf3f      	itttt	cc
   b5620:	eba5 0e03 	subcc.w	lr, r5, r3
   b5624:	26ff      	movcc	r6, #255	; 0xff
   b5626:	fa46 f60e 	asrcc.w	r6, r6, lr
   b562a:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b562c:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b5630:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b5632:	bf0c      	ite	eq
   b5634:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b5636:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b5638:	42ab      	cmp	r3, r5
   b563a:	f80c 6001 	strb.w	r6, [ip, r1]
   b563e:	d328      	bcc.n	b5692 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b5640:	3a08      	subs	r2, #8
   b5642:	4413      	add	r3, r2
   b5644:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b5646:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b5648:	2b07      	cmp	r3, #7
   b564a:	d919      	bls.n	b5680 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b564c:	2c01      	cmp	r4, #1
   b564e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b5652:	bf18      	it	ne
   b5654:	2500      	movne	r5, #0
   b5656:	b2ed      	uxtb	r5, r5
   b5658:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b565c:	461a      	mov	r2, r3
      h -= 8;
   b565e:	3a08      	subs	r2, #8
   b5660:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b5662:	2a07      	cmp	r2, #7
      *pBuf = val;
   b5664:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b5668:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b566c:	d8f7      	bhi.n	b565e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b566e:	f1a3 0208 	sub.w	r2, r3, #8
   b5672:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b5676:	3201      	adds	r2, #1
   b5678:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b567c:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b5680:	b13b      	cbz	r3, b5692 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b5682:	4a0e      	ldr	r2, [pc, #56]	; (b56bc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b5684:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b5686:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b5688:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b568a:	bf0c      	ite	eq
   b568c:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b568e:	4393      	bicne	r3, r2
   b5690:	7003      	strb	r3, [r0, #0]
}
   b5692:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b5694:	8945      	ldrh	r5, [r0, #10]
   b5696:	43c9      	mvns	r1, r1
   b5698:	4429      	add	r1, r5
   b569a:	b209      	sxth	r1, r1
      break;
   b569c:	e765      	b.n	b556a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b569e:	43c9      	mvns	r1, r1
   b56a0:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b56a2:	429a      	cmp	r2, r3
   b56a4:	d0f5      	beq.n	b5692 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b56a6:	f812 0b01 	ldrb.w	r0, [r2], #1
   b56aa:	4008      	ands	r0, r1
   b56ac:	f802 0c01 	strb.w	r0, [r2, #-1]
   b56b0:	e7f7      	b.n	b56a2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b56b2:	bf00      	nop
   b56b4:	2003e084 	.word	0x2003e084
   b56b8:	2003e07c 	.word	0x2003e07c
   b56bc:	2003e074 	.word	0x2003e074

000b56c0 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b56c0:	4770      	bx	lr
	...

000b56c4 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b56c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b56c6:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b56c8:	4606      	mov	r6, r0
   b56ca:	4614      	mov	r4, r2
   b56cc:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b56ce:	db2d      	blt.n	b572c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b56d0:	f7ff fe7d 	bl	b53ce <_ZN12Adafruit_GFX5widthEv>
   b56d4:	42a8      	cmp	r0, r5
   b56d6:	dd29      	ble.n	b572c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b56d8:	2c00      	cmp	r4, #0
   b56da:	db27      	blt.n	b572c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b56dc:	4630      	mov	r0, r6
   b56de:	f7ff fe79 	bl	b53d4 <_ZN12Adafruit_GFX6heightEv>
   b56e2:	42a0      	cmp	r0, r4
   b56e4:	dd22      	ble.n	b572c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b56e6:	4630      	mov	r0, r6
   b56e8:	f7ff fe61 	bl	b53ae <_ZN12Adafruit_GFX11getRotationEv>
   b56ec:	2802      	cmp	r0, #2
   b56ee:	d01e      	beq.n	b572e <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b56f0:	2803      	cmp	r0, #3
   b56f2:	d025      	beq.n	b5740 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b56f4:	2801      	cmp	r0, #1
   b56f6:	d104      	bne.n	b5702 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b56f8:	8933      	ldrh	r3, [r6, #8]
   b56fa:	43e2      	mvns	r2, r4
   b56fc:	441a      	add	r2, r3
    break;
   b56fe:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b5700:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b5702:	2c00      	cmp	r4, #0
   b5704:	4622      	mov	r2, r4
   b5706:	bfb8      	it	lt
   b5708:	1de2      	addlt	r2, r4, #7
   b570a:	10d2      	asrs	r2, r2, #3
   b570c:	2180      	movs	r1, #128	; 0x80
   b570e:	fb12 5501 	smlabb	r5, r2, r1, r5
   b5712:	490e      	ldr	r1, [pc, #56]	; (b574c <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b5714:	2201      	movs	r2, #1
   b5716:	f004 0407 	and.w	r4, r4, #7
   b571a:	574b      	ldrsb	r3, [r1, r5]
   b571c:	fa02 f404 	lsl.w	r4, r2, r4
   b5720:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b5722:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b5724:	bf0c      	ite	eq
   b5726:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b5728:	43a3      	bicne	r3, r4
   b572a:	554b      	strb	r3, [r1, r5]
}
   b572c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b572e:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b5730:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b5732:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b5734:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b5736:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b5738:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b573a:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b573c:	b224      	sxth	r4, r4
    break;
   b573e:	e7e0      	b.n	b5702 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b5740:	8973      	ldrh	r3, [r6, #10]
   b5742:	3b01      	subs	r3, #1
   b5744:	1b5b      	subs	r3, r3, r5
    break;
   b5746:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b5748:	b21c      	sxth	r4, r3
    break;
   b574a:	e7da      	b.n	b5702 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b574c:	2003e084 	.word	0x2003e084

000b5750 <_ZN16Adafruit_SSD1306D0Ev>:
   b5750:	b510      	push	{r4, lr}
   b5752:	2124      	movs	r1, #36	; 0x24
   b5754:	4604      	mov	r4, r0
   b5756:	f7fe fca0 	bl	b409a <_ZdlPvj>
   b575a:	4620      	mov	r0, r4
   b575c:	bd10      	pop	{r4, pc}
	...

000b5760 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b5760:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b5762:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b5764:	4604      	mov	r4, r0
   b5766:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b5768:	2180      	movs	r1, #128	; 0x80
   b576a:	f7ff fc8b 	bl	b5084 <_ZN12Adafruit_GFXC1Ess>
   b576e:	4b06      	ldr	r3, [pc, #24]	; (b5788 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b5770:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b5772:	23ff      	movs	r3, #255	; 0xff
   b5774:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b5778:	7763      	strb	r3, [r4, #29]
   b577a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b577e:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b5780:	f884 5020 	strb.w	r5, [r4, #32]
}
   b5784:	4620      	mov	r0, r4
   b5786:	bd38      	pop	{r3, r4, r5, pc}
   b5788:	000b89d0 	.word	0x000b89d0

000b578c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b578c:	4802      	ldr	r0, [pc, #8]	; (b5798 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b578e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b5792:	2100      	movs	r1, #0
   b5794:	f002 bb16 	b.w	b7dc4 <memset>
   b5798:	2003e084 	.word	0x2003e084

000b579c <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b579c:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b579e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b57a2:	b143      	cbz	r3, b57b6 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b57a4:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b57a6:	f7ff fb79 	bl	b4e9c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b57aa:	9901      	ldr	r1, [sp, #4]
}
   b57ac:	b003      	add	sp, #12
   b57ae:	f85d eb04 	ldr.w	lr, [sp], #4
   b57b2:	f001 baa1 	b.w	b6cf8 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b57b6:	460b      	mov	r3, r1
   b57b8:	7f81      	ldrb	r1, [r0, #30]
   b57ba:	7f40      	ldrb	r0, [r0, #29]
   b57bc:	2201      	movs	r2, #1
}
   b57be:	b003      	add	sp, #12
   b57c0:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b57c4:	f002 b931 	b.w	b7a2a <shiftOut>

000b57c8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b57c8:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b57ca:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b57ce:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b57d0:	4604      	mov	r4, r0
   b57d2:	460d      	mov	r5, r1
  if (sid != -1)
   b57d4:	d01d      	beq.n	b5812 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b57d6:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b57da:	2101      	movs	r1, #1
   b57dc:	b280      	uxth	r0, r0
   b57de:	f002 f8f8 	bl	b79d2 <digitalWrite>
    digitalWrite(dc, LOW);
   b57e2:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b57e6:	2100      	movs	r1, #0
   b57e8:	b280      	uxth	r0, r0
   b57ea:	f002 f8f2 	bl	b79d2 <digitalWrite>
    digitalWrite(cs, LOW);
   b57ee:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b57f2:	2100      	movs	r1, #0
   b57f4:	b280      	uxth	r0, r0
   b57f6:	f002 f8ec 	bl	b79d2 <digitalWrite>
    fastSPIwrite(c);
   b57fa:	4629      	mov	r1, r5
   b57fc:	4620      	mov	r0, r4
   b57fe:	f7ff ffcd 	bl	b579c <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b5802:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5806:	2101      	movs	r1, #1
}
   b5808:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b580c:	b280      	uxth	r0, r0
   b580e:	f002 b8e0 	b.w	b79d2 <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b5812:	f002 f947 	bl	b7aa4 <_Z19__fetch_global_Wirev>
   b5816:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b581a:	f000 ff63 	bl	b66e4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b581e:	f002 f941 	bl	b7aa4 <_Z19__fetch_global_Wirev>
   b5822:	6803      	ldr	r3, [r0, #0]
   b5824:	2100      	movs	r1, #0
   b5826:	689b      	ldr	r3, [r3, #8]
   b5828:	4798      	blx	r3
    Wire.write(c);
   b582a:	f002 f93b 	bl	b7aa4 <_Z19__fetch_global_Wirev>
   b582e:	6803      	ldr	r3, [r0, #0]
   b5830:	4629      	mov	r1, r5
   b5832:	689b      	ldr	r3, [r3, #8]
   b5834:	4798      	blx	r3
    Wire.endTransmission();
   b5836:	f002 f935 	bl	b7aa4 <_Z19__fetch_global_Wirev>
}
   b583a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b583e:	f000 bf58 	b.w	b66f2 <_ZN7TwoWire15endTransmissionEv>
	...

000b5844 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b5844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b5846:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b5848:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b584a:	f7ff ffbd 	bl	b57c8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b584e:	2100      	movs	r1, #0
   b5850:	4620      	mov	r0, r4
   b5852:	f7ff ffb9 	bl	b57c8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b5856:	217f      	movs	r1, #127	; 0x7f
   b5858:	4620      	mov	r0, r4
   b585a:	f7ff ffb5 	bl	b57c8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b585e:	2122      	movs	r1, #34	; 0x22
   b5860:	4620      	mov	r0, r4
   b5862:	f7ff ffb1 	bl	b57c8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b5866:	2100      	movs	r1, #0
   b5868:	4620      	mov	r0, r4
   b586a:	f7ff ffad 	bl	b57c8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b586e:	2107      	movs	r1, #7
   b5870:	4620      	mov	r0, r4
   b5872:	f7ff ffa9 	bl	b57c8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b5876:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b587a:	4f29      	ldr	r7, [pc, #164]	; (b5920 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b587c:	3301      	adds	r3, #1
   b587e:	d02a      	beq.n	b58d6 <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b5880:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5884:	2101      	movs	r1, #1
   b5886:	b280      	uxth	r0, r0
   b5888:	f002 f8a3 	bl	b79d2 <digitalWrite>
    digitalWrite(dc, HIGH);
   b588c:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b5890:	2101      	movs	r1, #1
   b5892:	b280      	uxth	r0, r0
   b5894:	f002 f89d 	bl	b79d2 <digitalWrite>
    digitalWrite(cs, LOW);
   b5898:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b589c:	2100      	movs	r1, #0
   b589e:	b280      	uxth	r0, r0
   b58a0:	f002 f897 	bl	b79d2 <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b58a4:	2001      	movs	r0, #1
   b58a6:	f000 fb9f 	bl	b5fe8 <HAL_Delay_Microseconds>
   b58aa:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b58ae:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b58b0:	f817 1b01 	ldrb.w	r1, [r7], #1
   b58b4:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b58b6:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b58b8:	f7ff ff70 	bl	b579c <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b58bc:	2d00      	cmp	r5, #0
   b58be:	d1f6      	bne.n	b58ae <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b58c0:	2001      	movs	r0, #1
   b58c2:	f000 fb91 	bl	b5fe8 <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b58c6:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b58ca:	2101      	movs	r1, #1
}
   b58cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b58d0:	b280      	uxth	r0, r0
   b58d2:	f002 b87e 	b.w	b79d2 <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b58d6:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b58d8:	f002 f8e4 	bl	b7aa4 <_Z19__fetch_global_Wirev>
   b58dc:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b58e0:	f000 ff00 	bl	b66e4 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b58e4:	f002 f8de 	bl	b7aa4 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b58e8:	6803      	ldr	r3, [r0, #0]
   b58ea:	2140      	movs	r1, #64	; 0x40
   b58ec:	689b      	ldr	r3, [r3, #8]
   b58ee:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b58f0:	f105 0610 	add.w	r6, r5, #16
   b58f4:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b58f6:	f002 f8d5 	bl	b7aa4 <_Z19__fetch_global_Wirev>
   b58fa:	6803      	ldr	r3, [r0, #0]
   b58fc:	5d79      	ldrb	r1, [r7, r5]
   b58fe:	689b      	ldr	r3, [r3, #8]
   b5900:	4798      	blx	r3
		i++;
   b5902:	1c6b      	adds	r3, r5, #1
   b5904:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b5906:	42ae      	cmp	r6, r5
   b5908:	d1f5      	bne.n	b58f6 <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b590a:	f002 f8cb 	bl	b7aa4 <_Z19__fetch_global_Wirev>
   b590e:	f000 fef0 	bl	b66f2 <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5912:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b5916:	d100      	bne.n	b591a <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b5918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b591a:	4635      	mov	r5, r6
   b591c:	e7dc      	b.n	b58d8 <_ZN16Adafruit_SSD13067displayEv+0x94>
   b591e:	bf00      	nop
   b5920:	2003e084 	.word	0x2003e084

000b5924 <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b5924:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b5926:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b592a:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b592c:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b592e:	4604      	mov	r4, r0
   b5930:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b5932:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b5934:	f000 80c9 	beq.w	b5aca <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b5938:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b593c:	2101      	movs	r1, #1
   b593e:	b280      	uxth	r0, r0
   b5940:	f002 f836 	bl	b79b0 <pinMode>
    pinMode(cs, OUTPUT);
   b5944:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5948:	2101      	movs	r1, #1
   b594a:	b280      	uxth	r0, r0
   b594c:	f002 f830 	bl	b79b0 <pinMode>
    if (!hwSPI){
   b5950:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b5954:	2b00      	cmp	r3, #0
   b5956:	f000 80a6 	beq.w	b5aa6 <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b595a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b595e:	2101      	movs	r1, #1
   b5960:	b280      	uxth	r0, r0
   b5962:	f002 f836 	bl	b79d2 <digitalWrite>
        instance().setBitOrder(order);
   b5966:	f7ff fa99 	bl	b4e9c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b596a:	2101      	movs	r1, #1
   b596c:	f001 f92e 	bl	b6bcc <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b5970:	f7ff fa94 	bl	b4e9c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5974:	2110      	movs	r1, #16
   b5976:	f001 f999 	bl	b6cac <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b597a:	f7ff fa8f 	bl	b4e9c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b597e:	2100      	movs	r1, #0
   b5980:	f001 f938 	bl	b6bf4 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b5984:	f7ff fa8a 	bl	b4e9c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5988:	f001 f90c 	bl	b6ba4 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b598c:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5990:	2101      	movs	r1, #1
   b5992:	b280      	uxth	r0, r0
   b5994:	f002 f80c 	bl	b79b0 <pinMode>
  digitalWrite(rst, HIGH);
   b5998:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b599c:	2101      	movs	r1, #1
   b599e:	b280      	uxth	r0, r0
   b59a0:	f002 f817 	bl	b79d2 <digitalWrite>
  delay(1);
   b59a4:	2001      	movs	r0, #1
   b59a6:	f000 fdf7 	bl	b6598 <delay>
  digitalWrite(rst, LOW);
   b59aa:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b59ae:	2100      	movs	r1, #0
   b59b0:	b280      	uxth	r0, r0
   b59b2:	f002 f80e 	bl	b79d2 <digitalWrite>
  delay(10);
   b59b6:	200a      	movs	r0, #10
   b59b8:	f000 fdee 	bl	b6598 <delay>
  digitalWrite(rst, HIGH);
   b59bc:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b59c0:	2101      	movs	r1, #1
   b59c2:	b280      	uxth	r0, r0
   b59c4:	f002 f805 	bl	b79d2 <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b59c8:	4620      	mov	r0, r4
   b59ca:	21ae      	movs	r1, #174	; 0xae
   b59cc:	f7ff fefc 	bl	b57c8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b59d0:	4620      	mov	r0, r4
   b59d2:	21d5      	movs	r1, #213	; 0xd5
   b59d4:	f7ff fef8 	bl	b57c8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b59d8:	4620      	mov	r0, r4
   b59da:	2180      	movs	r1, #128	; 0x80
   b59dc:	f7ff fef4 	bl	b57c8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b59e0:	4620      	mov	r0, r4
   b59e2:	21a8      	movs	r1, #168	; 0xa8
   b59e4:	f7ff fef0 	bl	b57c8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b59e8:	4620      	mov	r0, r4
   b59ea:	213f      	movs	r1, #63	; 0x3f
   b59ec:	f7ff feec 	bl	b57c8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b59f0:	4620      	mov	r0, r4
   b59f2:	21d3      	movs	r1, #211	; 0xd3
   b59f4:	f7ff fee8 	bl	b57c8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b59f8:	4620      	mov	r0, r4
   b59fa:	2100      	movs	r1, #0
   b59fc:	f7ff fee4 	bl	b57c8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b5a00:	4620      	mov	r0, r4
   b5a02:	2140      	movs	r1, #64	; 0x40
   b5a04:	f7ff fee0 	bl	b57c8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b5a08:	218d      	movs	r1, #141	; 0x8d
   b5a0a:	4620      	mov	r0, r4
   b5a0c:	f7ff fedc 	bl	b57c8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5a10:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b5a12:	bf0c      	ite	eq
   b5a14:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b5a16:	2114      	movne	r1, #20
   b5a18:	4620      	mov	r0, r4
   b5a1a:	f7ff fed5 	bl	b57c8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b5a1e:	4620      	mov	r0, r4
   b5a20:	2120      	movs	r1, #32
   b5a22:	f7ff fed1 	bl	b57c8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b5a26:	4620      	mov	r0, r4
   b5a28:	2100      	movs	r1, #0
   b5a2a:	f7ff fecd 	bl	b57c8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b5a2e:	4620      	mov	r0, r4
   b5a30:	21a1      	movs	r1, #161	; 0xa1
   b5a32:	f7ff fec9 	bl	b57c8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b5a36:	4620      	mov	r0, r4
   b5a38:	21c8      	movs	r1, #200	; 0xc8
   b5a3a:	f7ff fec5 	bl	b57c8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b5a3e:	4620      	mov	r0, r4
   b5a40:	21da      	movs	r1, #218	; 0xda
   b5a42:	f7ff fec1 	bl	b57c8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b5a46:	4620      	mov	r0, r4
   b5a48:	2112      	movs	r1, #18
   b5a4a:	f7ff febd 	bl	b57c8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b5a4e:	2181      	movs	r1, #129	; 0x81
   b5a50:	4620      	mov	r0, r4
   b5a52:	f7ff feb9 	bl	b57c8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5a56:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b5a58:	bf0c      	ite	eq
   b5a5a:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b5a5c:	21cf      	movne	r1, #207	; 0xcf
   b5a5e:	4620      	mov	r0, r4
   b5a60:	f7ff feb2 	bl	b57c8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b5a64:	21d9      	movs	r1, #217	; 0xd9
   b5a66:	4620      	mov	r0, r4
   b5a68:	f7ff feae 	bl	b57c8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5a6c:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b5a6e:	bf0c      	ite	eq
   b5a70:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b5a72:	21f1      	movne	r1, #241	; 0xf1
   b5a74:	4620      	mov	r0, r4
   b5a76:	f7ff fea7 	bl	b57c8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b5a7a:	4620      	mov	r0, r4
   b5a7c:	21db      	movs	r1, #219	; 0xdb
   b5a7e:	f7ff fea3 	bl	b57c8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b5a82:	4620      	mov	r0, r4
   b5a84:	2140      	movs	r1, #64	; 0x40
   b5a86:	f7ff fe9f 	bl	b57c8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b5a8a:	4620      	mov	r0, r4
   b5a8c:	21a4      	movs	r1, #164	; 0xa4
   b5a8e:	f7ff fe9b 	bl	b57c8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b5a92:	4620      	mov	r0, r4
   b5a94:	21a6      	movs	r1, #166	; 0xa6
   b5a96:	f7ff fe97 	bl	b57c8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b5a9a:	4620      	mov	r0, r4
   b5a9c:	21af      	movs	r1, #175	; 0xaf
}
   b5a9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b5aa2:	f7ff be91 	b.w	b57c8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b5aa6:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5aaa:	2101      	movs	r1, #1
   b5aac:	b280      	uxth	r0, r0
   b5aae:	f001 ff7f 	bl	b79b0 <pinMode>
    	pinMode(sclk, OUTPUT);
   b5ab2:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b5ab6:	2101      	movs	r1, #1
   b5ab8:	b280      	uxth	r0, r0
   b5aba:	f001 ff79 	bl	b79b0 <pinMode>
    if (hwSPI){
   b5abe:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b5ac2:	2b00      	cmp	r3, #0
   b5ac4:	f43f af62 	beq.w	b598c <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b5ac8:	e747      	b.n	b595a <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b5aca:	f001 ffeb 	bl	b7aa4 <_Z19__fetch_global_Wirev>
   b5ace:	f000 fdff 	bl	b66d0 <_ZN7TwoWire5beginEv>
   b5ad2:	e75b      	b.n	b598c <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b5ad4 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b5ad4:	b538      	push	{r3, r4, r5, lr}
   b5ad6:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   b5ad8:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b5ada:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   b5adc:	b108      	cbz	r0, b5ae2 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   b5ade:	f000 fd17 	bl	b6510 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   b5ae2:	79a3      	ldrb	r3, [r4, #6]
   b5ae4:	2b06      	cmp	r3, #6
   b5ae6:	bf0c      	ite	eq
   b5ae8:	2004      	moveq	r0, #4
   b5aea:	2003      	movne	r0, #3
   b5aec:	fb10 f005 	smulbb	r0, r0, r5
   b5af0:	b280      	uxth	r0, r0
   b5af2:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   b5af4:	f000 fd04 	bl	b6500 <malloc>
   b5af8:	60e0      	str	r0, [r4, #12]
   b5afa:	b128      	cbz	r0, b5b08 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   b5afc:	88a2      	ldrh	r2, [r4, #4]
   b5afe:	2100      	movs	r1, #0
   b5b00:	f002 f960 	bl	b7dc4 <memset>
    numLEDs = n;
   b5b04:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   b5b06:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   b5b08:	80a0      	strh	r0, [r4, #4]
   b5b0a:	8060      	strh	r0, [r4, #2]
}
   b5b0c:	e7fb      	b.n	b5b06 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000b5b0e <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
   b5b0e:	b510      	push	{r4, lr}
   b5b10:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   b5b12:	2101      	movs	r1, #1
   b5b14:	79c0      	ldrb	r0, [r0, #7]
   b5b16:	f001 ff4b 	bl	b79b0 <pinMode>
  digitalWrite(pin, LOW);
   b5b1a:	79e0      	ldrb	r0, [r4, #7]
   b5b1c:	2100      	movs	r1, #0
   b5b1e:	f001 ff58 	bl	b79d2 <digitalWrite>
  begun = true;
   b5b22:	2301      	movs	r3, #1
   b5b24:	7023      	strb	r3, [r4, #0]
}
   b5b26:	bd10      	pop	{r4, pc}

000b5b28 <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b5b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   b5b2a:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b5b2c:	4605      	mov	r5, r0
   b5b2e:	460c      	mov	r4, r1
    if (begun) {
   b5b30:	b11b      	cbz	r3, b5b3a <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   b5b32:	79c0      	ldrb	r0, [r0, #7]
   b5b34:	2100      	movs	r1, #0
   b5b36:	f001 ff3b 	bl	b79b0 <pinMode>
    }
    pin = p;
    if (begun) {
   b5b3a:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   b5b3c:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   b5b3e:	b15b      	cbz	r3, b5b58 <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   b5b40:	b2a0      	uxth	r0, r4
   b5b42:	2101      	movs	r1, #1
   b5b44:	9001      	str	r0, [sp, #4]
   b5b46:	f001 ff33 	bl	b79b0 <pinMode>
        digitalWrite(p, LOW);
   b5b4a:	9801      	ldr	r0, [sp, #4]
   b5b4c:	2100      	movs	r1, #0
    }
}
   b5b4e:	b003      	add	sp, #12
   b5b50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   b5b54:	f001 bf3d 	b.w	b79d2 <digitalWrite>
}
   b5b58:	b003      	add	sp, #12
   b5b5a:	bd30      	pop	{r4, r5, pc}

000b5b5c <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b5b5c:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b5b5e:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b5b60:	4604      	mov	r4, r0
   b5b62:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b5b64:	7183      	strb	r3, [r0, #6]
   b5b66:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b5b6a:	7005      	strb	r5, [r0, #0]
   b5b6c:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   b5b6e:	f7ff ffb1 	bl	b5ad4 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   b5b72:	4620      	mov	r0, r4
   b5b74:	4631      	mov	r1, r6
   b5b76:	f7ff ffd7 	bl	b5b28 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   b5b7a:	4620      	mov	r0, r4
   b5b7c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5b80 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   b5b80:	68c3      	ldr	r3, [r0, #12]
   b5b82:	2b00      	cmp	r3, #0
   b5b84:	f000 81a4 	beq.w	b5ed0 <_ZN17Adafruit_NeoPixel4showEv+0x350>
void Adafruit_NeoPixel::show(void) {
   b5b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5b8c:	7983      	ldrb	r3, [r0, #6]
   b5b8e:	3b02      	subs	r3, #2
   b5b90:	b2db      	uxtb	r3, r3
   b5b92:	2b04      	cmp	r3, #4
   b5b94:	bf9c      	itt	ls
   b5b96:	4abf      	ldrls	r2, [pc, #764]	; (b5e94 <_ZN17Adafruit_NeoPixel4showEv+0x314>)
   b5b98:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   b5b9c:	b085      	sub	sp, #20
   b5b9e:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   b5ba0:	bf88      	it	hi
   b5ba2:	2432      	movhi	r4, #50	; 0x32
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b5ba4:	f000 fa28 	bl	b5ff8 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   b5ba8:	692b      	ldr	r3, [r5, #16]
   b5baa:	1ac0      	subs	r0, r0, r3
   b5bac:	42a0      	cmp	r0, r4
   b5bae:	d3f9      	bcc.n	b5ba4 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   b5bb0:	4cb9      	ldr	r4, [pc, #740]	; (b5e98 <_ZN17Adafruit_NeoPixel4showEv+0x318>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b5bb2:	88ae      	ldrh	r6, [r5, #4]
    if( (PWM[device]->ENABLE == 0)                            &&
   b5bb4:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5bb8:	b91b      	cbnz	r3, b5bc2 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5bba:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b5bbe:	2b00      	cmp	r3, #0
   b5bc0:	db7e      	blt.n	b5cc0 <_ZN17Adafruit_NeoPixel4showEv+0x140>
   b5bc2:	4cb6      	ldr	r4, [pc, #728]	; (b5e9c <_ZN17Adafruit_NeoPixel4showEv+0x31c>)
   b5bc4:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5bc8:	b923      	cbnz	r3, b5bd4 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5bca:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b5bce:	2b00      	cmp	r3, #0
   b5bd0:	f2c0 816e 	blt.w	b5eb0 <_ZN17Adafruit_NeoPixel4showEv+0x330>
   b5bd4:	4cb2      	ldr	r4, [pc, #712]	; (b5ea0 <_ZN17Adafruit_NeoPixel4showEv+0x320>)
   b5bd6:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5bda:	2b00      	cmp	r3, #0
   b5bdc:	f000 8144 	beq.w	b5e68 <_ZN17Adafruit_NeoPixel4showEv+0x2e8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5be0:	79eb      	ldrb	r3, [r5, #7]
   b5be2:	4ab0      	ldr	r2, [pc, #704]	; (b5ea4 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b5be4:	4cb0      	ldr	r4, [pc, #704]	; (b5ea8 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5be6:	6812      	ldr	r2, [r2, #0]
   b5be8:	0119      	lsls	r1, r3, #4
   b5bea:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b5bee:	5c57      	ldrb	r7, [r2, r1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b5bf0:	49ae      	ldr	r1, [pc, #696]	; (b5eac <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5bf2:	785b      	ldrb	r3, [r3, #1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b5bf4:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   b5bf8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   b5bfc:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b5c00:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5c02:	f003 031f 	and.w	r3, r3, #31
   b5c06:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   b5c0a:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b5c0c:	433a      	orrs	r2, r7
   b5c0e:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   b5c10:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b5c12:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b5c16:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5c1a:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   b5c1c:	2900      	cmp	r1, #0
   b5c1e:	d044      	beq.n	b5caa <_ZN17Adafruit_NeoPixel4showEv+0x12a>
   b5c20:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   b5c24:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   b5c26:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   b5c2a:	f818 cb01 	ldrb.w	ip, [r8], #1
   b5c2e:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b5c30:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   b5c32:	6863      	ldr	r3, [r4, #4]
   b5c34:	1a9b      	subs	r3, r3, r2
   b5c36:	2b46      	cmp	r3, #70	; 0x46
   b5c38:	d9fb      	bls.n	b5c32 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
          cyc  = DWT->CYCCNT;
   b5c3a:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   b5c3c:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   b5c40:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   b5c44:	ea43 0307 	orr.w	r3, r3, r7
   b5c48:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   b5c4c:	d02f      	beq.n	b5cae <_ZN17Adafruit_NeoPixel4showEv+0x12e>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   b5c4e:	6863      	ldr	r3, [r4, #4]
   b5c50:	1a9b      	subs	r3, r3, r2
   b5c52:	2b28      	cmp	r3, #40	; 0x28
   b5c54:	d9fb      	bls.n	b5c4e <_ZN17Adafruit_NeoPixel4showEv+0xce>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   b5c56:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b5c5a:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   b5c5c:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b5c60:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   b5c64:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b5c68:	d1e3      	bne.n	b5c32 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
      for(uint16_t n=0; n<numBytes; n++) {
   b5c6a:	88ab      	ldrh	r3, [r5, #4]
   b5c6c:	f10e 0e01 	add.w	lr, lr, #1
   b5c70:	fa1f fe8e 	uxth.w	lr, lr
   b5c74:	4573      	cmp	r3, lr
   b5c76:	d8d8      	bhi.n	b5c2a <_ZN17Adafruit_NeoPixel4showEv+0xaa>
      while(DWT->CYCCNT - cyc < CYCLES_X00);


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b5c78:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   b5c7c:	fb03 f101 	mul.w	r1, r3, r1
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   b5c80:	6863      	ldr	r3, [r4, #4]
   b5c82:	1a9b      	subs	r3, r3, r2
   b5c84:	2b46      	cmp	r3, #70	; 0x46
   b5c86:	d9fb      	bls.n	b5c80 <_ZN17Adafruit_NeoPixel4showEv+0x100>
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b5c88:	6863      	ldr	r3, [r4, #4]
   b5c8a:	eba3 0909 	sub.w	r9, r3, r9
   b5c8e:	4589      	cmp	r9, r1
   b5c90:	f0c0 80e4 	bcc.w	b5e5c <_ZN17Adafruit_NeoPixel4showEv+0x2dc>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b5c94:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b5c98:	f000 f9a6 	bl	b5fe8 <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   b5c9c:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b5c9e:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b5ca2:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   b5ca6:	2900      	cmp	r1, #0
   b5ca8:	d1ba      	bne.n	b5c20 <_ZN17Adafruit_NeoPixel4showEv+0xa0>
      uint32_t cyc = 0;
   b5caa:	460a      	mov	r2, r1
   b5cac:	e7e8      	b.n	b5c80 <_ZN17Adafruit_NeoPixel4showEv+0x100>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   b5cae:	6863      	ldr	r3, [r4, #4]
   b5cb0:	1a9b      	subs	r3, r3, r2
   b5cb2:	2b11      	cmp	r3, #17
   b5cb4:	d8cf      	bhi.n	b5c56 <_ZN17Adafruit_NeoPixel4showEv+0xd6>
   b5cb6:	6863      	ldr	r3, [r4, #4]
   b5cb8:	1a9b      	subs	r3, r3, r2
   b5cba:	2b11      	cmp	r3, #17
   b5cbc:	d9f7      	bls.n	b5cae <_ZN17Adafruit_NeoPixel4showEv+0x12e>
   b5cbe:	e7ca      	b.n	b5c56 <_ZN17Adafruit_NeoPixel4showEv+0xd6>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5cc0:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5cc4:	2b00      	cmp	r3, #0
   b5cc6:	f6bf af7c 	bge.w	b5bc2 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5cca:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5cce:	2b00      	cmp	r3, #0
   b5cd0:	f6bf af77 	bge.w	b5bc2 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b5cd4:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5cd8:	2b00      	cmp	r3, #0
   b5cda:	f6bf af72 	bge.w	b5bc2 <_ZN17Adafruit_NeoPixel4showEv+0x42>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b5cde:	0136      	lsls	r6, r6, #4
   b5ce0:	1d33      	adds	r3, r6, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b5ce2:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b5ce4:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b5ce6:	f000 fc0b 	bl	b6500 <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   b5cea:	2800      	cmp	r0, #0
   b5cec:	f43f af78 	beq.w	b5be0 <_ZN17Adafruit_NeoPixel4showEv+0x60>
    for(uint16_t n=0; n<numBytes; n++) {
   b5cf0:	88ab      	ldrh	r3, [r5, #4]
   b5cf2:	2b00      	cmp	r3, #0
   b5cf4:	f000 80ed 	beq.w	b5ed2 <_ZN17Adafruit_NeoPixel4showEv+0x352>
      uint8_t pix = pixels[n];
   b5cf8:	68ea      	ldr	r2, [r5, #12]
   b5cfa:	3b01      	subs	r3, #1
   b5cfc:	fa12 f783 	uxtah	r7, r2, r3
   b5d00:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
    uint16_t pos = 0; // bit position
   b5d04:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5d06:	f248 0206 	movw	r2, #32774	; 0x8006
   b5d0a:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   b5d0e:	f81e cf01 	ldrb.w	ip, [lr, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5d12:	f01c 0f80 	tst.w	ip, #128	; 0x80
   b5d16:	bf0c      	ite	eq
   b5d18:	4693      	moveq	fp, r2
   b5d1a:	468b      	movne	fp, r1
   b5d1c:	f01c 0f40 	tst.w	ip, #64	; 0x40
   b5d20:	bf0c      	ite	eq
   b5d22:	4616      	moveq	r6, r2
   b5d24:	460e      	movne	r6, r1
   b5d26:	f01c 0f20 	tst.w	ip, #32
   b5d2a:	bf0c      	ite	eq
   b5d2c:	4690      	moveq	r8, r2
   b5d2e:	4688      	movne	r8, r1
        pos++;
   b5d30:	f103 0901 	add.w	r9, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5d34:	f8cd 8008 	str.w	r8, [sp, #8]
   b5d38:	9601      	str	r6, [sp, #4]
        pos++;
   b5d3a:	f103 0802 	add.w	r8, r3, #2
   b5d3e:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5d42:	9e01      	ldr	r6, [sp, #4]
   b5d44:	f820 b013 	strh.w	fp, [r0, r3, lsl #1]
        pos++;
   b5d48:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5d4c:	f820 6019 	strh.w	r6, [r0, r9, lsl #1]
   b5d50:	9e02      	ldr	r6, [sp, #8]
   b5d52:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
        pos++;
   b5d56:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5d5a:	f01c 0f10 	tst.w	ip, #16
        pos++;
   b5d5e:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5d62:	bf0c      	ite	eq
   b5d64:	4693      	moveq	fp, r2
   b5d66:	468b      	movne	fp, r1
   b5d68:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b5d6c:	f103 0804 	add.w	r8, r3, #4
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5d70:	f01c 0f08 	tst.w	ip, #8
        pos++;
   b5d74:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5d78:	bf0c      	ite	eq
   b5d7a:	4693      	moveq	fp, r2
   b5d7c:	468b      	movne	fp, r1
   b5d7e:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b5d82:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5d86:	f01c 0f04 	tst.w	ip, #4
        pos++;
   b5d8a:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5d8e:	bf0c      	ite	eq
   b5d90:	4693      	moveq	fp, r2
   b5d92:	468b      	movne	fp, r1
   b5d94:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b5d98:	f103 0a08 	add.w	sl, r3, #8
   b5d9c:	f103 0806 	add.w	r8, r3, #6
   b5da0:	3307      	adds	r3, #7
   b5da2:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5da4:	f01c 0f02 	tst.w	ip, #2
        pos++;
   b5da8:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5dac:	bf0c      	ite	eq
   b5dae:	4693      	moveq	fp, r2
   b5db0:	468b      	movne	fp, r1
        pos++;
   b5db2:	f8cd a00c 	str.w	sl, [sp, #12]
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5db6:	f01c 0f01 	tst.w	ip, #1
   b5dba:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
   b5dbe:	bf15      	itete	ne
   b5dc0:	f820 1013 	strhne.w	r1, [r0, r3, lsl #1]
   b5dc4:	f820 2013 	strheq.w	r2, [r0, r3, lsl #1]
        pos++;
   b5dc8:	fa1f f38a 	uxthne.w	r3, sl
   b5dcc:	f8bd 300c 	ldrheq.w	r3, [sp, #12]
    for(uint16_t n=0; n<numBytes; n++) {
   b5dd0:	4577      	cmp	r7, lr
   b5dd2:	d19c      	bne.n	b5d0e <_ZN17Adafruit_NeoPixel4showEv+0x18e>
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5dd4:	1c59      	adds	r1, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5dd6:	3302      	adds	r3, #2
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5dd8:	b289      	uxth	r1, r1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5dda:	b29b      	uxth	r3, r3
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5ddc:	0049      	lsls	r1, r1, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5dde:	005b      	lsls	r3, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5de0:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   b5de4:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b5de6:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5de8:	52c7      	strh	r7, [r0, r3]
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5dea:	4b2e      	ldr	r3, [pc, #184]	; (b5ea4 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b5dec:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5dee:	681f      	ldr	r7, [r3, #0]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b5df0:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b5df2:	2314      	movs	r3, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b5df4:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   b5df8:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b5dfc:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   b5e00:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   b5e04:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   b5e08:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b5e0c:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   b5e10:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   b5e14:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5e18:	79eb      	ldrb	r3, [r5, #7]
   b5e1a:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
   b5e1e:	011b      	lsls	r3, r3, #4
    pwm->ENABLE = 1;
   b5e20:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5e22:	5cfe      	ldrb	r6, [r7, r3]
   b5e24:	f89c 3001 	ldrb.w	r3, [ip, #1]
   b5e28:	f003 031f 	and.w	r3, r3, #31
   b5e2c:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
   b5e30:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   b5e34:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   b5e38:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   b5e3c:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   b5e3e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   b5e42:	2b00      	cmp	r3, #0
   b5e44:	d0fb      	beq.n	b5e3e <_ZN17Adafruit_NeoPixel4showEv+0x2be>
    pwm->EVENTS_SEQEND[0] = 0;
   b5e46:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b5e48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    pwm->EVENTS_SEQEND[0] = 0;
   b5e4c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   b5e50:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b5e54:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   b5e58:	f000 fb5a 	bl	b6510 <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b5e5c:	f000 f8cc 	bl	b5ff8 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   b5e60:	6128      	str	r0, [r5, #16]
}
   b5e62:	b005      	add	sp, #20
   b5e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5e68:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b5e6c:	2b00      	cmp	r3, #0
   b5e6e:	f6bf aeb7 	bge.w	b5be0 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5e72:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5e76:	2b00      	cmp	r3, #0
   b5e78:	f6bf aeb2 	bge.w	b5be0 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5e7c:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5e80:	2b00      	cmp	r3, #0
   b5e82:	f6bf aead 	bge.w	b5be0 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b5e86:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5e8a:	2b00      	cmp	r3, #0
   b5e8c:	f6bf aea8 	bge.w	b5be0 <_ZN17Adafruit_NeoPixel4showEv+0x60>
   b5e90:	e725      	b.n	b5cde <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b5e92:	bf00      	nop
   b5e94:	000b8a00 	.word	0x000b8a00
   b5e98:	4001c000 	.word	0x4001c000
   b5e9c:	40021000 	.word	0x40021000
   b5ea0:	40022000 	.word	0x40022000
   b5ea4:	2003e630 	.word	0x2003e630
   b5ea8:	e0001000 	.word	0xe0001000
   b5eac:	e000ed00 	.word	0xe000ed00
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5eb0:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5eb4:	2b00      	cmp	r3, #0
   b5eb6:	f6bf ae8d 	bge.w	b5bd4 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5eba:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5ebe:	2b00      	cmp	r3, #0
   b5ec0:	f6bf ae88 	bge.w	b5bd4 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b5ec4:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5ec8:	2b00      	cmp	r3, #0
   b5eca:	f6bf ae83 	bge.w	b5bd4 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   b5ece:	e706      	b.n	b5cde <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b5ed0:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   b5ed2:	2304      	movs	r3, #4
   b5ed4:	2102      	movs	r1, #2
   b5ed6:	e783      	b.n	b5de0 <_ZN17Adafruit_NeoPixel4showEv+0x260>

000b5ed8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   b5ed8:	8843      	ldrh	r3, [r0, #2]
   b5eda:	428b      	cmp	r3, r1
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   b5edc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   b5ede:	d92d      	bls.n	b5f3c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   b5ee0:	7a06      	ldrb	r6, [r0, #8]
   b5ee2:	f3c2 4307 	ubfx	r3, r2, #16, #8
   b5ee6:	f3c2 2407 	ubfx	r4, r2, #8, #8
   b5eea:	b2d5      	uxtb	r5, r2
   b5eec:	b13e      	cbz	r6, b5efe <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
   b5eee:	4373      	muls	r3, r6
      g = (g * brightness) >> 8;
   b5ef0:	4374      	muls	r4, r6
      b = (b * brightness) >> 8;
   b5ef2:	4375      	muls	r5, r6
      r = (r * brightness) >> 8;
   b5ef4:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   b5ef8:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   b5efc:	0a2d      	lsrs	r5, r5, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   b5efe:	f890 c006 	ldrb.w	ip, [r0, #6]
   b5f02:	68c7      	ldr	r7, [r0, #12]
   b5f04:	f1bc 0f06 	cmp.w	ip, #6
   b5f08:	bf0c      	ite	eq
   b5f0a:	2604      	moveq	r6, #4
   b5f0c:	2603      	movne	r6, #3
   b5f0e:	434e      	muls	r6, r1
   b5f10:	f1ac 0c02 	sub.w	ip, ip, #2
   b5f14:	19b9      	adds	r1, r7, r6
    switch(type) {
   b5f16:	f1bc 0f06 	cmp.w	ip, #6
   b5f1a:	d81d      	bhi.n	b5f58 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
   b5f1c:	e8df f00c 	tbb	[pc, ip]
   b5f20:	04081c04 	.word	0x04081c04
   b5f24:	040f      	.short	0x040f
   b5f26:	04          	.byte	0x04
   b5f27:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   b5f28:	55bc      	strb	r4, [r7, r6]
          *p++ = r;
   b5f2a:	704b      	strb	r3, [r1, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
   b5f2c:	708d      	strb	r5, [r1, #2]
        } break;
    }
  }
}
   b5f2e:	e005      	b.n	b5f3c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p++ = r;
   b5f30:	2bfe      	cmp	r3, #254	; 0xfe
   b5f32:	bf28      	it	cs
   b5f34:	23fe      	movcs	r3, #254	; 0xfe
   b5f36:	55bb      	strb	r3, [r7, r6]
          *p++ = b;
   b5f38:	704d      	strb	r5, [r1, #1]
          *p = g;
   b5f3a:	708c      	strb	r4, [r1, #2]
}
   b5f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
   b5f3e:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b5f40:	704c      	strb	r4, [r1, #1]
          *p++ = b;
   b5f42:	708d      	strb	r5, [r1, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   b5f44:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
   b5f46:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
   b5f48:	b913      	cbnz	r3, b5f50 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
   b5f4a:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
   b5f4c:	70ca      	strb	r2, [r1, #3]
        } break;
   b5f4e:	e7f5      	b.n	b5f3c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p = brightness ? ((w * brightness) >> 8) : w;
   b5f50:	435a      	muls	r2, r3
   b5f52:	f3c2 2207 	ubfx	r2, r2, #8, #8
   b5f56:	e7f9      	b.n	b5f4c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
   b5f58:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b5f5a:	704c      	strb	r4, [r1, #1]
   b5f5c:	e7e6      	b.n	b5f2c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>

000b5f5e <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
   b5f5e:	7a03      	ldrb	r3, [r0, #8]
  uint8_t newBrightness = b + 1;
   b5f60:	1c4a      	adds	r2, r1, #1
   b5f62:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
   b5f64:	4293      	cmp	r3, r2
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
   b5f66:	b570      	push	{r4, r5, r6, lr}
  if(newBrightness != brightness) { // Compare against prior value
   b5f68:	d01f      	beq.n	b5faa <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4c>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
   b5f6a:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b5f6c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
            *ptr           = pixels,
   b5f70:	68c4      	ldr	r4, [r0, #12]
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b5f72:	d00c      	beq.n	b5f8e <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
   b5f74:	29ff      	cmp	r1, #255	; 0xff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
   b5f76:	bf1f      	itttt	ne
   b5f78:	0211      	lslne	r1, r2, #8
   b5f7a:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
   b5f7e:	fbb1 f3f3 	udivne	r3, r1, r3
   b5f82:	b29b      	uxthne	r3, r3
    else if(b == 255) scale = 65535 / oldBrightness;
   b5f84:	bf04      	itt	eq
   b5f86:	f64f 71ff 	movweq	r1, #65535	; 0xffff
   b5f8a:	fbb1 f3f3 	udiveq	r3, r1, r3
            *ptr           = pixels,
   b5f8e:	4625      	mov	r5, r4
    for(uint16_t i=0; i<numBytes; i++) {
   b5f90:	8886      	ldrh	r6, [r0, #4]
   b5f92:	1b29      	subs	r1, r5, r4
   b5f94:	b289      	uxth	r1, r1
   b5f96:	428e      	cmp	r6, r1
   b5f98:	d906      	bls.n	b5fa8 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
   b5f9a:	7829      	ldrb	r1, [r5, #0]
   b5f9c:	4359      	muls	r1, r3
   b5f9e:	f3c1 2107 	ubfx	r1, r1, #8, #8
   b5fa2:	f805 1b01 	strb.w	r1, [r5], #1
    for(uint16_t i=0; i<numBytes; i++) {
   b5fa6:	e7f3      	b.n	b5f90 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
    }
    brightness = newBrightness;
   b5fa8:	7202      	strb	r2, [r0, #8]
  }
}
   b5faa:	bd70      	pop	{r4, r5, r6, pc}

000b5fac <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   b5fac:	8882      	ldrh	r2, [r0, #4]
   b5fae:	68c0      	ldr	r0, [r0, #12]
   b5fb0:	2100      	movs	r1, #0
   b5fb2:	f001 bf07 	b.w	b7dc4 <memset>
	...

000b5fb8 <_GLOBAL__sub_I_PIN_MAP2>:
}
   b5fb8:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b5fba:	f000 f82d 	bl	b6018 <HAL_Pin_Map>
   b5fbe:	4b01      	ldr	r3, [pc, #4]	; (b5fc4 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b5fc0:	6018      	str	r0, [r3, #0]
}
   b5fc2:	bd08      	pop	{r3, pc}
   b5fc4:	2003e630 	.word	0x2003e630

000b5fc8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5fc8:	b508      	push	{r3, lr}
   b5fca:	4b02      	ldr	r3, [pc, #8]	; (b5fd4 <os_mutex_recursive_create+0xc>)
   b5fcc:	681b      	ldr	r3, [r3, #0]
   b5fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5fd0:	9301      	str	r3, [sp, #4]
   b5fd2:	bd08      	pop	{r3, pc}
   b5fd4:	00030248 	.word	0x00030248

000b5fd8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5fd8:	b508      	push	{r3, lr}
   b5fda:	4b02      	ldr	r3, [pc, #8]	; (b5fe4 <HAL_RNG_GetRandomNumber+0xc>)
   b5fdc:	681b      	ldr	r3, [r3, #0]
   b5fde:	685b      	ldr	r3, [r3, #4]
   b5fe0:	9301      	str	r3, [sp, #4]
   b5fe2:	bd08      	pop	{r3, pc}
   b5fe4:	00030218 	.word	0x00030218

000b5fe8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5fe8:	b508      	push	{r3, lr}
   b5fea:	4b02      	ldr	r3, [pc, #8]	; (b5ff4 <HAL_Delay_Microseconds+0xc>)
   b5fec:	681b      	ldr	r3, [r3, #0]
   b5fee:	68db      	ldr	r3, [r3, #12]
   b5ff0:	9301      	str	r3, [sp, #4]
   b5ff2:	bd08      	pop	{r3, pc}
   b5ff4:	00030218 	.word	0x00030218

000b5ff8 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b5ff8:	b508      	push	{r3, lr}
   b5ffa:	4b02      	ldr	r3, [pc, #8]	; (b6004 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b5ffc:	681b      	ldr	r3, [r3, #0]
   b5ffe:	691b      	ldr	r3, [r3, #16]
   b6000:	9301      	str	r3, [sp, #4]
   b6002:	bd08      	pop	{r3, pc}
   b6004:	00030218 	.word	0x00030218

000b6008 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6008:	b508      	push	{r3, lr}
   b600a:	4b02      	ldr	r3, [pc, #8]	; (b6014 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b600c:	681b      	ldr	r3, [r3, #0]
   b600e:	695b      	ldr	r3, [r3, #20]
   b6010:	9301      	str	r3, [sp, #4]
   b6012:	bd08      	pop	{r3, pc}
   b6014:	00030218 	.word	0x00030218

000b6018 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b6018:	b508      	push	{r3, lr}
   b601a:	4b02      	ldr	r3, [pc, #8]	; (b6024 <HAL_Pin_Map+0xc>)
   b601c:	681b      	ldr	r3, [r3, #0]
   b601e:	681b      	ldr	r3, [r3, #0]
   b6020:	9301      	str	r3, [sp, #4]
   b6022:	bd08      	pop	{r3, pc}
   b6024:	0003022c 	.word	0x0003022c

000b6028 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b6028:	b508      	push	{r3, lr}
   b602a:	4b02      	ldr	r3, [pc, #8]	; (b6034 <HAL_Validate_Pin_Function+0xc>)
   b602c:	681b      	ldr	r3, [r3, #0]
   b602e:	685b      	ldr	r3, [r3, #4]
   b6030:	9301      	str	r3, [sp, #4]
   b6032:	bd08      	pop	{r3, pc}
   b6034:	0003022c 	.word	0x0003022c

000b6038 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b6038:	b508      	push	{r3, lr}
   b603a:	4b02      	ldr	r3, [pc, #8]	; (b6044 <HAL_Pin_Mode+0xc>)
   b603c:	681b      	ldr	r3, [r3, #0]
   b603e:	689b      	ldr	r3, [r3, #8]
   b6040:	9301      	str	r3, [sp, #4]
   b6042:	bd08      	pop	{r3, pc}
   b6044:	0003022c 	.word	0x0003022c

000b6048 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b6048:	b508      	push	{r3, lr}
   b604a:	4b02      	ldr	r3, [pc, #8]	; (b6054 <HAL_Get_Pin_Mode+0xc>)
   b604c:	681b      	ldr	r3, [r3, #0]
   b604e:	68db      	ldr	r3, [r3, #12]
   b6050:	9301      	str	r3, [sp, #4]
   b6052:	bd08      	pop	{r3, pc}
   b6054:	0003022c 	.word	0x0003022c

000b6058 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b6058:	b508      	push	{r3, lr}
   b605a:	4b02      	ldr	r3, [pc, #8]	; (b6064 <HAL_GPIO_Write+0xc>)
   b605c:	681b      	ldr	r3, [r3, #0]
   b605e:	691b      	ldr	r3, [r3, #16]
   b6060:	9301      	str	r3, [sp, #4]
   b6062:	bd08      	pop	{r3, pc}
   b6064:	0003022c 	.word	0x0003022c

000b6068 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b6068:	b508      	push	{r3, lr}
   b606a:	4b02      	ldr	r3, [pc, #8]	; (b6074 <HAL_GPIO_Read+0xc>)
   b606c:	681b      	ldr	r3, [r3, #0]
   b606e:	695b      	ldr	r3, [r3, #20]
   b6070:	9301      	str	r3, [sp, #4]
   b6072:	bd08      	pop	{r3, pc}
   b6074:	0003022c 	.word	0x0003022c

000b6078 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b6078:	b508      	push	{r3, lr}
   b607a:	4b02      	ldr	r3, [pc, #8]	; (b6084 <HAL_Interrupts_Attach+0xc>)
   b607c:	681b      	ldr	r3, [r3, #0]
   b607e:	699b      	ldr	r3, [r3, #24]
   b6080:	9301      	str	r3, [sp, #4]
   b6082:	bd08      	pop	{r3, pc}
   b6084:	0003022c 	.word	0x0003022c

000b6088 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b6088:	b508      	push	{r3, lr}
   b608a:	4b02      	ldr	r3, [pc, #8]	; (b6094 <HAL_Interrupts_Detach+0xc>)
   b608c:	681b      	ldr	r3, [r3, #0]
   b608e:	69db      	ldr	r3, [r3, #28]
   b6090:	9301      	str	r3, [sp, #4]
   b6092:	bd08      	pop	{r3, pc}
   b6094:	0003022c 	.word	0x0003022c

000b6098 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   b6098:	b508      	push	{r3, lr}
   b609a:	4b02      	ldr	r3, [pc, #8]	; (b60a4 <HAL_Interrupts_Enable_All+0xc>)
   b609c:	681b      	ldr	r3, [r3, #0]
   b609e:	6a1b      	ldr	r3, [r3, #32]
   b60a0:	9301      	str	r3, [sp, #4]
   b60a2:	bd08      	pop	{r3, pc}
   b60a4:	0003022c 	.word	0x0003022c

000b60a8 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   b60a8:	b508      	push	{r3, lr}
   b60aa:	4b02      	ldr	r3, [pc, #8]	; (b60b4 <HAL_Interrupts_Disable_All+0xc>)
   b60ac:	681b      	ldr	r3, [r3, #0]
   b60ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b60b0:	9301      	str	r3, [sp, #4]
   b60b2:	bd08      	pop	{r3, pc}
   b60b4:	0003022c 	.word	0x0003022c

000b60b8 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b60b8:	b508      	push	{r3, lr}
   b60ba:	4b02      	ldr	r3, [pc, #8]	; (b60c4 <hal_i2c_begin+0xc>)
   b60bc:	681b      	ldr	r3, [r3, #0]
   b60be:	68db      	ldr	r3, [r3, #12]
   b60c0:	9301      	str	r3, [sp, #4]
   b60c2:	bd08      	pop	{r3, pc}
   b60c4:	00030228 	.word	0x00030228

000b60c8 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b60c8:	b508      	push	{r3, lr}
   b60ca:	4b02      	ldr	r3, [pc, #8]	; (b60d4 <hal_i2c_begin_transmission+0xc>)
   b60cc:	681b      	ldr	r3, [r3, #0]
   b60ce:	699b      	ldr	r3, [r3, #24]
   b60d0:	9301      	str	r3, [sp, #4]
   b60d2:	bd08      	pop	{r3, pc}
   b60d4:	00030228 	.word	0x00030228

000b60d8 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b60d8:	b508      	push	{r3, lr}
   b60da:	4b02      	ldr	r3, [pc, #8]	; (b60e4 <hal_i2c_end_transmission+0xc>)
   b60dc:	681b      	ldr	r3, [r3, #0]
   b60de:	69db      	ldr	r3, [r3, #28]
   b60e0:	9301      	str	r3, [sp, #4]
   b60e2:	bd08      	pop	{r3, pc}
   b60e4:	00030228 	.word	0x00030228

000b60e8 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b60e8:	b508      	push	{r3, lr}
   b60ea:	4b02      	ldr	r3, [pc, #8]	; (b60f4 <hal_i2c_write+0xc>)
   b60ec:	681b      	ldr	r3, [r3, #0]
   b60ee:	6a1b      	ldr	r3, [r3, #32]
   b60f0:	9301      	str	r3, [sp, #4]
   b60f2:	bd08      	pop	{r3, pc}
   b60f4:	00030228 	.word	0x00030228

000b60f8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b60f8:	b508      	push	{r3, lr}
   b60fa:	4b02      	ldr	r3, [pc, #8]	; (b6104 <hal_i2c_available+0xc>)
   b60fc:	681b      	ldr	r3, [r3, #0]
   b60fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6100:	9301      	str	r3, [sp, #4]
   b6102:	bd08      	pop	{r3, pc}
   b6104:	00030228 	.word	0x00030228

000b6108 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6108:	b508      	push	{r3, lr}
   b610a:	4b02      	ldr	r3, [pc, #8]	; (b6114 <hal_i2c_read+0xc>)
   b610c:	681b      	ldr	r3, [r3, #0]
   b610e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6110:	9301      	str	r3, [sp, #4]
   b6112:	bd08      	pop	{r3, pc}
   b6114:	00030228 	.word	0x00030228

000b6118 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6118:	b508      	push	{r3, lr}
   b611a:	4b02      	ldr	r3, [pc, #8]	; (b6124 <hal_i2c_peek+0xc>)
   b611c:	681b      	ldr	r3, [r3, #0]
   b611e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6120:	9301      	str	r3, [sp, #4]
   b6122:	bd08      	pop	{r3, pc}
   b6124:	00030228 	.word	0x00030228

000b6128 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6128:	b508      	push	{r3, lr}
   b612a:	4b02      	ldr	r3, [pc, #8]	; (b6134 <hal_i2c_flush+0xc>)
   b612c:	681b      	ldr	r3, [r3, #0]
   b612e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6130:	9301      	str	r3, [sp, #4]
   b6132:	bd08      	pop	{r3, pc}
   b6134:	00030228 	.word	0x00030228

000b6138 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6138:	b508      	push	{r3, lr}
   b613a:	4b02      	ldr	r3, [pc, #8]	; (b6144 <hal_i2c_is_enabled+0xc>)
   b613c:	681b      	ldr	r3, [r3, #0]
   b613e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6140:	9301      	str	r3, [sp, #4]
   b6142:	bd08      	pop	{r3, pc}
   b6144:	00030228 	.word	0x00030228

000b6148 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6148:	b508      	push	{r3, lr}
   b614a:	4b02      	ldr	r3, [pc, #8]	; (b6154 <hal_i2c_init+0xc>)
   b614c:	681b      	ldr	r3, [r3, #0]
   b614e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6150:	9301      	str	r3, [sp, #4]
   b6152:	bd08      	pop	{r3, pc}
   b6154:	00030228 	.word	0x00030228

000b6158 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b6158:	b508      	push	{r3, lr}
   b615a:	4b02      	ldr	r3, [pc, #8]	; (b6164 <if_index_to_name+0xc>)
   b615c:	681b      	ldr	r3, [r3, #0]
   b615e:	695b      	ldr	r3, [r3, #20]
   b6160:	9301      	str	r3, [sp, #4]
   b6162:	bd08      	pop	{r3, pc}
   b6164:	0003026c 	.word	0x0003026c

000b6168 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6168:	b508      	push	{r3, lr}
   b616a:	4b02      	ldr	r3, [pc, #8]	; (b6174 <inet_inet_ntop+0xc>)
   b616c:	681b      	ldr	r3, [r3, #0]
   b616e:	695b      	ldr	r3, [r3, #20]
   b6170:	9301      	str	r3, [sp, #4]
   b6172:	bd08      	pop	{r3, pc}
   b6174:	00030264 	.word	0x00030264

000b6178 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6178:	b508      	push	{r3, lr}
   b617a:	4b02      	ldr	r3, [pc, #8]	; (b6184 <inet_htonl+0xc>)
   b617c:	681b      	ldr	r3, [r3, #0]
   b617e:	6a1b      	ldr	r3, [r3, #32]
   b6180:	9301      	str	r3, [sp, #4]
   b6182:	bd08      	pop	{r3, pc}
   b6184:	00030264 	.word	0x00030264

000b6188 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b6188:	b508      	push	{r3, lr}
   b618a:	4b02      	ldr	r3, [pc, #8]	; (b6194 <inet_htons+0xc>)
   b618c:	681b      	ldr	r3, [r3, #0]
   b618e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6190:	9301      	str	r3, [sp, #4]
   b6192:	bd08      	pop	{r3, pc}
   b6194:	00030264 	.word	0x00030264

000b6198 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6198:	b508      	push	{r3, lr}
   b619a:	4b02      	ldr	r3, [pc, #8]	; (b61a4 <netdb_freeaddrinfo+0xc>)
   b619c:	681b      	ldr	r3, [r3, #0]
   b619e:	689b      	ldr	r3, [r3, #8]
   b61a0:	9301      	str	r3, [sp, #4]
   b61a2:	bd08      	pop	{r3, pc}
   b61a4:	00030268 	.word	0x00030268

000b61a8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b61a8:	b508      	push	{r3, lr}
   b61aa:	4b02      	ldr	r3, [pc, #8]	; (b61b4 <netdb_getaddrinfo+0xc>)
   b61ac:	681b      	ldr	r3, [r3, #0]
   b61ae:	68db      	ldr	r3, [r3, #12]
   b61b0:	9301      	str	r3, [sp, #4]
   b61b2:	bd08      	pop	{r3, pc}
   b61b4:	00030268 	.word	0x00030268

000b61b8 <HAL_Tone_Start>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_peripherals)

DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
   b61b8:	b508      	push	{r3, lr}
   b61ba:	4b02      	ldr	r3, [pc, #8]	; (b61c4 <HAL_Tone_Start+0xc>)
   b61bc:	681b      	ldr	r3, [r3, #0]
   b61be:	681b      	ldr	r3, [r3, #0]
   b61c0:	9301      	str	r3, [sp, #4]
   b61c2:	bd08      	pop	{r3, pc}
   b61c4:	00030224 	.word	0x00030224

000b61c8 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b61c8:	b508      	push	{r3, lr}
   b61ca:	4b02      	ldr	r3, [pc, #8]	; (b61d4 <sock_setsockopt+0xc>)
   b61cc:	681b      	ldr	r3, [r3, #0]
   b61ce:	699b      	ldr	r3, [r3, #24]
   b61d0:	9301      	str	r3, [sp, #4]
   b61d2:	bd08      	pop	{r3, pc}
   b61d4:	00030238 	.word	0x00030238

000b61d8 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b61d8:	b508      	push	{r3, lr}
   b61da:	4b02      	ldr	r3, [pc, #8]	; (b61e4 <sock_close+0xc>)
   b61dc:	681b      	ldr	r3, [r3, #0]
   b61de:	69db      	ldr	r3, [r3, #28]
   b61e0:	9301      	str	r3, [sp, #4]
   b61e2:	bd08      	pop	{r3, pc}
   b61e4:	00030238 	.word	0x00030238

000b61e8 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b61e8:	b508      	push	{r3, lr}
   b61ea:	4b02      	ldr	r3, [pc, #8]	; (b61f4 <sock_connect+0xc>)
   b61ec:	681b      	ldr	r3, [r3, #0]
   b61ee:	6a1b      	ldr	r3, [r3, #32]
   b61f0:	9301      	str	r3, [sp, #4]
   b61f2:	bd08      	pop	{r3, pc}
   b61f4:	00030238 	.word	0x00030238

000b61f8 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b61f8:	b508      	push	{r3, lr}
   b61fa:	4b02      	ldr	r3, [pc, #8]	; (b6204 <sock_recv+0xc>)
   b61fc:	681b      	ldr	r3, [r3, #0]
   b61fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6200:	9301      	str	r3, [sp, #4]
   b6202:	bd08      	pop	{r3, pc}
   b6204:	00030238 	.word	0x00030238

000b6208 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6208:	b508      	push	{r3, lr}
   b620a:	4b02      	ldr	r3, [pc, #8]	; (b6214 <sock_send+0xc>)
   b620c:	681b      	ldr	r3, [r3, #0]
   b620e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6210:	9301      	str	r3, [sp, #4]
   b6212:	bd08      	pop	{r3, pc}
   b6214:	00030238 	.word	0x00030238

000b6218 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6218:	b508      	push	{r3, lr}
   b621a:	4b02      	ldr	r3, [pc, #8]	; (b6224 <sock_socket+0xc>)
   b621c:	681b      	ldr	r3, [r3, #0]
   b621e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6220:	9301      	str	r3, [sp, #4]
   b6222:	bd08      	pop	{r3, pc}
   b6224:	00030238 	.word	0x00030238

000b6228 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6228:	b508      	push	{r3, lr}
   b622a:	4b02      	ldr	r3, [pc, #8]	; (b6234 <hal_spi_begin+0xc>)
   b622c:	681b      	ldr	r3, [r3, #0]
   b622e:	681b      	ldr	r3, [r3, #0]
   b6230:	9301      	str	r3, [sp, #4]
   b6232:	bd08      	pop	{r3, pc}
   b6234:	00030230 	.word	0x00030230

000b6238 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b6238:	b508      	push	{r3, lr}
   b623a:	4b02      	ldr	r3, [pc, #8]	; (b6244 <hal_spi_set_bit_order+0xc>)
   b623c:	681b      	ldr	r3, [r3, #0]
   b623e:	689b      	ldr	r3, [r3, #8]
   b6240:	9301      	str	r3, [sp, #4]
   b6242:	bd08      	pop	{r3, pc}
   b6244:	00030230 	.word	0x00030230

000b6248 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b6248:	b508      	push	{r3, lr}
   b624a:	4b02      	ldr	r3, [pc, #8]	; (b6254 <hal_spi_set_data_mode+0xc>)
   b624c:	681b      	ldr	r3, [r3, #0]
   b624e:	68db      	ldr	r3, [r3, #12]
   b6250:	9301      	str	r3, [sp, #4]
   b6252:	bd08      	pop	{r3, pc}
   b6254:	00030230 	.word	0x00030230

000b6258 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b6258:	b508      	push	{r3, lr}
   b625a:	4b02      	ldr	r3, [pc, #8]	; (b6264 <hal_spi_set_clock_divider+0xc>)
   b625c:	681b      	ldr	r3, [r3, #0]
   b625e:	691b      	ldr	r3, [r3, #16]
   b6260:	9301      	str	r3, [sp, #4]
   b6262:	bd08      	pop	{r3, pc}
   b6264:	00030230 	.word	0x00030230

000b6268 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6268:	b508      	push	{r3, lr}
   b626a:	4b02      	ldr	r3, [pc, #8]	; (b6274 <hal_spi_transfer+0xc>)
   b626c:	681b      	ldr	r3, [r3, #0]
   b626e:	695b      	ldr	r3, [r3, #20]
   b6270:	9301      	str	r3, [sp, #4]
   b6272:	bd08      	pop	{r3, pc}
   b6274:	00030230 	.word	0x00030230

000b6278 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6278:	b508      	push	{r3, lr}
   b627a:	4b02      	ldr	r3, [pc, #8]	; (b6284 <hal_spi_init+0xc>)
   b627c:	681b      	ldr	r3, [r3, #0]
   b627e:	69db      	ldr	r3, [r3, #28]
   b6280:	9301      	str	r3, [sp, #4]
   b6282:	bd08      	pop	{r3, pc}
   b6284:	00030230 	.word	0x00030230

000b6288 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6288:	b508      	push	{r3, lr}
   b628a:	4b02      	ldr	r3, [pc, #8]	; (b6294 <hal_spi_is_enabled+0xc>)
   b628c:	681b      	ldr	r3, [r3, #0]
   b628e:	6a1b      	ldr	r3, [r3, #32]
   b6290:	9301      	str	r3, [sp, #4]
   b6292:	bd08      	pop	{r3, pc}
   b6294:	00030230 	.word	0x00030230

000b6298 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6298:	b508      	push	{r3, lr}
   b629a:	4b02      	ldr	r3, [pc, #8]	; (b62a4 <hal_spi_info+0xc>)
   b629c:	681b      	ldr	r3, [r3, #0]
   b629e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b62a0:	9301      	str	r3, [sp, #4]
   b62a2:	bd08      	pop	{r3, pc}
   b62a4:	00030230 	.word	0x00030230

000b62a8 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b62a8:	b508      	push	{r3, lr}
   b62aa:	4b02      	ldr	r3, [pc, #8]	; (b62b4 <hal_spi_acquire+0xc>)
   b62ac:	681b      	ldr	r3, [r3, #0]
   b62ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b62b0:	9301      	str	r3, [sp, #4]
   b62b2:	bd08      	pop	{r3, pc}
   b62b4:	00030230 	.word	0x00030230

000b62b8 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b62b8:	b508      	push	{r3, lr}
   b62ba:	4b02      	ldr	r3, [pc, #8]	; (b62c4 <hal_spi_release+0xc>)
   b62bc:	681b      	ldr	r3, [r3, #0]
   b62be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b62c0:	9301      	str	r3, [sp, #4]
   b62c2:	bd08      	pop	{r3, pc}
   b62c4:	00030230 	.word	0x00030230

000b62c8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b62c8:	b508      	push	{r3, lr}
   b62ca:	4b02      	ldr	r3, [pc, #8]	; (b62d4 <hal_usart_write+0xc>)
   b62cc:	681b      	ldr	r3, [r3, #0]
   b62ce:	68db      	ldr	r3, [r3, #12]
   b62d0:	9301      	str	r3, [sp, #4]
   b62d2:	bd08      	pop	{r3, pc}
   b62d4:	0003023c 	.word	0x0003023c

000b62d8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b62d8:	b508      	push	{r3, lr}
   b62da:	4b02      	ldr	r3, [pc, #8]	; (b62e4 <hal_usart_available+0xc>)
   b62dc:	681b      	ldr	r3, [r3, #0]
   b62de:	691b      	ldr	r3, [r3, #16]
   b62e0:	9301      	str	r3, [sp, #4]
   b62e2:	bd08      	pop	{r3, pc}
   b62e4:	0003023c 	.word	0x0003023c

000b62e8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b62e8:	b508      	push	{r3, lr}
   b62ea:	4b02      	ldr	r3, [pc, #8]	; (b62f4 <hal_usart_read+0xc>)
   b62ec:	681b      	ldr	r3, [r3, #0]
   b62ee:	695b      	ldr	r3, [r3, #20]
   b62f0:	9301      	str	r3, [sp, #4]
   b62f2:	bd08      	pop	{r3, pc}
   b62f4:	0003023c 	.word	0x0003023c

000b62f8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b62f8:	b508      	push	{r3, lr}
   b62fa:	4b02      	ldr	r3, [pc, #8]	; (b6304 <hal_usart_peek+0xc>)
   b62fc:	681b      	ldr	r3, [r3, #0]
   b62fe:	699b      	ldr	r3, [r3, #24]
   b6300:	9301      	str	r3, [sp, #4]
   b6302:	bd08      	pop	{r3, pc}
   b6304:	0003023c 	.word	0x0003023c

000b6308 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6308:	b508      	push	{r3, lr}
   b630a:	4b02      	ldr	r3, [pc, #8]	; (b6314 <hal_usart_flush+0xc>)
   b630c:	681b      	ldr	r3, [r3, #0]
   b630e:	69db      	ldr	r3, [r3, #28]
   b6310:	9301      	str	r3, [sp, #4]
   b6312:	bd08      	pop	{r3, pc}
   b6314:	0003023c 	.word	0x0003023c

000b6318 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6318:	b508      	push	{r3, lr}
   b631a:	4b02      	ldr	r3, [pc, #8]	; (b6324 <hal_usart_is_enabled+0xc>)
   b631c:	681b      	ldr	r3, [r3, #0]
   b631e:	6a1b      	ldr	r3, [r3, #32]
   b6320:	9301      	str	r3, [sp, #4]
   b6322:	bd08      	pop	{r3, pc}
   b6324:	0003023c 	.word	0x0003023c

000b6328 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6328:	b508      	push	{r3, lr}
   b632a:	4b02      	ldr	r3, [pc, #8]	; (b6334 <hal_usart_available_data_for_write+0xc>)
   b632c:	681b      	ldr	r3, [r3, #0]
   b632e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6330:	9301      	str	r3, [sp, #4]
   b6332:	bd08      	pop	{r3, pc}
   b6334:	0003023c 	.word	0x0003023c

000b6338 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6338:	b508      	push	{r3, lr}
   b633a:	4b02      	ldr	r3, [pc, #8]	; (b6344 <hal_usart_init_ex+0xc>)
   b633c:	681b      	ldr	r3, [r3, #0]
   b633e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6340:	9301      	str	r3, [sp, #4]
   b6342:	bd08      	pop	{r3, pc}
   b6344:	0003023c 	.word	0x0003023c

000b6348 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6348:	b508      	push	{r3, lr}
   b634a:	4b02      	ldr	r3, [pc, #8]	; (b6354 <HAL_USB_USART_Init+0xc>)
   b634c:	681b      	ldr	r3, [r3, #0]
   b634e:	681b      	ldr	r3, [r3, #0]
   b6350:	9301      	str	r3, [sp, #4]
   b6352:	bd08      	pop	{r3, pc}
   b6354:	0003024c 	.word	0x0003024c

000b6358 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6358:	b508      	push	{r3, lr}
   b635a:	4b02      	ldr	r3, [pc, #8]	; (b6364 <HAL_USB_USART_Begin+0xc>)
   b635c:	681b      	ldr	r3, [r3, #0]
   b635e:	685b      	ldr	r3, [r3, #4]
   b6360:	9301      	str	r3, [sp, #4]
   b6362:	bd08      	pop	{r3, pc}
   b6364:	0003024c 	.word	0x0003024c

000b6368 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6368:	b508      	push	{r3, lr}
   b636a:	4b02      	ldr	r3, [pc, #8]	; (b6374 <HAL_USB_USART_Available_Data+0xc>)
   b636c:	681b      	ldr	r3, [r3, #0]
   b636e:	691b      	ldr	r3, [r3, #16]
   b6370:	9301      	str	r3, [sp, #4]
   b6372:	bd08      	pop	{r3, pc}
   b6374:	0003024c 	.word	0x0003024c

000b6378 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6378:	b508      	push	{r3, lr}
   b637a:	4b02      	ldr	r3, [pc, #8]	; (b6384 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b637c:	681b      	ldr	r3, [r3, #0]
   b637e:	695b      	ldr	r3, [r3, #20]
   b6380:	9301      	str	r3, [sp, #4]
   b6382:	bd08      	pop	{r3, pc}
   b6384:	0003024c 	.word	0x0003024c

000b6388 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6388:	b508      	push	{r3, lr}
   b638a:	4b02      	ldr	r3, [pc, #8]	; (b6394 <HAL_USB_USART_Receive_Data+0xc>)
   b638c:	681b      	ldr	r3, [r3, #0]
   b638e:	699b      	ldr	r3, [r3, #24]
   b6390:	9301      	str	r3, [sp, #4]
   b6392:	bd08      	pop	{r3, pc}
   b6394:	0003024c 	.word	0x0003024c

000b6398 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6398:	b508      	push	{r3, lr}
   b639a:	4b02      	ldr	r3, [pc, #8]	; (b63a4 <HAL_USB_USART_Send_Data+0xc>)
   b639c:	681b      	ldr	r3, [r3, #0]
   b639e:	69db      	ldr	r3, [r3, #28]
   b63a0:	9301      	str	r3, [sp, #4]
   b63a2:	bd08      	pop	{r3, pc}
   b63a4:	0003024c 	.word	0x0003024c

000b63a8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b63a8:	b508      	push	{r3, lr}
   b63aa:	4b02      	ldr	r3, [pc, #8]	; (b63b4 <HAL_USB_USART_Flush_Data+0xc>)
   b63ac:	681b      	ldr	r3, [r3, #0]
   b63ae:	6a1b      	ldr	r3, [r3, #32]
   b63b0:	9301      	str	r3, [sp, #4]
   b63b2:	bd08      	pop	{r3, pc}
   b63b4:	0003024c 	.word	0x0003024c

000b63b8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b63b8:	b508      	push	{r3, lr}
   b63ba:	4b02      	ldr	r3, [pc, #8]	; (b63c4 <panic_+0xc>)
   b63bc:	681b      	ldr	r3, [r3, #0]
   b63be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b63c0:	9301      	str	r3, [sp, #4]
   b63c2:	bd08      	pop	{r3, pc}
   b63c4:	00030260 	.word	0x00030260

000b63c8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b63c8:	b508      	push	{r3, lr}
   b63ca:	4b02      	ldr	r3, [pc, #8]	; (b63d4 <log_message+0xc>)
   b63cc:	681b      	ldr	r3, [r3, #0]
   b63ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b63d0:	9301      	str	r3, [sp, #4]
   b63d2:	bd08      	pop	{r3, pc}
   b63d4:	00030260 	.word	0x00030260

000b63d8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b63d8:	b508      	push	{r3, lr}
   b63da:	4b02      	ldr	r3, [pc, #8]	; (b63e4 <set_system_mode+0xc>)
   b63dc:	681b      	ldr	r3, [r3, #0]
   b63de:	685b      	ldr	r3, [r3, #4]
   b63e0:	9301      	str	r3, [sp, #4]
   b63e2:	bd08      	pop	{r3, pc}
   b63e4:	00030220 	.word	0x00030220

000b63e8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b63e8:	b508      	push	{r3, lr}
   b63ea:	4b02      	ldr	r3, [pc, #8]	; (b63f4 <system_delay_ms+0xc>)
   b63ec:	681b      	ldr	r3, [r3, #0]
   b63ee:	695b      	ldr	r3, [r3, #20]
   b63f0:	9301      	str	r3, [sp, #4]
   b63f2:	bd08      	pop	{r3, pc}
   b63f4:	00030220 	.word	0x00030220

000b63f8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b63f8:	b508      	push	{r3, lr}
   b63fa:	4b03      	ldr	r3, [pc, #12]	; (b6408 <system_ctrl_set_app_request_handler+0x10>)
   b63fc:	681b      	ldr	r3, [r3, #0]
   b63fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6402:	9301      	str	r3, [sp, #4]
   b6404:	bd08      	pop	{r3, pc}
   b6406:	0000      	.short	0x0000
   b6408:	00030220 	.word	0x00030220

000b640c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b640c:	b508      	push	{r3, lr}
   b640e:	4b03      	ldr	r3, [pc, #12]	; (b641c <system_ctrl_set_result+0x10>)
   b6410:	681b      	ldr	r3, [r3, #0]
   b6412:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6416:	9301      	str	r3, [sp, #4]
   b6418:	bd08      	pop	{r3, pc}
   b641a:	0000      	.short	0x0000
   b641c:	00030220 	.word	0x00030220

000b6420 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6420:	b508      	push	{r3, lr}
   b6422:	4b02      	ldr	r3, [pc, #8]	; (b642c <spark_set_random_seed_from_cloud_handler+0xc>)
   b6424:	681b      	ldr	r3, [r3, #0]
   b6426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6428:	9301      	str	r3, [sp, #4]
   b642a:	bd08      	pop	{r3, pc}
   b642c:	00030244 	.word	0x00030244

000b6430 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6430:	b508      	push	{r3, lr}
   b6432:	4b02      	ldr	r3, [pc, #8]	; (b643c <network_connect+0xc>)
   b6434:	681b      	ldr	r3, [r3, #0]
   b6436:	685b      	ldr	r3, [r3, #4]
   b6438:	9301      	str	r3, [sp, #4]
   b643a:	bd08      	pop	{r3, pc}
   b643c:	00030240 	.word	0x00030240

000b6440 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6440:	b508      	push	{r3, lr}
   b6442:	4b02      	ldr	r3, [pc, #8]	; (b644c <network_connecting+0xc>)
   b6444:	681b      	ldr	r3, [r3, #0]
   b6446:	689b      	ldr	r3, [r3, #8]
   b6448:	9301      	str	r3, [sp, #4]
   b644a:	bd08      	pop	{r3, pc}
   b644c:	00030240 	.word	0x00030240

000b6450 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6450:	b508      	push	{r3, lr}
   b6452:	4b02      	ldr	r3, [pc, #8]	; (b645c <network_disconnect+0xc>)
   b6454:	681b      	ldr	r3, [r3, #0]
   b6456:	68db      	ldr	r3, [r3, #12]
   b6458:	9301      	str	r3, [sp, #4]
   b645a:	bd08      	pop	{r3, pc}
   b645c:	00030240 	.word	0x00030240

000b6460 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6460:	b508      	push	{r3, lr}
   b6462:	4b02      	ldr	r3, [pc, #8]	; (b646c <network_ready+0xc>)
   b6464:	681b      	ldr	r3, [r3, #0]
   b6466:	691b      	ldr	r3, [r3, #16]
   b6468:	9301      	str	r3, [sp, #4]
   b646a:	bd08      	pop	{r3, pc}
   b646c:	00030240 	.word	0x00030240

000b6470 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6470:	b508      	push	{r3, lr}
   b6472:	4b02      	ldr	r3, [pc, #8]	; (b647c <network_on+0xc>)
   b6474:	681b      	ldr	r3, [r3, #0]
   b6476:	695b      	ldr	r3, [r3, #20]
   b6478:	9301      	str	r3, [sp, #4]
   b647a:	bd08      	pop	{r3, pc}
   b647c:	00030240 	.word	0x00030240

000b6480 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6480:	b508      	push	{r3, lr}
   b6482:	4b02      	ldr	r3, [pc, #8]	; (b648c <network_off+0xc>)
   b6484:	681b      	ldr	r3, [r3, #0]
   b6486:	699b      	ldr	r3, [r3, #24]
   b6488:	9301      	str	r3, [sp, #4]
   b648a:	bd08      	pop	{r3, pc}
   b648c:	00030240 	.word	0x00030240

000b6490 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6490:	b508      	push	{r3, lr}
   b6492:	4b02      	ldr	r3, [pc, #8]	; (b649c <network_listen+0xc>)
   b6494:	681b      	ldr	r3, [r3, #0]
   b6496:	69db      	ldr	r3, [r3, #28]
   b6498:	9301      	str	r3, [sp, #4]
   b649a:	bd08      	pop	{r3, pc}
   b649c:	00030240 	.word	0x00030240

000b64a0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b64a0:	b508      	push	{r3, lr}
   b64a2:	4b02      	ldr	r3, [pc, #8]	; (b64ac <network_listening+0xc>)
   b64a4:	681b      	ldr	r3, [r3, #0]
   b64a6:	6a1b      	ldr	r3, [r3, #32]
   b64a8:	9301      	str	r3, [sp, #4]
   b64aa:	bd08      	pop	{r3, pc}
   b64ac:	00030240 	.word	0x00030240

000b64b0 <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b64b0:	b508      	push	{r3, lr}
   b64b2:	4b02      	ldr	r3, [pc, #8]	; (b64bc <network_set_credentials+0xc>)
   b64b4:	681b      	ldr	r3, [r3, #0]
   b64b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b64b8:	9301      	str	r3, [sp, #4]
   b64ba:	bd08      	pop	{r3, pc}
   b64bc:	00030240 	.word	0x00030240

000b64c0 <network_set_listen_timeout>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b64c0:	b508      	push	{r3, lr}
   b64c2:	4b02      	ldr	r3, [pc, #8]	; (b64cc <network_set_listen_timeout+0xc>)
   b64c4:	681b      	ldr	r3, [r3, #0]
   b64c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b64c8:	9301      	str	r3, [sp, #4]
   b64ca:	bd08      	pop	{r3, pc}
   b64cc:	00030240 	.word	0x00030240

000b64d0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b64d0:	b508      	push	{r3, lr}
   b64d2:	4b02      	ldr	r3, [pc, #8]	; (b64dc <network_get_listen_timeout+0xc>)
   b64d4:	681b      	ldr	r3, [r3, #0]
   b64d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b64d8:	9301      	str	r3, [sp, #4]
   b64da:	bd08      	pop	{r3, pc}
   b64dc:	00030240 	.word	0x00030240

000b64e0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b64e0:	b508      	push	{r3, lr}
   b64e2:	4b02      	ldr	r3, [pc, #8]	; (b64ec <network_is_on+0xc>)
   b64e4:	681b      	ldr	r3, [r3, #0]
   b64e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b64e8:	9301      	str	r3, [sp, #4]
   b64ea:	bd08      	pop	{r3, pc}
   b64ec:	00030240 	.word	0x00030240

000b64f0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b64f0:	b508      	push	{r3, lr}
   b64f2:	4b02      	ldr	r3, [pc, #8]	; (b64fc <network_is_off+0xc>)
   b64f4:	681b      	ldr	r3, [r3, #0]
   b64f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b64f8:	9301      	str	r3, [sp, #4]
   b64fa:	bd08      	pop	{r3, pc}
   b64fc:	00030240 	.word	0x00030240

000b6500 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6500:	b508      	push	{r3, lr}
   b6502:	4b02      	ldr	r3, [pc, #8]	; (b650c <malloc+0xc>)
   b6504:	681b      	ldr	r3, [r3, #0]
   b6506:	681b      	ldr	r3, [r3, #0]
   b6508:	9301      	str	r3, [sp, #4]
   b650a:	bd08      	pop	{r3, pc}
   b650c:	0003021c 	.word	0x0003021c

000b6510 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6510:	b508      	push	{r3, lr}
   b6512:	4b02      	ldr	r3, [pc, #8]	; (b651c <free+0xc>)
   b6514:	681b      	ldr	r3, [r3, #0]
   b6516:	685b      	ldr	r3, [r3, #4]
   b6518:	9301      	str	r3, [sp, #4]
   b651a:	bd08      	pop	{r3, pc}
   b651c:	0003021c 	.word	0x0003021c

000b6520 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6520:	b508      	push	{r3, lr}
   b6522:	4b02      	ldr	r3, [pc, #8]	; (b652c <realloc+0xc>)
   b6524:	681b      	ldr	r3, [r3, #0]
   b6526:	689b      	ldr	r3, [r3, #8]
   b6528:	9301      	str	r3, [sp, #4]
   b652a:	bd08      	pop	{r3, pc}
   b652c:	0003021c 	.word	0x0003021c

000b6530 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6530:	b508      	push	{r3, lr}
   b6532:	4b02      	ldr	r3, [pc, #8]	; (b653c <vsnprintf+0xc>)
   b6534:	681b      	ldr	r3, [r3, #0]
   b6536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6538:	9301      	str	r3, [sp, #4]
   b653a:	bd08      	pop	{r3, pc}
   b653c:	0003021c 	.word	0x0003021c

000b6540 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6540:	b508      	push	{r3, lr}
   b6542:	4b02      	ldr	r3, [pc, #8]	; (b654c <abort+0xc>)
   b6544:	681b      	ldr	r3, [r3, #0]
   b6546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6548:	9301      	str	r3, [sp, #4]
   b654a:	bd08      	pop	{r3, pc}
   b654c:	0003021c 	.word	0x0003021c

000b6550 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6550:	b508      	push	{r3, lr}
   b6552:	4b02      	ldr	r3, [pc, #8]	; (b655c <__errno+0xc>)
   b6554:	681b      	ldr	r3, [r3, #0]
   b6556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6558:	9301      	str	r3, [sp, #4]
   b655a:	bd08      	pop	{r3, pc}
   b655c:	0003021c 	.word	0x0003021c

000b6560 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6560:	b508      	push	{r3, lr}
   b6562:	4b02      	ldr	r3, [pc, #8]	; (b656c <__assert_func+0xc>)
   b6564:	681b      	ldr	r3, [r3, #0]
   b6566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6568:	9301      	str	r3, [sp, #4]
   b656a:	bd08      	pop	{r3, pc}
   b656c:	0003021c 	.word	0x0003021c

000b6570 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6570:	b508      	push	{r3, lr}
   b6572:	4b02      	ldr	r3, [pc, #8]	; (b657c <newlib_impure_ptr_callback+0xc>)
   b6574:	681b      	ldr	r3, [r3, #0]
   b6576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6578:	9301      	str	r3, [sp, #4]
   b657a:	bd08      	pop	{r3, pc}
   b657c:	0003021c 	.word	0x0003021c

000b6580 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b6580:	428a      	cmp	r2, r1
{
   b6582:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b6584:	d007      	beq.n	b6596 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b6586:	1a44      	subs	r4, r0, r1
   b6588:	9802      	ldr	r0, [sp, #8]
   b658a:	1ac0      	subs	r0, r0, r3
   b658c:	4344      	muls	r4, r0
   b658e:	1a50      	subs	r0, r2, r1
   b6590:	fb94 f0f0 	sdiv	r0, r4, r0
   b6594:	4418      	add	r0, r3
}
   b6596:	bd10      	pop	{r4, pc}

000b6598 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6598:	2100      	movs	r1, #0
   b659a:	f7ff bf25 	b.w	b63e8 <system_delay_ms>

000b659e <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b659e:	b510      	push	{r4, lr}
      if (_M_manager)
   b65a0:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b65a2:	4604      	mov	r4, r0
      if (_M_manager)
   b65a4:	b113      	cbz	r3, b65ac <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b65a6:	2203      	movs	r2, #3
   b65a8:	4601      	mov	r1, r0
   b65aa:	4798      	blx	r3
    }
   b65ac:	4620      	mov	r0, r4
   b65ae:	bd10      	pop	{r4, pc}

000b65b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b65b0:	4802      	ldr	r0, [pc, #8]	; (b65bc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b65b2:	2300      	movs	r3, #0
   b65b4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b65b6:	f7ff bd07 	b.w	b5fc8 <os_mutex_recursive_create>
   b65ba:	bf00      	nop
   b65bc:	2003e634 	.word	0x2003e634

000b65c0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b65c0:	2200      	movs	r2, #0
   b65c2:	6840      	ldr	r0, [r0, #4]
   b65c4:	4611      	mov	r1, r2
   b65c6:	f7ff bf6b 	b.w	b64a0 <network_listening>

000b65ca <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b65ca:	2200      	movs	r2, #0
   b65cc:	6840      	ldr	r0, [r0, #4]
   b65ce:	4611      	mov	r1, r2
   b65d0:	f7ff bf7e 	b.w	b64d0 <network_get_listen_timeout>

000b65d4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b65d4:	6840      	ldr	r0, [r0, #4]
   b65d6:	2200      	movs	r2, #0
   b65d8:	f7ff bf72 	b.w	b64c0 <network_set_listen_timeout>

000b65dc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b65dc:	6840      	ldr	r0, [r0, #4]
   b65de:	2200      	movs	r2, #0
   b65e0:	f081 0101 	eor.w	r1, r1, #1
   b65e4:	f7ff bf54 	b.w	b6490 <network_listen>

000b65e8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b65e8:	2300      	movs	r3, #0
   b65ea:	6840      	ldr	r0, [r0, #4]
   b65ec:	461a      	mov	r2, r3
   b65ee:	4619      	mov	r1, r3
   b65f0:	f7ff bf46 	b.w	b6480 <network_off>

000b65f4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b65f4:	2300      	movs	r3, #0
   b65f6:	6840      	ldr	r0, [r0, #4]
   b65f8:	461a      	mov	r2, r3
   b65fa:	4619      	mov	r1, r3
   b65fc:	f7ff bf38 	b.w	b6470 <network_on>

000b6600 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6600:	2200      	movs	r2, #0
   b6602:	6840      	ldr	r0, [r0, #4]
   b6604:	4611      	mov	r1, r2
   b6606:	f7ff bf2b 	b.w	b6460 <network_ready>

000b660a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b660a:	2200      	movs	r2, #0
   b660c:	6840      	ldr	r0, [r0, #4]
   b660e:	4611      	mov	r1, r2
   b6610:	f7ff bf16 	b.w	b6440 <network_connecting>

000b6614 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6614:	6840      	ldr	r0, [r0, #4]
   b6616:	2200      	movs	r2, #0
   b6618:	2102      	movs	r1, #2
   b661a:	f7ff bf19 	b.w	b6450 <network_disconnect>

000b661e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b661e:	2300      	movs	r3, #0
   b6620:	6840      	ldr	r0, [r0, #4]
   b6622:	461a      	mov	r2, r3
   b6624:	f7ff bf04 	b.w	b6430 <network_connect>

000b6628 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6628:	4b02      	ldr	r3, [pc, #8]	; (b6634 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b662a:	2203      	movs	r2, #3
   b662c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b662e:	4a02      	ldr	r2, [pc, #8]	; (b6638 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6630:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6632:	4770      	bx	lr
   b6634:	2003e638 	.word	0x2003e638
   b6638:	000b8a24 	.word	0x000b8a24

000b663c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b663c:	4770      	bx	lr

000b663e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b663e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6640:	4606      	mov	r6, r0
   b6642:	4615      	mov	r5, r2
   b6644:	460c      	mov	r4, r1
   b6646:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6648:	42bc      	cmp	r4, r7
   b664a:	d006      	beq.n	b665a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b664c:	6833      	ldr	r3, [r6, #0]
   b664e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6652:	689b      	ldr	r3, [r3, #8]
   b6654:	4630      	mov	r0, r6
   b6656:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6658:	e7f6      	b.n	b6648 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b665a:	4628      	mov	r0, r5
   b665c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b665e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b665e:	7c00      	ldrb	r0, [r0, #16]
   b6660:	2200      	movs	r2, #0
   b6662:	f7ff bd41 	b.w	b60e8 <hal_i2c_write>

000b6666 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6666:	7c00      	ldrb	r0, [r0, #16]
   b6668:	2100      	movs	r1, #0
   b666a:	f7ff bd45 	b.w	b60f8 <hal_i2c_available>

000b666e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b666e:	7c00      	ldrb	r0, [r0, #16]
   b6670:	2100      	movs	r1, #0
   b6672:	f7ff bd49 	b.w	b6108 <hal_i2c_read>

000b6676 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6676:	7c00      	ldrb	r0, [r0, #16]
   b6678:	2100      	movs	r1, #0
   b667a:	f7ff bd4d 	b.w	b6118 <hal_i2c_peek>

000b667e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b667e:	7c00      	ldrb	r0, [r0, #16]
   b6680:	2100      	movs	r1, #0
   b6682:	f7ff bd51 	b.w	b6128 <hal_i2c_flush>

000b6686 <_ZN7TwoWireD0Ev>:
   b6686:	b510      	push	{r4, lr}
   b6688:	2114      	movs	r1, #20
   b668a:	4604      	mov	r4, r0
   b668c:	f7fd fd05 	bl	b409a <_ZdlPvj>
   b6690:	4620      	mov	r0, r4
   b6692:	bd10      	pop	{r4, pc}

000b6694 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6694:	b538      	push	{r3, r4, r5, lr}
   b6696:	4604      	mov	r4, r0
   b6698:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b669a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b669e:	2200      	movs	r2, #0
   b66a0:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b66a4:	4b09      	ldr	r3, [pc, #36]	; (b66cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b66a6:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b66a8:	4608      	mov	r0, r1
   b66aa:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b66ac:	4629      	mov	r1, r5
   b66ae:	f7ff fd4b 	bl	b6148 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b66b2:	30bf      	adds	r0, #191	; 0xbf
   b66b4:	d108      	bne.n	b66c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b66b6:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b66b8:	07db      	lsls	r3, r3, #31
   b66ba:	d505      	bpl.n	b66c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b66bc:	6868      	ldr	r0, [r5, #4]
   b66be:	f7ff ff27 	bl	b6510 <free>
    free(conf.tx_buffer);
   b66c2:	68e8      	ldr	r0, [r5, #12]
   b66c4:	f7ff ff24 	bl	b6510 <free>
}
   b66c8:	4620      	mov	r0, r4
   b66ca:	bd38      	pop	{r3, r4, r5, pc}
   b66cc:	000b8a60 	.word	0x000b8a60

000b66d0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b66d0:	2300      	movs	r3, #0
   b66d2:	7c00      	ldrb	r0, [r0, #16]
   b66d4:	461a      	mov	r2, r3
   b66d6:	4619      	mov	r1, r3
   b66d8:	f7ff bcee 	b.w	b60b8 <hal_i2c_begin>

000b66dc <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b66dc:	7c00      	ldrb	r0, [r0, #16]
   b66de:	2200      	movs	r2, #0
   b66e0:	f7ff bcf2 	b.w	b60c8 <hal_i2c_begin_transmission>

000b66e4 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b66e4:	b2c9      	uxtb	r1, r1
   b66e6:	f7ff bff9 	b.w	b66dc <_ZN7TwoWire17beginTransmissionEh>

000b66ea <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b66ea:	7c00      	ldrb	r0, [r0, #16]
   b66ec:	2200      	movs	r2, #0
   b66ee:	f7ff bcf3 	b.w	b60d8 <hal_i2c_end_transmission>

000b66f2 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b66f2:	2101      	movs	r1, #1
   b66f4:	f7ff bff9 	b.w	b66ea <_ZN7TwoWire15endTransmissionEh>

000b66f8 <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b66f8:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
   b66fa:	b510      	push	{r4, lr}
   b66fc:	b90a      	cbnz	r2, b6702 <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
   b66fe:	f001 fa37 	bl	b7b70 <_ZSt25__throw_bad_function_callv>
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
   b6702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6706:	68c3      	ldr	r3, [r0, #12]
   b6708:	4718      	bx	r3
	...

000b670c <_Z16allocate_handlertRSt8functionIFvvEE>:
{
   b670c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
   b670e:	4f10      	ldr	r7, [pc, #64]	; (b6750 <_Z16allocate_handlertRSt8functionIFvvEE+0x44>)
   b6710:	f857 4020 	ldr.w	r4, [r7, r0, lsl #2]
{
   b6714:	4606      	mov	r6, r0
   b6716:	460d      	mov	r5, r1
    delete handlers[pin];
   b6718:	b134      	cbz	r4, b6728 <_Z16allocate_handlertRSt8functionIFvvEE+0x1c>
    class function<_Res(_ArgTypes...)>
   b671a:	4620      	mov	r0, r4
   b671c:	f7ff ff3f 	bl	b659e <_ZNSt14_Function_baseD1Ev>
   b6720:	2110      	movs	r1, #16
   b6722:	4620      	mov	r0, r4
   b6724:	f7fd fcb9 	bl	b409a <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
   b6728:	2010      	movs	r0, #16
   b672a:	f7fd fcb2 	bl	b4092 <_Znwj>
   b672e:	4604      	mov	r4, r0
   b6730:	b150      	cbz	r0, b6748 <_Z16allocate_handlertRSt8functionIFvvEE+0x3c>
    _Function_base() : _M_manager(nullptr) { }
   b6732:	2300      	movs	r3, #0
   b6734:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6736:	68ab      	ldr	r3, [r5, #8]
      if (static_cast<bool>(__x))
   b6738:	b133      	cbz	r3, b6748 <_Z16allocate_handlertRSt8functionIFvvEE+0x3c>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b673a:	2202      	movs	r2, #2
   b673c:	4629      	mov	r1, r5
   b673e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6740:	68eb      	ldr	r3, [r5, #12]
   b6742:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6744:	68ab      	ldr	r3, [r5, #8]
   b6746:	60a3      	str	r3, [r4, #8]
   b6748:	f847 4026 	str.w	r4, [r7, r6, lsl #2]
}
   b674c:	4620      	mov	r0, r4
   b674e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6750:	2003e640 	.word	0x2003e640

000b6754 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
  }
  return nullptr;
}

bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b6754:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6756:	b087      	sub	sp, #28
   b6758:	4605      	mov	r5, r0
   b675a:	9103      	str	r1, [sp, #12]
   b675c:	4617      	mov	r7, r2
   b675e:	461e      	mov	r6, r3
    HAL_Interrupts_Detach(pin);
   b6760:	f7ff fc92 	bl	b6088 <HAL_Interrupts_Detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
   b6764:	9903      	ldr	r1, [sp, #12]
   b6766:	4628      	mov	r0, r5
   b6768:	f7ff ffd0 	bl	b670c <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
   b676c:	4604      	mov	r4, r0
   b676e:	b1e8      	cbz	r0, b67ac <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
        HAL_InterruptExtraConfiguration extra = {};
   b6770:	2100      	movs	r1, #0
  if (priority >= 0) {
   b6772:	428e      	cmp	r6, r1
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b6774:	f04f 0304 	mov.w	r3, #4
        HAL_InterruptExtraConfiguration extra = {};
   b6778:	f8ad 1015 	strh.w	r1, [sp, #21]
   b677c:	f88d 1017 	strb.w	r1, [sp, #23]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b6780:	f88d 3014 	strb.w	r3, [sp, #20]
    return &extra;
   b6784:	bfa2      	ittt	ge
   b6786:	a905      	addge	r1, sp, #20
    extra.IRQChannelSubPriority = subpriority;
   b6788:	f89d 3030 	ldrbge.w	r3, [sp, #48]	; 0x30
   b678c:	f88d 3016 	strbge.w	r3, [sp, #22]
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b6790:	9100      	str	r1, [sp, #0]
   b6792:	4602      	mov	r2, r0
   b6794:	4907      	ldr	r1, [pc, #28]	; (b67b4 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x60>)
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b6796:	bfa8      	it	ge
   b6798:	f88d 6015 	strbge.w	r6, [sp, #21]
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b679c:	463b      	mov	r3, r7
   b679e:	4628      	mov	r0, r5
   b67a0:	f7ff fc6a 	bl	b6078 <HAL_Interrupts_Attach>
   b67a4:	b110      	cbz	r0, b67ac <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
            return false;
   b67a6:	2000      	movs	r0, #0
        }
    }
    return handler!=NULL;
}
   b67a8:	b007      	add	sp, #28
   b67aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return handler!=NULL;
   b67ac:	1e20      	subs	r0, r4, #0
   b67ae:	bf18      	it	ne
   b67b0:	2001      	movne	r0, #1
   b67b2:	e7f9      	b.n	b67a8 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x54>
   b67b4:	000b66f9 	.word	0x000b66f9

000b67b8 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   b67b8:	f7ff bc76 	b.w	b60a8 <HAL_Interrupts_Disable_All>

000b67bc <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   b67bc:	f7ff bc6c 	b.w	b6098 <HAL_Interrupts_Enable_All>

000b67c0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b67c0:	4770      	bx	lr

000b67c2 <_ZN9IPAddressD0Ev>:
   b67c2:	b510      	push	{r4, lr}
   b67c4:	2118      	movs	r1, #24
   b67c6:	4604      	mov	r4, r0
   b67c8:	f7fd fc67 	bl	b409a <_ZdlPvj>
   b67cc:	4620      	mov	r0, r4
   b67ce:	bd10      	pop	{r4, pc}

000b67d0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b67d0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b67d2:	7d03      	ldrb	r3, [r0, #20]
   b67d4:	2b06      	cmp	r3, #6
{
   b67d6:	b08d      	sub	sp, #52	; 0x34
   b67d8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b67da:	f100 0704 	add.w	r7, r0, #4
   b67de:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b67e2:	d012      	beq.n	b680a <_ZNK9IPAddress7printToER5Print+0x3a>
   b67e4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b67e8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b67ec:	220a      	movs	r2, #10
   b67ee:	4630      	mov	r0, r6
   b67f0:	f000 f973 	bl	b6ada <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b67f4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b67f6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b67f8:	d019      	beq.n	b682e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b67fa:	2c00      	cmp	r4, #0
   b67fc:	d0f4      	beq.n	b67e8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b67fe:	212e      	movs	r1, #46	; 0x2e
   b6800:	4630      	mov	r0, r6
   b6802:	f000 f951 	bl	b6aa8 <_ZN5Print5printEc>
   b6806:	4404      	add	r4, r0
   b6808:	e7ee      	b.n	b67e8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b680a:	232f      	movs	r3, #47	; 0x2f
   b680c:	466a      	mov	r2, sp
   b680e:	4639      	mov	r1, r7
   b6810:	200a      	movs	r0, #10
		buf[0] = 0;
   b6812:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6816:	f7ff fca7 	bl	b6168 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b681a:	4668      	mov	r0, sp
   b681c:	f001 fb1a 	bl	b7e54 <strlen>
   b6820:	6833      	ldr	r3, [r6, #0]
   b6822:	4602      	mov	r2, r0
   b6824:	68db      	ldr	r3, [r3, #12]
   b6826:	4669      	mov	r1, sp
   b6828:	4630      	mov	r0, r6
   b682a:	4798      	blx	r3
   b682c:	4604      	mov	r4, r0
    }
    return n;
}
   b682e:	4620      	mov	r0, r4
   b6830:	b00d      	add	sp, #52	; 0x34
   b6832:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6834 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6834:	b510      	push	{r4, lr}
   b6836:	4b05      	ldr	r3, [pc, #20]	; (b684c <_ZN9IPAddressC1Ev+0x18>)
   b6838:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b683a:	2211      	movs	r2, #17
   b683c:	f840 3b04 	str.w	r3, [r0], #4
   b6840:	2100      	movs	r1, #0
   b6842:	f001 fabf 	bl	b7dc4 <memset>
}
   b6846:	4620      	mov	r0, r4
   b6848:	bd10      	pop	{r4, pc}
   b684a:	bf00      	nop
   b684c:	000b8a88 	.word	0x000b8a88

000b6850 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6850:	4603      	mov	r3, r0
   b6852:	4a07      	ldr	r2, [pc, #28]	; (b6870 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6854:	b510      	push	{r4, lr}
   b6856:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b685a:	f101 0210 	add.w	r2, r1, #16
   b685e:	f851 4b04 	ldr.w	r4, [r1], #4
   b6862:	f843 4b04 	str.w	r4, [r3], #4
   b6866:	4291      	cmp	r1, r2
   b6868:	d1f9      	bne.n	b685e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b686a:	780a      	ldrb	r2, [r1, #0]
   b686c:	701a      	strb	r2, [r3, #0]
}
   b686e:	bd10      	pop	{r4, pc}
   b6870:	000b8a88 	.word	0x000b8a88

000b6874 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b6874:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b6876:	2b04      	cmp	r3, #4
   b6878:	d104      	bne.n	b6884 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b687a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b687c:	3800      	subs	r0, #0
   b687e:	bf18      	it	ne
   b6880:	2001      	movne	r0, #1
   b6882:	4770      	bx	lr
    } else if (version() == 6) {
   b6884:	2b06      	cmp	r3, #6
   b6886:	d107      	bne.n	b6898 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6888:	6843      	ldr	r3, [r0, #4]
   b688a:	b93b      	cbnz	r3, b689c <_ZNK9IPAddresscvbEv+0x28>
   b688c:	6883      	ldr	r3, [r0, #8]
   b688e:	b92b      	cbnz	r3, b689c <_ZNK9IPAddresscvbEv+0x28>
   b6890:	68c3      	ldr	r3, [r0, #12]
   b6892:	b91b      	cbnz	r3, b689c <_ZNK9IPAddresscvbEv+0x28>
   b6894:	6900      	ldr	r0, [r0, #16]
   b6896:	e7f1      	b.n	b687c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b6898:	2000      	movs	r0, #0
   b689a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b689c:	2001      	movs	r0, #1
}
   b689e:	4770      	bx	lr

000b68a0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b68a0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b68a2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b68a6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b68aa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b68ae:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b68b2:	2304      	movs	r3, #4
   b68b4:	6041      	str	r1, [r0, #4]
   b68b6:	7503      	strb	r3, [r0, #20]
}
   b68b8:	bd10      	pop	{r4, pc}
	...

000b68bc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b68bc:	b507      	push	{r0, r1, r2, lr}
   b68be:	4b06      	ldr	r3, [pc, #24]	; (b68d8 <_ZN9IPAddressC1EPKh+0x1c>)
   b68c0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b68c2:	78cb      	ldrb	r3, [r1, #3]
   b68c4:	9300      	str	r3, [sp, #0]
   b68c6:	788b      	ldrb	r3, [r1, #2]
   b68c8:	784a      	ldrb	r2, [r1, #1]
   b68ca:	7809      	ldrb	r1, [r1, #0]
   b68cc:	f7ff ffe8 	bl	b68a0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b68d0:	b003      	add	sp, #12
   b68d2:	f85d fb04 	ldr.w	pc, [sp], #4
   b68d6:	bf00      	nop
   b68d8:	000b8a88 	.word	0x000b8a88

000b68dc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b68dc:	4b01      	ldr	r3, [pc, #4]	; (b68e4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b68de:	4a02      	ldr	r2, [pc, #8]	; (b68e8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b68e0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b68e2:	4770      	bx	lr
   b68e4:	2003e6d0 	.word	0x2003e6d0
   b68e8:	000b8a94 	.word	0x000b8a94

000b68ec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b68ec:	2300      	movs	r3, #0
   b68ee:	6840      	ldr	r0, [r0, #4]
   b68f0:	461a      	mov	r2, r3
   b68f2:	f7ff bd9d 	b.w	b6430 <network_connect>

000b68f6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b68f6:	6840      	ldr	r0, [r0, #4]
   b68f8:	2200      	movs	r2, #0
   b68fa:	2102      	movs	r1, #2
   b68fc:	f7ff bda8 	b.w	b6450 <network_disconnect>

000b6900 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6900:	2200      	movs	r2, #0
   b6902:	6840      	ldr	r0, [r0, #4]
   b6904:	4611      	mov	r1, r2
   b6906:	f7ff bd9b 	b.w	b6440 <network_connecting>

000b690a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b690a:	2200      	movs	r2, #0
   b690c:	6840      	ldr	r0, [r0, #4]
   b690e:	4611      	mov	r1, r2
   b6910:	f7ff bda6 	b.w	b6460 <network_ready>

000b6914 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6914:	2300      	movs	r3, #0
   b6916:	6840      	ldr	r0, [r0, #4]
   b6918:	461a      	mov	r2, r3
   b691a:	4619      	mov	r1, r3
   b691c:	f7ff bda8 	b.w	b6470 <network_on>

000b6920 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6920:	2300      	movs	r3, #0
   b6922:	6840      	ldr	r0, [r0, #4]
   b6924:	461a      	mov	r2, r3
   b6926:	4619      	mov	r1, r3
   b6928:	f7ff bdaa 	b.w	b6480 <network_off>

000b692c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b692c:	6840      	ldr	r0, [r0, #4]
   b692e:	2100      	movs	r1, #0
   b6930:	f7ff bdd6 	b.w	b64e0 <network_is_on>

000b6934 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6934:	6840      	ldr	r0, [r0, #4]
   b6936:	2100      	movs	r1, #0
   b6938:	f7ff bdda 	b.w	b64f0 <network_is_off>

000b693c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b693c:	6840      	ldr	r0, [r0, #4]
   b693e:	2200      	movs	r2, #0
   b6940:	f081 0101 	eor.w	r1, r1, #1
   b6944:	f7ff bda4 	b.w	b6490 <network_listen>

000b6948 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6948:	6840      	ldr	r0, [r0, #4]
   b694a:	2200      	movs	r2, #0
   b694c:	f7ff bdb8 	b.w	b64c0 <network_set_listen_timeout>

000b6950 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6950:	2200      	movs	r2, #0
   b6952:	6840      	ldr	r0, [r0, #4]
   b6954:	4611      	mov	r1, r2
   b6956:	f7ff bdbb 	b.w	b64d0 <network_get_listen_timeout>

000b695a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b695a:	2200      	movs	r2, #0
   b695c:	6840      	ldr	r0, [r0, #4]
   b695e:	4611      	mov	r1, r2
   b6960:	f7ff bd9e 	b.w	b64a0 <network_listening>

000b6964 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6964:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6968:	b095      	sub	sp, #84	; 0x54
   b696a:	4614      	mov	r4, r2
   b696c:	460d      	mov	r5, r1
   b696e:	4607      	mov	r7, r0
    IPAddress addr;
   b6970:	f7ff ff60 	bl	b6834 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6974:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6976:	221c      	movs	r2, #28
   b6978:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b697a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b697c:	f001 fa22 	bl	b7dc4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6980:	2340      	movs	r3, #64	; 0x40
   b6982:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6984:	4620      	mov	r0, r4
   b6986:	466b      	mov	r3, sp
   b6988:	aa0c      	add	r2, sp, #48	; 0x30
   b698a:	2100      	movs	r1, #0
   b698c:	f7ff fc0c 	bl	b61a8 <netdb_getaddrinfo>
    if (!r) {
   b6990:	4604      	mov	r4, r0
   b6992:	2800      	cmp	r0, #0
   b6994:	d14b      	bne.n	b6a2e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6996:	4602      	mov	r2, r0
   b6998:	2101      	movs	r1, #1
   b699a:	6868      	ldr	r0, [r5, #4]
   b699c:	f7ff fd60 	bl	b6460 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b69a0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b69a2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b69a4:	4622      	mov	r2, r4
   b69a6:	6868      	ldr	r0, [r5, #4]
   b69a8:	f7ff fd5a 	bl	b6460 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b69ac:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b69ae:	4681      	mov	r9, r0
        bool ok = false;
   b69b0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b69b2:	2e00      	cmp	r6, #0
   b69b4:	d03b      	beq.n	b6a2e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b69b6:	2900      	cmp	r1, #0
   b69b8:	d139      	bne.n	b6a2e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b69ba:	6873      	ldr	r3, [r6, #4]
   b69bc:	2b02      	cmp	r3, #2
   b69be:	d003      	beq.n	b69c8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b69c0:	2b0a      	cmp	r3, #10
   b69c2:	d011      	beq.n	b69e8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b69c4:	69f6      	ldr	r6, [r6, #28]
   b69c6:	e7f4      	b.n	b69b2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b69c8:	f1b8 0f00 	cmp.w	r8, #0
   b69cc:	d0fa      	beq.n	b69c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b69ce:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b69d0:	a806      	add	r0, sp, #24
   b69d2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b69d4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b69d6:	f7ff ff71 	bl	b68bc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b69da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b69dc:	1d3c      	adds	r4, r7, #4
   b69de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b69e0:	682b      	ldr	r3, [r5, #0]
   b69e2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b69e4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b69e6:	e7ed      	b.n	b69c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b69e8:	f1b9 0f00 	cmp.w	r9, #0
   b69ec:	d0ea      	beq.n	b69c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b69ee:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b69f0:	2210      	movs	r2, #16
   b69f2:	a801      	add	r0, sp, #4
   b69f4:	f001 f9e6 	bl	b7dc4 <memset>
                    a.v = 6;
   b69f8:	2306      	movs	r3, #6
   b69fa:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b69fe:	ad01      	add	r5, sp, #4
   b6a00:	f104 0308 	add.w	r3, r4, #8
   b6a04:	3418      	adds	r4, #24
   b6a06:	6818      	ldr	r0, [r3, #0]
   b6a08:	6859      	ldr	r1, [r3, #4]
   b6a0a:	462a      	mov	r2, r5
   b6a0c:	c203      	stmia	r2!, {r0, r1}
   b6a0e:	3308      	adds	r3, #8
   b6a10:	42a3      	cmp	r3, r4
   b6a12:	4615      	mov	r5, r2
   b6a14:	d1f7      	bne.n	b6a06 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6a16:	a901      	add	r1, sp, #4
   b6a18:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6a1a:	ad07      	add	r5, sp, #28
   b6a1c:	f7ff ff18 	bl	b6850 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6a20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6a22:	1d3c      	adds	r4, r7, #4
   b6a24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6a26:	682b      	ldr	r3, [r5, #0]
   b6a28:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6a2a:	4649      	mov	r1, r9
   b6a2c:	e7ca      	b.n	b69c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6a2e:	9800      	ldr	r0, [sp, #0]
   b6a30:	f7ff fbb2 	bl	b6198 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6a34:	4638      	mov	r0, r7
   b6a36:	b015      	add	sp, #84	; 0x54
   b6a38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6a3c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6a3c:	4b02      	ldr	r3, [pc, #8]	; (b6a48 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6a3e:	4a03      	ldr	r2, [pc, #12]	; (b6a4c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6a40:	601a      	str	r2, [r3, #0]
   b6a42:	2200      	movs	r2, #0
   b6a44:	605a      	str	r2, [r3, #4]

} // spark
   b6a46:	4770      	bx	lr
   b6a48:	2003e6d4 	.word	0x2003e6d4
   b6a4c:	000b8aa0 	.word	0x000b8aa0

000b6a50 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6a52:	4606      	mov	r6, r0
   b6a54:	460d      	mov	r5, r1
  size_t n = 0;
   b6a56:	188f      	adds	r7, r1, r2
   b6a58:	2400      	movs	r4, #0
  while (size--) {
   b6a5a:	42bd      	cmp	r5, r7
   b6a5c:	d00c      	beq.n	b6a78 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6a5e:	6833      	ldr	r3, [r6, #0]
   b6a60:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6a64:	689b      	ldr	r3, [r3, #8]
   b6a66:	4630      	mov	r0, r6
   b6a68:	4798      	blx	r3
     if (chunk>=0)
   b6a6a:	1e03      	subs	r3, r0, #0
   b6a6c:	db01      	blt.n	b6a72 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6a6e:	441c      	add	r4, r3
  while (size--) {
   b6a70:	e7f3      	b.n	b6a5a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6a72:	2c00      	cmp	r4, #0
   b6a74:	bf08      	it	eq
   b6a76:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6a78:	4620      	mov	r0, r4
   b6a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6a7c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6a7c:	b513      	push	{r0, r1, r4, lr}
   b6a7e:	4604      	mov	r4, r0
    }
   b6a80:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6a82:	b159      	cbz	r1, b6a9c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6a84:	9101      	str	r1, [sp, #4]
   b6a86:	f001 f9e5 	bl	b7e54 <strlen>
   b6a8a:	6823      	ldr	r3, [r4, #0]
   b6a8c:	9901      	ldr	r1, [sp, #4]
   b6a8e:	68db      	ldr	r3, [r3, #12]
   b6a90:	4602      	mov	r2, r0
   b6a92:	4620      	mov	r0, r4
    }
   b6a94:	b002      	add	sp, #8
   b6a96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6a9a:	4718      	bx	r3
    }
   b6a9c:	b002      	add	sp, #8
   b6a9e:	bd10      	pop	{r4, pc}

000b6aa0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b6aa0:	b508      	push	{r3, lr}
  return write(str);
   b6aa2:	f7ff ffeb 	bl	b6a7c <_ZN5Print5writeEPKc>
}
   b6aa6:	bd08      	pop	{r3, pc}

000b6aa8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b6aa8:	6803      	ldr	r3, [r0, #0]
   b6aaa:	689b      	ldr	r3, [r3, #8]
   b6aac:	4718      	bx	r3

000b6aae <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6aae:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6ab0:	210d      	movs	r1, #13
{
   b6ab2:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6ab4:	f7ff fff8 	bl	b6aa8 <_ZN5Print5printEc>
  n += print('\n');
   b6ab8:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6aba:	4604      	mov	r4, r0
  n += print('\n');
   b6abc:	4628      	mov	r0, r5
   b6abe:	f7ff fff3 	bl	b6aa8 <_ZN5Print5printEc>
  return n;
}
   b6ac2:	4420      	add	r0, r4
   b6ac4:	bd38      	pop	{r3, r4, r5, pc}

000b6ac6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b6ac6:	b538      	push	{r3, r4, r5, lr}
   b6ac8:	4605      	mov	r5, r0
  return write(str);
   b6aca:	f7ff ffd7 	bl	b6a7c <_ZN5Print5writeEPKc>
   b6ace:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b6ad0:	4628      	mov	r0, r5
   b6ad2:	f7ff ffec 	bl	b6aae <_ZN5Print7printlnEv>
  return n;
}
   b6ad6:	4420      	add	r0, r4
   b6ad8:	bd38      	pop	{r3, r4, r5, pc}

000b6ada <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6ada:	b530      	push	{r4, r5, lr}
   b6adc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6ade:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6ae0:	2a01      	cmp	r2, #1
  *str = '\0';
   b6ae2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6ae6:	bf98      	it	ls
   b6ae8:	220a      	movls	r2, #10
   b6aea:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6aec:	460d      	mov	r5, r1
   b6aee:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6af2:	fb01 5312 	mls	r3, r1, r2, r5
   b6af6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6afa:	2b09      	cmp	r3, #9
   b6afc:	bf94      	ite	ls
   b6afe:	3330      	addls	r3, #48	; 0x30
   b6b00:	3337      	addhi	r3, #55	; 0x37
   b6b02:	b2db      	uxtb	r3, r3
  } while(n);
   b6b04:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6b06:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6b0a:	d9ef      	bls.n	b6aec <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6b0c:	4621      	mov	r1, r4
   b6b0e:	f7ff ffb5 	bl	b6a7c <_ZN5Print5writeEPKc>
}
   b6b12:	b00b      	add	sp, #44	; 0x2c
   b6b14:	bd30      	pop	{r4, r5, pc}

000b6b16 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6b16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6b1a:	b086      	sub	sp, #24
   b6b1c:	af00      	add	r7, sp, #0
   b6b1e:	4605      	mov	r5, r0
   b6b20:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6b22:	1d38      	adds	r0, r7, #4
   b6b24:	2114      	movs	r1, #20
{
   b6b26:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6b28:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6b2a:	f7ff fd01 	bl	b6530 <vsnprintf>

    if (n<bufsize)
   b6b2e:	2813      	cmp	r0, #19
   b6b30:	d80e      	bhi.n	b6b50 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6b32:	1d39      	adds	r1, r7, #4
   b6b34:	4628      	mov	r0, r5
   b6b36:	f7ff ffa1 	bl	b6a7c <_ZN5Print5writeEPKc>
   b6b3a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6b3c:	b11e      	cbz	r6, b6b46 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6b3e:	4628      	mov	r0, r5
   b6b40:	f7ff ffb5 	bl	b6aae <_ZN5Print7printlnEv>
   b6b44:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6b46:	4620      	mov	r0, r4
   b6b48:	3718      	adds	r7, #24
   b6b4a:	46bd      	mov	sp, r7
   b6b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6b50:	f100 0308 	add.w	r3, r0, #8
   b6b54:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6b58:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6b5a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6b5e:	4622      	mov	r2, r4
   b6b60:	1c41      	adds	r1, r0, #1
   b6b62:	683b      	ldr	r3, [r7, #0]
   b6b64:	4668      	mov	r0, sp
   b6b66:	f7ff fce3 	bl	b6530 <vsnprintf>
  return write(str);
   b6b6a:	4669      	mov	r1, sp
   b6b6c:	4628      	mov	r0, r5
   b6b6e:	f7ff ff85 	bl	b6a7c <_ZN5Print5writeEPKc>
   b6b72:	4604      	mov	r4, r0
   b6b74:	46c5      	mov	sp, r8
   b6b76:	e7e1      	b.n	b6b3c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6b78 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b6b78:	4b01      	ldr	r3, [pc, #4]	; (b6b80 <_GLOBAL__sub_I_RGB+0x8>)
   b6b7a:	2200      	movs	r2, #0
   b6b7c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6b7e:	4770      	bx	lr
   b6b80:	2003e6dc 	.word	0x2003e6dc

000b6b84 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b6b84:	2100      	movs	r1, #0
   b6b86:	f7ff bb97 	b.w	b62b8 <hal_spi_release>

000b6b8a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b6b8a:	2100      	movs	r1, #0
   b6b8c:	f7ff bb8c 	b.w	b62a8 <hal_spi_acquire>

000b6b90 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6b90:	b510      	push	{r4, lr}
   b6b92:	4604      	mov	r4, r0
   b6b94:	4608      	mov	r0, r1
{
    _spi = spi;
   b6b96:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6b98:	f7ff fb6e 	bl	b6278 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6b9c:	2300      	movs	r3, #0
   b6b9e:	6063      	str	r3, [r4, #4]
}
   b6ba0:	4620      	mov	r0, r4
   b6ba2:	bd10      	pop	{r4, pc}

000b6ba4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b6ba4:	b513      	push	{r0, r1, r4, lr}
   b6ba6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b6ba8:	7800      	ldrb	r0, [r0, #0]
   b6baa:	f7ff ffee 	bl	b6b8a <_ZN8SPIClass4lockEv.isra.0>
   b6bae:	b958      	cbnz	r0, b6bc8 <_ZN8SPIClass5beginEv+0x24>
   b6bb0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b6bb2:	9001      	str	r0, [sp, #4]
   b6bb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6bb8:	f7ff fb36 	bl	b6228 <hal_spi_begin>
        unlock();
   b6bbc:	9801      	ldr	r0, [sp, #4]
    }
}
   b6bbe:	b002      	add	sp, #8
   b6bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6bc4:	f7ff bfde 	b.w	b6b84 <_ZN8SPIClass6unlockEv.isra.0>
   b6bc8:	b002      	add	sp, #8
   b6bca:	bd10      	pop	{r4, pc}

000b6bcc <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b6bcc:	b513      	push	{r0, r1, r4, lr}
   b6bce:	4604      	mov	r4, r0
    if (!lock())
   b6bd0:	7800      	ldrb	r0, [r0, #0]
{
   b6bd2:	9101      	str	r1, [sp, #4]
    if (!lock())
   b6bd4:	f7ff ffd9 	bl	b6b8a <_ZN8SPIClass4lockEv.isra.0>
   b6bd8:	9901      	ldr	r1, [sp, #4]
   b6bda:	b948      	cbnz	r0, b6bf0 <_ZN8SPIClass11setBitOrderEh+0x24>
   b6bdc:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b6bde:	9001      	str	r0, [sp, #4]
   b6be0:	f7ff fb2a 	bl	b6238 <hal_spi_set_bit_order>
        unlock();
   b6be4:	9801      	ldr	r0, [sp, #4]
    }
}
   b6be6:	b002      	add	sp, #8
   b6be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6bec:	f7ff bfca 	b.w	b6b84 <_ZN8SPIClass6unlockEv.isra.0>
   b6bf0:	b002      	add	sp, #8
   b6bf2:	bd10      	pop	{r4, pc}

000b6bf4 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b6bf4:	b513      	push	{r0, r1, r4, lr}
   b6bf6:	4604      	mov	r4, r0
    if (!lock())
   b6bf8:	7800      	ldrb	r0, [r0, #0]
{
   b6bfa:	9101      	str	r1, [sp, #4]
    if (!lock())
   b6bfc:	f7ff ffc5 	bl	b6b8a <_ZN8SPIClass4lockEv.isra.0>
   b6c00:	9901      	ldr	r1, [sp, #4]
   b6c02:	b948      	cbnz	r0, b6c18 <_ZN8SPIClass11setDataModeEh+0x24>
   b6c04:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b6c06:	9001      	str	r0, [sp, #4]
   b6c08:	f7ff fb1e 	bl	b6248 <hal_spi_set_data_mode>
        unlock();
   b6c0c:	9801      	ldr	r0, [sp, #4]
    }
}
   b6c0e:	b002      	add	sp, #8
   b6c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6c14:	f7ff bfb6 	b.w	b6b84 <_ZN8SPIClass6unlockEv.isra.0>
   b6c18:	b002      	add	sp, #8
   b6c1a:	bd10      	pop	{r4, pc}

000b6c1c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b6c1c:	0840      	lsrs	r0, r0, #1
{
   b6c1e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b6c20:	6018      	str	r0, [r3, #0]
   b6c22:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b6c24:	6818      	ldr	r0, [r3, #0]
   b6c26:	4288      	cmp	r0, r1
   b6c28:	b2e5      	uxtb	r5, r4
   b6c2a:	d906      	bls.n	b6c3a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b6c2c:	3401      	adds	r4, #1
   b6c2e:	2c08      	cmp	r4, #8
   b6c30:	d002      	beq.n	b6c38 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b6c32:	0840      	lsrs	r0, r0, #1
   b6c34:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6c36:	e7f5      	b.n	b6c24 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6c38:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b6c3a:	4b02      	ldr	r3, [pc, #8]	; (b6c44 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b6c3c:	5d5b      	ldrb	r3, [r3, r5]
   b6c3e:	7013      	strb	r3, [r2, #0]
}
   b6c40:	bd30      	pop	{r4, r5, pc}
   b6c42:	bf00      	nop
   b6c44:	000b8ad4 	.word	0x000b8ad4

000b6c48 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b6c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6c4c:	b088      	sub	sp, #32
    unsigned clock = 0;
   b6c4e:	2300      	movs	r3, #0
{
   b6c50:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b6c52:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b6c54:	9302      	str	r3, [sp, #8]
{
   b6c56:	460e      	mov	r6, r1
   b6c58:	4617      	mov	r7, r2
    if (!lock())
   b6c5a:	f7ff ff96 	bl	b6b8a <_ZN8SPIClass4lockEv.isra.0>
   b6c5e:	4605      	mov	r5, r0
   b6c60:	bb00      	cbnz	r0, b6ca4 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b6c62:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b6c66:	4601      	mov	r1, r0
   b6c68:	2214      	movs	r2, #20
   b6c6a:	a803      	add	r0, sp, #12
   b6c6c:	f001 f8aa 	bl	b7dc4 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6c70:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6c72:	462a      	mov	r2, r5
   b6c74:	a903      	add	r1, sp, #12
   b6c76:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b6c78:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b6c7c:	f7ff fb0c 	bl	b6298 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b6c80:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b6c82:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b6c86:	ab02      	add	r3, sp, #8
   b6c88:	f10d 0207 	add.w	r2, sp, #7
   b6c8c:	fb07 f106 	mul.w	r1, r7, r6
   b6c90:	f7ff ffc4 	bl	b6c1c <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b6c94:	7820      	ldrb	r0, [r4, #0]
   b6c96:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b6c9a:	f7ff fadd 	bl	b6258 <hal_spi_set_clock_divider>
        unlock();
   b6c9e:	7820      	ldrb	r0, [r4, #0]
   b6ca0:	f7ff ff70 	bl	b6b84 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b6ca4:	9802      	ldr	r0, [sp, #8]
   b6ca6:	b008      	add	sp, #32
   b6ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6cac <_ZN8SPIClass15setClockDividerEh>:
{
   b6cac:	b538      	push	{r3, r4, r5, lr}
   b6cae:	4604      	mov	r4, r0
    if (!lock())
   b6cb0:	7800      	ldrb	r0, [r0, #0]
{
   b6cb2:	460d      	mov	r5, r1
    if (!lock())
   b6cb4:	f7ff ff69 	bl	b6b8a <_ZN8SPIClass4lockEv.isra.0>
   b6cb8:	4603      	mov	r3, r0
   b6cba:	b9d0      	cbnz	r0, b6cf2 <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b6cbc:	6861      	ldr	r1, [r4, #4]
   b6cbe:	b199      	cbz	r1, b6ce8 <_ZN8SPIClass15setClockDividerEh+0x3c>
   b6cc0:	4a0c      	ldr	r2, [pc, #48]	; (b6cf4 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b6cc2:	f812 0b01 	ldrb.w	r0, [r2], #1
   b6cc6:	4285      	cmp	r5, r0
   b6cc8:	d002      	beq.n	b6cd0 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b6cca:	3301      	adds	r3, #1
   b6ccc:	2b08      	cmp	r3, #8
   b6cce:	d1f8      	bne.n	b6cc2 <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b6cd0:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b6cd2:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b6cd4:	2201      	movs	r2, #1
   b6cd6:	40d9      	lsrs	r1, r3
   b6cd8:	4620      	mov	r0, r4
   b6cda:	f7ff ffb5 	bl	b6c48 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b6cde:	7820      	ldrb	r0, [r4, #0]
}
   b6ce0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b6ce4:	f7ff bf4e 	b.w	b6b84 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b6ce8:	7820      	ldrb	r0, [r4, #0]
   b6cea:	4629      	mov	r1, r5
   b6cec:	f7ff fab4 	bl	b6258 <hal_spi_set_clock_divider>
   b6cf0:	e7f5      	b.n	b6cde <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b6cf2:	bd38      	pop	{r3, r4, r5, pc}
   b6cf4:	000b8ad4 	.word	0x000b8ad4

000b6cf8 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b6cf8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b6cfa:	7800      	ldrb	r0, [r0, #0]
   b6cfc:	f7ff fab4 	bl	b6268 <hal_spi_transfer>
}
   b6d00:	b2c0      	uxtb	r0, r0
   b6d02:	bd08      	pop	{r3, pc}

000b6d04 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b6d04:	b510      	push	{r4, lr}
   b6d06:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6d08:	f7ff f97e 	bl	b6008 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b6d0c:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b6d0e:	6823      	ldr	r3, [r4, #0]
   b6d10:	4620      	mov	r0, r4
   b6d12:	695b      	ldr	r3, [r3, #20]
   b6d14:	4798      	blx	r3
    if (c >= 0) return c;
   b6d16:	2800      	cmp	r0, #0
   b6d18:	da08      	bge.n	b6d2c <_ZN6Stream9timedReadEv+0x28>
   b6d1a:	f7ff f975 	bl	b6008 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b6d1e:	68e3      	ldr	r3, [r4, #12]
   b6d20:	1ac0      	subs	r0, r0, r3
   b6d22:	68a3      	ldr	r3, [r4, #8]
   b6d24:	4298      	cmp	r0, r3
   b6d26:	d3f2      	bcc.n	b6d0e <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b6d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b6d2c:	bd10      	pop	{r4, pc}
	...

000b6d30 <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
   b6d30:	b538      	push	{r3, r4, r5, lr}
   b6d32:	460d      	mov	r5, r1
  String ret;
   b6d34:	4907      	ldr	r1, [pc, #28]	; (b6d54 <_ZN6Stream10readStringEv+0x24>)
{
   b6d36:	4604      	mov	r4, r0
  String ret;
   b6d38:	f000 f859 	bl	b6dee <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b6d3c:	4628      	mov	r0, r5
   b6d3e:	f7ff ffe1 	bl	b6d04 <_ZN6Stream9timedReadEv>
  while (c >= 0)
   b6d42:	2800      	cmp	r0, #0
   b6d44:	db04      	blt.n	b6d50 <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b6d46:	b2c1      	uxtb	r1, r0
   b6d48:	4620      	mov	r0, r4
   b6d4a:	f000 f8cb 	bl	b6ee4 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b6d4e:	e7f5      	b.n	b6d3c <_ZN6Stream10readStringEv+0xc>
  }
  return ret;
}
   b6d50:	4620      	mov	r0, r4
   b6d52:	bd38      	pop	{r3, r4, r5, pc}
   b6d54:	000b838f 	.word	0x000b838f

000b6d58 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6d58:	b510      	push	{r4, lr}
   b6d5a:	4604      	mov	r4, r0
{
	free(buffer);
   b6d5c:	6800      	ldr	r0, [r0, #0]
   b6d5e:	f7ff fbd7 	bl	b6510 <free>
}
   b6d62:	4620      	mov	r0, r4
   b6d64:	bd10      	pop	{r4, pc}

000b6d66 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6d66:	b510      	push	{r4, lr}
   b6d68:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6d6a:	6800      	ldr	r0, [r0, #0]
   b6d6c:	b108      	cbz	r0, b6d72 <_ZN6String10invalidateEv+0xc>
   b6d6e:	f7ff fbcf 	bl	b6510 <free>
	buffer = NULL;
   b6d72:	2300      	movs	r3, #0
	capacity = len = 0;
   b6d74:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6d78:	6023      	str	r3, [r4, #0]
}
   b6d7a:	bd10      	pop	{r4, pc}

000b6d7c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6d7c:	b538      	push	{r3, r4, r5, lr}
   b6d7e:	4604      	mov	r4, r0
   b6d80:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6d82:	6800      	ldr	r0, [r0, #0]
   b6d84:	3101      	adds	r1, #1
   b6d86:	f7ff fbcb 	bl	b6520 <realloc>
	if (newbuffer) {
   b6d8a:	b110      	cbz	r0, b6d92 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6d8c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6d90:	2001      	movs	r0, #1
	}
	return 0;
}
   b6d92:	bd38      	pop	{r3, r4, r5, pc}

000b6d94 <_ZN6String7reserveEj>:
{
   b6d94:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6d96:	6803      	ldr	r3, [r0, #0]
{
   b6d98:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6d9a:	b123      	cbz	r3, b6da6 <_ZN6String7reserveEj+0x12>
   b6d9c:	6843      	ldr	r3, [r0, #4]
   b6d9e:	428b      	cmp	r3, r1
   b6da0:	d301      	bcc.n	b6da6 <_ZN6String7reserveEj+0x12>
   b6da2:	2001      	movs	r0, #1
}
   b6da4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b6da6:	4620      	mov	r0, r4
   b6da8:	f7ff ffe8 	bl	b6d7c <_ZN6String12changeBufferEj>
   b6dac:	2800      	cmp	r0, #0
   b6dae:	d0f9      	beq.n	b6da4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6db0:	68a3      	ldr	r3, [r4, #8]
   b6db2:	2b00      	cmp	r3, #0
   b6db4:	d1f5      	bne.n	b6da2 <_ZN6String7reserveEj+0xe>
   b6db6:	6822      	ldr	r2, [r4, #0]
   b6db8:	7013      	strb	r3, [r2, #0]
   b6dba:	e7f2      	b.n	b6da2 <_ZN6String7reserveEj+0xe>

000b6dbc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6dbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6dbe:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6dc0:	4611      	mov	r1, r2
   b6dc2:	9201      	str	r2, [sp, #4]
{
   b6dc4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6dc6:	f7ff ffe5 	bl	b6d94 <_ZN6String7reserveEj>
   b6dca:	9a01      	ldr	r2, [sp, #4]
   b6dcc:	b928      	cbnz	r0, b6dda <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6dce:	4620      	mov	r0, r4
   b6dd0:	f7ff ffc9 	bl	b6d66 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6dd4:	4620      	mov	r0, r4
   b6dd6:	b003      	add	sp, #12
   b6dd8:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6dda:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6ddc:	4629      	mov	r1, r5
   b6dde:	6820      	ldr	r0, [r4, #0]
   b6de0:	f000 ffe2 	bl	b7da8 <memcpy>
	buffer[len] = 0;
   b6de4:	6822      	ldr	r2, [r4, #0]
   b6de6:	68a3      	ldr	r3, [r4, #8]
   b6de8:	2100      	movs	r1, #0
   b6dea:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6dec:	e7f2      	b.n	b6dd4 <_ZN6String4copyEPKcj+0x18>

000b6dee <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b6dee:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6df0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b6df2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6df6:	4604      	mov	r4, r0
	len = 0;
   b6df8:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6dfa:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6dfc:	b141      	cbz	r1, b6e10 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b6dfe:	4608      	mov	r0, r1
   b6e00:	9101      	str	r1, [sp, #4]
   b6e02:	f001 f827 	bl	b7e54 <strlen>
   b6e06:	9901      	ldr	r1, [sp, #4]
   b6e08:	4602      	mov	r2, r0
   b6e0a:	4620      	mov	r0, r4
   b6e0c:	f7ff ffd6 	bl	b6dbc <_ZN6String4copyEPKcj>
}
   b6e10:	4620      	mov	r0, r4
   b6e12:	b002      	add	sp, #8
   b6e14:	bd10      	pop	{r4, pc}

000b6e16 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b6e16:	4288      	cmp	r0, r1
{
   b6e18:	b510      	push	{r4, lr}
   b6e1a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b6e1c:	d005      	beq.n	b6e2a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b6e1e:	680b      	ldr	r3, [r1, #0]
   b6e20:	b12b      	cbz	r3, b6e2e <_ZN6StringaSERKS_+0x18>
   b6e22:	688a      	ldr	r2, [r1, #8]
   b6e24:	4619      	mov	r1, r3
   b6e26:	f7ff ffc9 	bl	b6dbc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6e2a:	4620      	mov	r0, r4
   b6e2c:	bd10      	pop	{r4, pc}
	else invalidate();
   b6e2e:	f7ff ff9a 	bl	b6d66 <_ZN6String10invalidateEv>
   b6e32:	e7fa      	b.n	b6e2a <_ZN6StringaSERKS_+0x14>

000b6e34 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b6e34:	b510      	push	{r4, lr}
	buffer = NULL;
   b6e36:	2300      	movs	r3, #0
String::String(const String &value)
   b6e38:	4604      	mov	r4, r0
	capacity = 0;
   b6e3a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b6e3e:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6e40:	7303      	strb	r3, [r0, #12]
	*this = value;
   b6e42:	f7ff ffe8 	bl	b6e16 <_ZN6StringaSERKS_>
}
   b6e46:	4620      	mov	r0, r4
   b6e48:	bd10      	pop	{r4, pc}

000b6e4a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b6e4a:	b513      	push	{r0, r1, r4, lr}
   b6e4c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b6e4e:	b159      	cbz	r1, b6e68 <_ZN6StringaSEPKc+0x1e>
   b6e50:	4608      	mov	r0, r1
   b6e52:	9101      	str	r1, [sp, #4]
   b6e54:	f000 fffe 	bl	b7e54 <strlen>
   b6e58:	9901      	ldr	r1, [sp, #4]
   b6e5a:	4602      	mov	r2, r0
   b6e5c:	4620      	mov	r0, r4
   b6e5e:	f7ff ffad 	bl	b6dbc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6e62:	4620      	mov	r0, r4
   b6e64:	b002      	add	sp, #8
   b6e66:	bd10      	pop	{r4, pc}
	else invalidate();
   b6e68:	f7ff ff7d 	bl	b6d66 <_ZN6String10invalidateEv>
   b6e6c:	e7f9      	b.n	b6e62 <_ZN6StringaSEPKc+0x18>

000b6e6e <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b6e6e:	b510      	push	{r4, lr}
   b6e70:	4604      	mov	r4, r0
   b6e72:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b6e74:	2300      	movs	r3, #0
	capacity = 0;
   b6e76:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b6e7a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b6e7c:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b6e7e:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b6e80:	a901      	add	r1, sp, #4
   b6e82:	f000 fca5 	bl	b77d0 <itoa>
	*this = buf;
   b6e86:	a901      	add	r1, sp, #4
   b6e88:	4620      	mov	r0, r4
   b6e8a:	f7ff ffde 	bl	b6e4a <_ZN6StringaSEPKc>
}
   b6e8e:	4620      	mov	r0, r4
   b6e90:	b00a      	add	sp, #40	; 0x28
   b6e92:	bd10      	pop	{r4, pc}

000b6e94 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b6e94:	b570      	push	{r4, r5, r6, lr}
   b6e96:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b6e98:	460e      	mov	r6, r1
   b6e9a:	b909      	cbnz	r1, b6ea0 <_ZN6String6concatEPKcj+0xc>
   b6e9c:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b6e9e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b6ea0:	b16a      	cbz	r2, b6ebe <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b6ea2:	6884      	ldr	r4, [r0, #8]
   b6ea4:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b6ea6:	4621      	mov	r1, r4
   b6ea8:	f7ff ff74 	bl	b6d94 <_ZN6String7reserveEj>
   b6eac:	2800      	cmp	r0, #0
   b6eae:	d0f5      	beq.n	b6e9c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b6eb0:	6828      	ldr	r0, [r5, #0]
   b6eb2:	68ab      	ldr	r3, [r5, #8]
   b6eb4:	4631      	mov	r1, r6
   b6eb6:	4418      	add	r0, r3
   b6eb8:	f000 ffc4 	bl	b7e44 <strcpy>
	len = newlen;
   b6ebc:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b6ebe:	2001      	movs	r0, #1
   b6ec0:	e7ed      	b.n	b6e9e <_ZN6String6concatEPKcj+0xa>

000b6ec2 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   b6ec2:	b513      	push	{r0, r1, r4, lr}
   b6ec4:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   b6ec6:	4608      	mov	r0, r1
	if (!cstr) return 0;
   b6ec8:	b151      	cbz	r1, b6ee0 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   b6eca:	9101      	str	r1, [sp, #4]
   b6ecc:	f000 ffc2 	bl	b7e54 <strlen>
   b6ed0:	9901      	ldr	r1, [sp, #4]
   b6ed2:	4602      	mov	r2, r0
   b6ed4:	4620      	mov	r0, r4
}
   b6ed6:	b002      	add	sp, #8
   b6ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   b6edc:	f7ff bfda 	b.w	b6e94 <_ZN6String6concatEPKcj>
}
   b6ee0:	b002      	add	sp, #8
   b6ee2:	bd10      	pop	{r4, pc}

000b6ee4 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b6ee4:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b6ee6:	2300      	movs	r3, #0
	buf[0] = c;
   b6ee8:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b6eec:	2201      	movs	r2, #1
   b6eee:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b6ef0:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b6ef4:	f7ff ffce 	bl	b6e94 <_ZN6String6concatEPKcj>
}
   b6ef8:	b003      	add	sp, #12
   b6efa:	f85d fb04 	ldr.w	pc, [sp], #4

000b6efe <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b6efe:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b6f00:	688a      	ldr	r2, [r1, #8]
   b6f02:	6809      	ldr	r1, [r1, #0]
{
   b6f04:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b6f06:	f7ff ffc5 	bl	b6e94 <_ZN6String6concatEPKcj>
   b6f0a:	b910      	cbnz	r0, b6f12 <_ZplRK15StringSumHelperRK6String+0x14>
   b6f0c:	4620      	mov	r0, r4
   b6f0e:	f7ff ff2a 	bl	b6d66 <_ZN6String10invalidateEv>
	return a;
}
   b6f12:	4620      	mov	r0, r4
   b6f14:	bd10      	pop	{r4, pc}

000b6f16 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b6f16:	b513      	push	{r0, r1, r4, lr}
   b6f18:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b6f1a:	b929      	cbnz	r1, b6f28 <_ZplRK15StringSumHelperPKc+0x12>
   b6f1c:	4620      	mov	r0, r4
   b6f1e:	f7ff ff22 	bl	b6d66 <_ZN6String10invalidateEv>
	return a;
}
   b6f22:	4620      	mov	r0, r4
   b6f24:	b002      	add	sp, #8
   b6f26:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b6f28:	4608      	mov	r0, r1
   b6f2a:	9101      	str	r1, [sp, #4]
   b6f2c:	f000 ff92 	bl	b7e54 <strlen>
   b6f30:	9901      	ldr	r1, [sp, #4]
   b6f32:	4602      	mov	r2, r0
   b6f34:	4620      	mov	r0, r4
   b6f36:	f7ff ffad 	bl	b6e94 <_ZN6String6concatEPKcj>
   b6f3a:	2800      	cmp	r0, #0
   b6f3c:	d0ee      	beq.n	b6f1c <_ZplRK15StringSumHelperPKc+0x6>
   b6f3e:	e7f0      	b.n	b6f22 <_ZplRK15StringSumHelperPKc+0xc>

000b6f40 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6f40:	4b05      	ldr	r3, [pc, #20]	; (b6f58 <_GLOBAL__sub_I_System+0x18>)
   b6f42:	2202      	movs	r2, #2
   b6f44:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6f46:	4b05      	ldr	r3, [pc, #20]	; (b6f5c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6f48:	4a05      	ldr	r2, [pc, #20]	; (b6f60 <_GLOBAL__sub_I_System+0x20>)
   b6f4a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6f4c:	2000      	movs	r0, #0
   b6f4e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6f52:	f7ff ba41 	b.w	b63d8 <set_system_mode>
   b6f56:	bf00      	nop
   b6f58:	2003e6f8 	.word	0x2003e6f8
   b6f5c:	2003e6ec 	.word	0x2003e6ec
   b6f60:	ffff0000 	.word	0xffff0000

000b6f64 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b6f64:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6f66:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b6f68:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6f6c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6f6e:	2201      	movs	r2, #1
   b6f70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6f74:	f10d 0107 	add.w	r1, sp, #7
   b6f78:	47a0      	blx	r4
}
   b6f7a:	b002      	add	sp, #8
   b6f7c:	bd10      	pop	{r4, pc}

000b6f7e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b6f7e:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6f80:	6803      	ldr	r3, [r0, #0]
   b6f82:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6f84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6f88:	46a4      	mov	ip, r4
}
   b6f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6f8e:	4760      	bx	ip

000b6f90 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6f90:	b513      	push	{r0, r1, r4, lr}
   b6f92:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b6f94:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6f96:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b6f9a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b6f9c:	f10d 0107 	add.w	r1, sp, #7
   b6fa0:	2201      	movs	r2, #1
   b6fa2:	47a0      	blx	r4
}
   b6fa4:	b002      	add	sp, #8
   b6fa6:	bd10      	pop	{r4, pc}

000b6fa8 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b6fa8:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6faa:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6fac:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6fb0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6fb4:	429a      	cmp	r2, r3
int TCPClient::read() {
   b6fb6:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6fb8:	d008      	beq.n	b6fcc <_ZN9TCPClient4readEv+0x24>
   b6fba:	6963      	ldr	r3, [r4, #20]
   b6fbc:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6fc0:	1c51      	adds	r1, r2, #1
   b6fc2:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b6fc6:	4413      	add	r3, r2
   b6fc8:	7918      	ldrb	r0, [r3, #4]
}
   b6fca:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6fcc:	6803      	ldr	r3, [r0, #0]
   b6fce:	691b      	ldr	r3, [r3, #16]
   b6fd0:	4798      	blx	r3
   b6fd2:	2800      	cmp	r0, #0
   b6fd4:	d1f1      	bne.n	b6fba <_ZN9TCPClient4readEv+0x12>
   b6fd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6fda:	e7f6      	b.n	b6fca <_ZN9TCPClient4readEv+0x22>

000b6fdc <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b6fdc:	4770      	bx	lr

000b6fde <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b6fde:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b6fe0:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b6fe2:	43c0      	mvns	r0, r0
   b6fe4:	0fc0      	lsrs	r0, r0, #31
   b6fe6:	4770      	bx	lr

000b6fe8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6fe8:	4770      	bx	lr
	...

000b6fec <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6fec:	4b06      	ldr	r3, [pc, #24]	; (b7008 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6fee:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6ff0:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6ff2:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6ff6:	d005      	beq.n	b7004 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6ff8:	4608      	mov	r0, r1
   b6ffa:	f000 fdbd 	bl	b7b78 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6ffe:	2800      	cmp	r0, #0
   b7000:	bf08      	it	eq
   b7002:	2400      	moveq	r4, #0
      }
   b7004:	4620      	mov	r0, r4
   b7006:	bd10      	pop	{r4, pc}
   b7008:	000b8a14 	.word	0x000b8a14

000b700c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b700c:	b510      	push	{r4, lr}
   b700e:	21ac      	movs	r1, #172	; 0xac
   b7010:	4604      	mov	r4, r0
   b7012:	f7fd f842 	bl	b409a <_ZdlPvj>
   b7016:	4620      	mov	r0, r4
   b7018:	bd10      	pop	{r4, pc}

000b701a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b701a:	21ac      	movs	r1, #172	; 0xac
   b701c:	f7fd b83d 	b.w	b409a <_ZdlPvj>

000b7020 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b7020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b7024:	f04f 0800 	mov.w	r8, #0
   b7028:	b086      	sub	sp, #24
   b702a:	461c      	mov	r4, r3
   b702c:	f8c0 8004 	str.w	r8, [r0, #4]
   b7030:	4605      	mov	r5, r0
   b7032:	460e      	mov	r6, r1
   b7034:	4617      	mov	r7, r2
    struct timeval tv = {};
   b7036:	4641      	mov	r1, r8
   b7038:	2210      	movs	r2, #16
   b703a:	a802      	add	r0, sp, #8
   b703c:	f000 fec2 	bl	b7dc4 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b7040:	1c63      	adds	r3, r4, #1
   b7042:	d009      	beq.n	b7058 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b7044:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7048:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b704c:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b7050:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b7054:	435c      	muls	r4, r3
   b7056:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b7058:	6968      	ldr	r0, [r5, #20]
   b705a:	2310      	movs	r3, #16
   b705c:	9300      	str	r3, [sp, #0]
   b705e:	6800      	ldr	r0, [r0, #0]
   b7060:	ab02      	add	r3, sp, #8
   b7062:	f241 0205 	movw	r2, #4101	; 0x1005
   b7066:	f640 71ff 	movw	r1, #4095	; 0xfff
   b706a:	f7ff f8ad 	bl	b61c8 <sock_setsockopt>
    if (ret < 0) {
   b706e:	2800      	cmp	r0, #0
   b7070:	da07      	bge.n	b7082 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b7072:	f7ff fa6d 	bl	b6550 <__errno>
   b7076:	6803      	ldr	r3, [r0, #0]
   b7078:	606b      	str	r3, [r5, #4]
        return 0;
   b707a:	2000      	movs	r0, #0
}
   b707c:	b006      	add	sp, #24
   b707e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b7082:	6968      	ldr	r0, [r5, #20]
   b7084:	2300      	movs	r3, #0
   b7086:	6800      	ldr	r0, [r0, #0]
   b7088:	463a      	mov	r2, r7
   b708a:	4631      	mov	r1, r6
   b708c:	f7ff f8bc 	bl	b6208 <sock_send>
    if (ret < 0) {
   b7090:	1e03      	subs	r3, r0, #0
   b7092:	dbee      	blt.n	b7072 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b7094:	4618      	mov	r0, r3
   b7096:	e7f1      	b.n	b707c <_ZN9TCPClient5writeEPKhjm+0x5c>

000b7098 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b7098:	b530      	push	{r4, r5, lr}
   b709a:	b087      	sub	sp, #28
   b709c:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b709e:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b70a0:	4668      	mov	r0, sp
   b70a2:	f7ff fc0b 	bl	b68bc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b70a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b70a8:	3404      	adds	r4, #4
   b70aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b70ac:	682b      	ldr	r3, [r5, #0]
   b70ae:	7023      	strb	r3, [r4, #0]
    }
   b70b0:	b007      	add	sp, #28
   b70b2:	bd30      	pop	{r4, r5, pc}

000b70b4 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b70b4:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b70b6:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b70b8:	4b05      	ldr	r3, [pc, #20]	; (b70d0 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b70ba:	4604      	mov	r4, r0
   b70bc:	358c      	adds	r5, #140	; 0x8c
   b70be:	f844 3b04 	str.w	r3, [r4], #4
   b70c2:	4606      	mov	r6, r0
   b70c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b70c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b70c8:	682b      	ldr	r3, [r5, #0]
   b70ca:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b70cc:	4630      	mov	r0, r6
   b70ce:	bd70      	pop	{r4, r5, r6, pc}
   b70d0:	000b8a88 	.word	0x000b8a88

000b70d4 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b70d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b70d8:	4698      	mov	r8, r3
    stop();
   b70da:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b70dc:	b093      	sub	sp, #76	; 0x4c
   b70de:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b70e0:	2400      	movs	r4, #0
    stop();
   b70e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b70e4:	4606      	mov	r6, r0
   b70e6:	4617      	mov	r7, r2
    stop();
   b70e8:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b70ea:	4628      	mov	r0, r5
   b70ec:	466b      	mov	r3, sp
   b70ee:	4622      	mov	r2, r4
   b70f0:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b70f2:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b70f4:	f7ff f858 	bl	b61a8 <netdb_getaddrinfo>
   b70f8:	4605      	mov	r5, r0
   b70fa:	2800      	cmp	r0, #0
   b70fc:	d163      	bne.n	b71c6 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b70fe:	9b00      	ldr	r3, [sp, #0]
   b7100:	2b00      	cmp	r3, #0
   b7102:	d04b      	beq.n	b719c <_ZN9TCPClient7connectEPKctm+0xc8>
   b7104:	695b      	ldr	r3, [r3, #20]
   b7106:	2b00      	cmp	r3, #0
   b7108:	d048      	beq.n	b719c <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b710a:	a806      	add	r0, sp, #24
   b710c:	f7ff fb92 	bl	b6834 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b7110:	9b00      	ldr	r3, [sp, #0]
   b7112:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b7114:	7863      	ldrb	r3, [r4, #1]
   b7116:	2b02      	cmp	r3, #2
   b7118:	d104      	bne.n	b7124 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b711a:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b711c:	a806      	add	r0, sp, #24
   b711e:	f7ff ffbb 	bl	b7098 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b7122:	e026      	b.n	b7172 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b7124:	2b0a      	cmp	r3, #10
   b7126:	d124      	bne.n	b7172 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b7128:	2211      	movs	r2, #17
   b712a:	4629      	mov	r1, r5
   b712c:	a801      	add	r0, sp, #4
   b712e:	f000 fe49 	bl	b7dc4 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7132:	68a3      	ldr	r3, [r4, #8]
   b7134:	2b00      	cmp	r3, #0
   b7136:	d038      	beq.n	b71aa <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7138:	f104 0308 	add.w	r3, r4, #8
   b713c:	f10d 0c04 	add.w	ip, sp, #4
   b7140:	3418      	adds	r4, #24
   b7142:	6818      	ldr	r0, [r3, #0]
   b7144:	6859      	ldr	r1, [r3, #4]
   b7146:	4662      	mov	r2, ip
   b7148:	c203      	stmia	r2!, {r0, r1}
   b714a:	3308      	adds	r3, #8
   b714c:	42a3      	cmp	r3, r4
   b714e:	4694      	mov	ip, r2
   b7150:	d1f7      	bne.n	b7142 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b7152:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b7154:	a901      	add	r1, sp, #4
   b7156:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b7158:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b715c:	f7ff fb78 	bl	b6850 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7160:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7164:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7168:	ac07      	add	r4, sp, #28
   b716a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b716c:	f8dc 3000 	ldr.w	r3, [ip]
   b7170:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b7172:	a806      	add	r0, sp, #24
   b7174:	f7ff fb7e 	bl	b6874 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b7178:	b180      	cbz	r0, b719c <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b717a:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b717c:	ad07      	add	r5, sp, #28
   b717e:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b7182:	4b12      	ldr	r3, [pc, #72]	; (b71cc <_ZN9TCPClient7connectEPKctm+0xf8>)
   b7184:	930c      	str	r3, [sp, #48]	; 0x30
   b7186:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7188:	ac0d      	add	r4, sp, #52	; 0x34
   b718a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b718c:	682b      	ldr	r3, [r5, #0]
   b718e:	7023      	strb	r3, [r4, #0]
   b7190:	463a      	mov	r2, r7
   b7192:	4643      	mov	r3, r8
   b7194:	a90c      	add	r1, sp, #48	; 0x30
   b7196:	4630      	mov	r0, r6
   b7198:	47c8      	blx	r9
   b719a:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b719c:	9800      	ldr	r0, [sp, #0]
   b719e:	f7fe fffb 	bl	b6198 <netdb_freeaddrinfo>
}
   b71a2:	4628      	mov	r0, r5
   b71a4:	b013      	add	sp, #76	; 0x4c
   b71a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b71aa:	68e3      	ldr	r3, [r4, #12]
   b71ac:	2b00      	cmp	r3, #0
   b71ae:	d1c3      	bne.n	b7138 <_ZN9TCPClient7connectEPKctm+0x64>
   b71b0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b71b4:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b71b8:	f7fe ffde 	bl	b6178 <inet_htonl>
   b71bc:	4581      	cmp	r9, r0
   b71be:	d1bb      	bne.n	b7138 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b71c0:	f104 0114 	add.w	r1, r4, #20
   b71c4:	e7aa      	b.n	b711c <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b71c6:	4625      	mov	r5, r4
   b71c8:	e7e8      	b.n	b719c <_ZN9TCPClient7connectEPKctm+0xc8>
   b71ca:	bf00      	nop
   b71cc:	000b8a88 	.word	0x000b8a88

000b71d0 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b71d0:	b538      	push	{r3, r4, r5, lr}
   b71d2:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b71d4:	681a      	ldr	r2, [r3, #0]
   b71d6:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b71d8:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b71da:	da10      	bge.n	b71fe <_ZN9TCPClient9connectedEv+0x2e>
   b71dc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b71e0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b71e4:	429a      	cmp	r2, r3
   b71e6:	d10a      	bne.n	b71fe <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b71e8:	6803      	ldr	r3, [r0, #0]
   b71ea:	691b      	ldr	r3, [r3, #16]
   b71ec:	4798      	blx	r3
        if (!rv) {
   b71ee:	4604      	mov	r4, r0
   b71f0:	b928      	cbnz	r0, b71fe <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b71f2:	682b      	ldr	r3, [r5, #0]
   b71f4:	4628      	mov	r0, r5
   b71f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b71f8:	4798      	blx	r3
        rv = available();
   b71fa:	4620      	mov	r0, r4
}
   b71fc:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b71fe:	2001      	movs	r0, #1
   b7200:	e7fc      	b.n	b71fc <_ZN9TCPClient9connectedEv+0x2c>

000b7202 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b7202:	b510      	push	{r4, lr}
   b7204:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7206:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b720a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b720e:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b7210:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7212:	d005      	beq.n	b7220 <_ZN9TCPClient4peekEv+0x1e>
   b7214:	6963      	ldr	r3, [r4, #20]
   b7216:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b721a:	4413      	add	r3, r2
   b721c:	7918      	ldrb	r0, [r3, #4]
}
   b721e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7220:	6803      	ldr	r3, [r0, #0]
   b7222:	691b      	ldr	r3, [r3, #16]
   b7224:	4798      	blx	r3
   b7226:	2800      	cmp	r0, #0
   b7228:	d1f4      	bne.n	b7214 <_ZN9TCPClient4peekEv+0x12>
   b722a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b722e:	e7f6      	b.n	b721e <_ZN9TCPClient4peekEv+0x1c>

000b7230 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7232:	6943      	ldr	r3, [r0, #20]
   b7234:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b7236:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b723a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b723e:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7240:	4605      	mov	r5, r0
   b7242:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b7244:	d016      	beq.n	b7274 <_ZN9TCPClient4readEPhj+0x44>
   b7246:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b7248:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b724c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b7250:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b7252:	42bc      	cmp	r4, r7
   b7254:	bf28      	it	cs
   b7256:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b7258:	3304      	adds	r3, #4
   b725a:	4622      	mov	r2, r4
   b725c:	4419      	add	r1, r3
   b725e:	4630      	mov	r0, r6
   b7260:	f000 fda2 	bl	b7da8 <memcpy>
   b7264:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b7266:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b726a:	4423      	add	r3, r4
   b726c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b7270:	4620      	mov	r0, r4
   b7272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b7274:	6803      	ldr	r3, [r0, #0]
   b7276:	691b      	ldr	r3, [r3, #16]
   b7278:	4798      	blx	r3
   b727a:	2800      	cmp	r0, #0
   b727c:	d1e3      	bne.n	b7246 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b727e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b7282:	e7f5      	b.n	b7270 <_ZN9TCPClient4readEPhj+0x40>

000b7284 <_ZN9TCPClient12flush_bufferEv>:
   b7284:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b7286:	2300      	movs	r3, #0
   b7288:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b728c:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b728e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b7292:	4770      	bx	lr

000b7294 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7298:	461f      	mov	r7, r3
    stop();
   b729a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b729c:	460c      	mov	r4, r1
    stop();
   b729e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b72a0:	b08a      	sub	sp, #40	; 0x28
   b72a2:	4605      	mov	r5, r0
   b72a4:	4616      	mov	r6, r2
    stop();
   b72a6:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b72a8:	7d23      	ldrb	r3, [r4, #20]
   b72aa:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b72ae:	2b04      	cmp	r3, #4
   b72b0:	bf0c      	ite	eq
   b72b2:	2002      	moveq	r0, #2
   b72b4:	200a      	movne	r0, #10
   b72b6:	2206      	movs	r2, #6
   b72b8:	2101      	movs	r1, #1
   b72ba:	f7fe ffad 	bl	b6218 <sock_socket>
   b72be:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b72c2:	696b      	ldr	r3, [r5, #20]
   b72c4:	681b      	ldr	r3, [r3, #0]
   b72c6:	2b00      	cmp	r3, #0
   b72c8:	da08      	bge.n	b72dc <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b72ca:	682b      	ldr	r3, [r5, #0]
   b72cc:	4628      	mov	r0, r5
   b72ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b72d0:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b72d2:	4798      	blx	r3
}
   b72d4:	4620      	mov	r0, r4
   b72d6:	b00a      	add	sp, #40	; 0x28
   b72d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b72dc:	4628      	mov	r0, r5
   b72de:	f7ff ffd1 	bl	b7284 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b72e2:	b1b7      	cbz	r7, b7312 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b72e4:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b72e6:	a903      	add	r1, sp, #12
   b72e8:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b72ea:	9303      	str	r3, [sp, #12]
   b72ec:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b72f0:	f7fe ff32 	bl	b6158 <if_index_to_name>
   b72f4:	2800      	cmp	r0, #0
   b72f6:	d1e8      	bne.n	b72ca <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b72f8:	6968      	ldr	r0, [r5, #20]
   b72fa:	2306      	movs	r3, #6
   b72fc:	9300      	str	r3, [sp, #0]
   b72fe:	6800      	ldr	r0, [r0, #0]
   b7300:	ab03      	add	r3, sp, #12
   b7302:	f241 020b 	movw	r2, #4107	; 0x100b
   b7306:	f640 71ff 	movw	r1, #4095	; 0xfff
   b730a:	f7fe ff5d 	bl	b61c8 <sock_setsockopt>
   b730e:	2800      	cmp	r0, #0
   b7310:	d1db      	bne.n	b72ca <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b7312:	221c      	movs	r2, #28
   b7314:	2100      	movs	r1, #0
   b7316:	a803      	add	r0, sp, #12
   b7318:	f000 fd54 	bl	b7dc4 <memset>
    if (ip.version() == 4) {
   b731c:	7d23      	ldrb	r3, [r4, #20]
   b731e:	2b04      	cmp	r3, #4
   b7320:	d11d      	bne.n	b735e <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b7322:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b7326:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b7328:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b732c:	f7fe ff2c 	bl	b6188 <inet_htons>
   b7330:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b7334:	6860      	ldr	r0, [r4, #4]
   b7336:	f7fe ff1f 	bl	b6178 <inet_htonl>
   b733a:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b733c:	696b      	ldr	r3, [r5, #20]
   b733e:	221c      	movs	r2, #28
   b7340:	6818      	ldr	r0, [r3, #0]
   b7342:	a903      	add	r1, sp, #12
   b7344:	f7fe ff50 	bl	b61e8 <sock_connect>
   b7348:	2800      	cmp	r0, #0
   b734a:	d1be      	bne.n	b72ca <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b734c:	3404      	adds	r4, #4
   b734e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7350:	696d      	ldr	r5, [r5, #20]
   b7352:	358c      	adds	r5, #140	; 0x8c
   b7354:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7356:	6823      	ldr	r3, [r4, #0]
   b7358:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b735a:	2401      	movs	r4, #1
   b735c:	e7ba      	b.n	b72d4 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b735e:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b7362:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b7364:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b7368:	f7fe ff0e 	bl	b6188 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b736c:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b736e:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7372:	1d23      	adds	r3, r4, #4
   b7374:	f104 0714 	add.w	r7, r4, #20
   b7378:	6818      	ldr	r0, [r3, #0]
   b737a:	6859      	ldr	r1, [r3, #4]
   b737c:	4632      	mov	r2, r6
   b737e:	c203      	stmia	r2!, {r0, r1}
   b7380:	3308      	adds	r3, #8
   b7382:	42bb      	cmp	r3, r7
   b7384:	4616      	mov	r6, r2
   b7386:	d1f7      	bne.n	b7378 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b7388:	e7d8      	b.n	b733c <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b738c <_ZN9TCPClient9availableEv>:
{
   b738c:	b530      	push	{r4, r5, lr}
   b738e:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b7390:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b7394:	b08b      	sub	sp, #44	; 0x2c
   b7396:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b7398:	b12b      	cbz	r3, b73a6 <_ZN9TCPClient9availableEv+0x1a>
   b739a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b739e:	429a      	cmp	r2, r3
   b73a0:	d101      	bne.n	b73a6 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b73a2:	f7ff ff6f 	bl	b7284 <_ZN9TCPClient12flush_bufferEv>
   b73a6:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b73a8:	6808      	ldr	r0, [r1, #0]
   b73aa:	2800      	cmp	r0, #0
   b73ac:	db18      	blt.n	b73e0 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b73ae:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b73b2:	2d7f      	cmp	r5, #127	; 0x7f
   b73b4:	d814      	bhi.n	b73e0 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b73b6:	3104      	adds	r1, #4
   b73b8:	2308      	movs	r3, #8
   b73ba:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b73be:	4429      	add	r1, r5
   b73c0:	f7fe ff1a 	bl	b61f8 <sock_recv>
            if (ret > 0) {
   b73c4:	2800      	cmp	r0, #0
   b73c6:	dd13      	ble.n	b73f0 <_ZN9TCPClient9availableEv+0x64>
   b73c8:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b73ca:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b73ce:	b90a      	cbnz	r2, b73d4 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b73d0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b73d4:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b73d6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b73da:	4410      	add	r0, r2
   b73dc:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b73e0:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b73e2:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b73e6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b73ea:	1ac0      	subs	r0, r0, r3
   b73ec:	b00b      	add	sp, #44	; 0x2c
   b73ee:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b73f0:	f7ff f8ae 	bl	b6550 <__errno>
   b73f4:	6803      	ldr	r3, [r0, #0]
   b73f6:	2b0b      	cmp	r3, #11
   b73f8:	d0f2      	beq.n	b73e0 <_ZN9TCPClient9availableEv+0x54>
   b73fa:	f7ff f8a9 	bl	b6550 <__errno>
   b73fe:	6803      	ldr	r3, [r0, #0]
   b7400:	2b0b      	cmp	r3, #11
   b7402:	d0ed      	beq.n	b73e0 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7404:	2320      	movs	r3, #32
   b7406:	2500      	movs	r5, #0
   b7408:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b740c:	f7ff f8a0 	bl	b6550 <__errno>
   b7410:	6803      	ldr	r3, [r0, #0]
   b7412:	9301      	str	r3, [sp, #4]
   b7414:	4b08      	ldr	r3, [pc, #32]	; (b7438 <_ZN9TCPClient9availableEv+0xac>)
   b7416:	4909      	ldr	r1, [pc, #36]	; (b743c <_ZN9TCPClient9availableEv+0xb0>)
   b7418:	9300      	str	r3, [sp, #0]
   b741a:	aa02      	add	r2, sp, #8
   b741c:	462b      	mov	r3, r5
   b741e:	2032      	movs	r0, #50	; 0x32
   b7420:	f7fe ffd2 	bl	b63c8 <log_message>
                    sock_close(d_->sock);
   b7424:	6963      	ldr	r3, [r4, #20]
   b7426:	6818      	ldr	r0, [r3, #0]
   b7428:	f7fe fed6 	bl	b61d8 <sock_close>
   b742c:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b742e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7432:	601a      	str	r2, [r3, #0]
   b7434:	e7d4      	b.n	b73e0 <_ZN9TCPClient9availableEv+0x54>
   b7436:	bf00      	nop
   b7438:	000b8ae3 	.word	0x000b8ae3
   b743c:	000b8adc 	.word	0x000b8adc

000b7440 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b7440:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b7442:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b7444:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b7446:	6818      	ldr	r0, [r3, #0]
   b7448:	2800      	cmp	r0, #0
   b744a:	db01      	blt.n	b7450 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b744c:	f7fe fec4 	bl	b61d8 <sock_close>
   b7450:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b7452:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7456:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b7458:	6960      	ldr	r0, [r4, #20]
   b745a:	2211      	movs	r2, #17
   b745c:	2100      	movs	r1, #0
   b745e:	308c      	adds	r0, #140	; 0x8c
   b7460:	f000 fcb0 	bl	b7dc4 <memset>
    flush_buffer();
   b7464:	4620      	mov	r0, r4
}
   b7466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b746a:	f7ff bf0b 	b.w	b7284 <_ZN9TCPClient12flush_bufferEv>

000b746e <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b746e:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b7470:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b7472:	4604      	mov	r4, r0
          total(0) {
   b7474:	6001      	str	r1, [r0, #0]
   b7476:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b747a:	3088      	adds	r0, #136	; 0x88
   b747c:	f7ff f9da 	bl	b6834 <_ZN9IPAddressC1Ev>
}
   b7480:	4620      	mov	r0, r4
   b7482:	bd10      	pop	{r4, pc}

000b7484 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b7484:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7486:	2300      	movs	r3, #0
   b7488:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b748c:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b7490:	4a0e      	ldr	r2, [pc, #56]	; (b74cc <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b7492:	6103      	str	r3, [r0, #16]
   b7494:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7496:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b7498:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b749a:	20ac      	movs	r0, #172	; 0xac
   b749c:	9101      	str	r1, [sp, #4]
   b749e:	f7fc fdf8 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b74a2:	1e05      	subs	r5, r0, #0
   b74a4:	f105 060c 	add.w	r6, r5, #12
   b74a8:	d008      	beq.n	b74bc <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b74aa:	2301      	movs	r3, #1
   b74ac:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b74b0:	4b07      	ldr	r3, [pc, #28]	; (b74d0 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b74b2:	9901      	ldr	r1, [sp, #4]
   b74b4:	602b      	str	r3, [r5, #0]
   b74b6:	4630      	mov	r0, r6
   b74b8:	f7ff ffd9 	bl	b746e <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b74bc:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b74be:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b74c2:	f7ff fedf 	bl	b7284 <_ZN9TCPClient12flush_bufferEv>
}
   b74c6:	b002      	add	sp, #8
   b74c8:	bd70      	pop	{r4, r5, r6, pc}
   b74ca:	bf00      	nop
   b74cc:	000b8b18 	.word	0x000b8b18
   b74d0:	000b8afc 	.word	0x000b8afc

000b74d4 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b74d4:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b74d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b74da:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b74dc:	f7ff ffd2 	bl	b7484 <_ZN9TCPClientC1Ei>
}
   b74e0:	4620      	mov	r0, r4
   b74e2:	bd10      	pop	{r4, pc}

000b74e4 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b74e4:	b510      	push	{r4, lr}
   b74e6:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b74e8:	6800      	ldr	r0, [r0, #0]
   b74ea:	2800      	cmp	r0, #0
   b74ec:	db01      	blt.n	b74f2 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b74ee:	f7fe fe73 	bl	b61d8 <sock_close>
    }
}
   b74f2:	4620      	mov	r0, r4
   b74f4:	bd10      	pop	{r4, pc}

000b74f6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b74f6:	300c      	adds	r0, #12
   b74f8:	f7ff bff4 	b.w	b74e4 <_ZN9TCPClient4DataD1Ev>

000b74fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b74fc:	4b02      	ldr	r3, [pc, #8]	; (b7508 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b74fe:	681a      	ldr	r2, [r3, #0]
   b7500:	4b02      	ldr	r3, [pc, #8]	; (b750c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7502:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7504:	4770      	bx	lr
   b7506:	bf00      	nop
   b7508:	2003e484 	.word	0x2003e484
   b750c:	2003e6fc 	.word	0x2003e6fc

000b7510 <tone>:

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   b7510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   b7512:	b287      	uxth	r7, r0
{
   b7514:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   b7516:	4638      	mov	r0, r7
{
   b7518:	460d      	mov	r5, r1
   b751a:	4616      	mov	r6, r2
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   b751c:	f000 fa0a 	bl	b7934 <pinAvailable>
   b7520:	b160      	cbz	r0, b753c <tone+0x2c>
   b7522:	2102      	movs	r1, #2
   b7524:	4638      	mov	r0, r7
   b7526:	f7fe fd7f 	bl	b6028 <HAL_Validate_Pin_Function>
   b752a:	2802      	cmp	r0, #2
   b752c:	d106      	bne.n	b753c <tone+0x2c>
        HAL_Tone_Start(pin, frequency, duration);
   b752e:	4632      	mov	r2, r6
   b7530:	4629      	mov	r1, r5
   b7532:	4620      	mov	r0, r4
    }
}
   b7534:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        HAL_Tone_Start(pin, frequency, duration);
   b7538:	f7fe be3e 	b.w	b61b8 <HAL_Tone_Start>
}
   b753c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b753e <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b753e:	4770      	bx	lr

000b7540 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7540:	7441      	strb	r1, [r0, #17]
}
   b7542:	4770      	bx	lr

000b7544 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7544:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7546:	7c00      	ldrb	r0, [r0, #16]
   b7548:	f7fe feee 	bl	b6328 <hal_usart_available_data_for_write>
}
   b754c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7550:	bd08      	pop	{r3, pc}

000b7552 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7552:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7554:	7c00      	ldrb	r0, [r0, #16]
   b7556:	f7fe febf 	bl	b62d8 <hal_usart_available>
}
   b755a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b755e:	bd08      	pop	{r3, pc}

000b7560 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7560:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7562:	7c00      	ldrb	r0, [r0, #16]
   b7564:	f7fe fec8 	bl	b62f8 <hal_usart_peek>
}
   b7568:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b756c:	bd08      	pop	{r3, pc}

000b756e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b756e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7570:	7c00      	ldrb	r0, [r0, #16]
   b7572:	f7fe feb9 	bl	b62e8 <hal_usart_read>
}
   b7576:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b757a:	bd08      	pop	{r3, pc}

000b757c <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b757c:	7c00      	ldrb	r0, [r0, #16]
   b757e:	f7fe bec3 	b.w	b6308 <hal_usart_flush>

000b7582 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7582:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7584:	7c45      	ldrb	r5, [r0, #17]
{
   b7586:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7588:	b12d      	cbz	r5, b7596 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b758a:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b758c:	b003      	add	sp, #12
   b758e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7592:	f7fe be99 	b.w	b62c8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7596:	7c00      	ldrb	r0, [r0, #16]
   b7598:	9101      	str	r1, [sp, #4]
   b759a:	f7fe fec5 	bl	b6328 <hal_usart_available_data_for_write>
   b759e:	2800      	cmp	r0, #0
   b75a0:	9901      	ldr	r1, [sp, #4]
   b75a2:	dcf2      	bgt.n	b758a <_ZN11USARTSerial5writeEh+0x8>
}
   b75a4:	4628      	mov	r0, r5
   b75a6:	b003      	add	sp, #12
   b75a8:	bd30      	pop	{r4, r5, pc}

000b75aa <_ZN11USARTSerialD0Ev>:
   b75aa:	b510      	push	{r4, lr}
   b75ac:	2114      	movs	r1, #20
   b75ae:	4604      	mov	r4, r0
   b75b0:	f7fc fd73 	bl	b409a <_ZdlPvj>
   b75b4:	4620      	mov	r0, r4
   b75b6:	bd10      	pop	{r4, pc}

000b75b8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b75b8:	b510      	push	{r4, lr}
   b75ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b75be:	4604      	mov	r4, r0
   b75c0:	4608      	mov	r0, r1
   b75c2:	4611      	mov	r1, r2
   b75c4:	2200      	movs	r2, #0
   b75c6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b75ca:	4b04      	ldr	r3, [pc, #16]	; (b75dc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b75cc:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b75ce:	2301      	movs	r3, #1
  _serial = serial;
   b75d0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b75d2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b75d4:	f7fe feb0 	bl	b6338 <hal_usart_init_ex>
}
   b75d8:	4620      	mov	r0, r4
   b75da:	bd10      	pop	{r4, pc}
   b75dc:	000b8b80 	.word	0x000b8b80

000b75e0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b75e0:	7441      	strb	r1, [r0, #17]
}
   b75e2:	4770      	bx	lr

000b75e4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b75e4:	4770      	bx	lr

000b75e6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b75e6:	4770      	bx	lr

000b75e8 <_ZN9USBSerial4readEv>:
{
   b75e8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b75ea:	2100      	movs	r1, #0
   b75ec:	7c00      	ldrb	r0, [r0, #16]
   b75ee:	f7fe fecb 	bl	b6388 <HAL_USB_USART_Receive_Data>
}
   b75f2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b75f6:	bd08      	pop	{r3, pc}

000b75f8 <_ZN9USBSerial4peekEv>:
{
   b75f8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b75fa:	2101      	movs	r1, #1
   b75fc:	7c00      	ldrb	r0, [r0, #16]
   b75fe:	f7fe fec3 	bl	b6388 <HAL_USB_USART_Receive_Data>
}
   b7602:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7606:	bd08      	pop	{r3, pc}

000b7608 <_ZN9USBSerial17availableForWriteEv>:
{
   b7608:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b760a:	7c00      	ldrb	r0, [r0, #16]
   b760c:	f7fe feb4 	bl	b6378 <HAL_USB_USART_Available_Data_For_Write>
}
   b7610:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7614:	bd08      	pop	{r3, pc}

000b7616 <_ZN9USBSerial9availableEv>:
{
   b7616:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7618:	7c00      	ldrb	r0, [r0, #16]
   b761a:	f7fe fea5 	bl	b6368 <HAL_USB_USART_Available_Data>
}
   b761e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7622:	bd08      	pop	{r3, pc}

000b7624 <_ZN9USBSerial5writeEh>:
{
   b7624:	b513      	push	{r0, r1, r4, lr}
   b7626:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7628:	7c00      	ldrb	r0, [r0, #16]
{
   b762a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b762c:	f7fe fea4 	bl	b6378 <HAL_USB_USART_Available_Data_For_Write>
   b7630:	2800      	cmp	r0, #0
   b7632:	9901      	ldr	r1, [sp, #4]
   b7634:	dc01      	bgt.n	b763a <_ZN9USBSerial5writeEh+0x16>
   b7636:	7c60      	ldrb	r0, [r4, #17]
   b7638:	b120      	cbz	r0, b7644 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b763a:	7c20      	ldrb	r0, [r4, #16]
   b763c:	f7fe feac 	bl	b6398 <HAL_USB_USART_Send_Data>
   b7640:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7644:	b002      	add	sp, #8
   b7646:	bd10      	pop	{r4, pc}

000b7648 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7648:	7c00      	ldrb	r0, [r0, #16]
   b764a:	f7fe bead 	b.w	b63a8 <HAL_USB_USART_Flush_Data>

000b764e <_ZN9USBSerialD0Ev>:
   b764e:	b510      	push	{r4, lr}
   b7650:	2114      	movs	r1, #20
   b7652:	4604      	mov	r4, r0
   b7654:	f7fc fd21 	bl	b409a <_ZdlPvj>
   b7658:	4620      	mov	r0, r4
   b765a:	bd10      	pop	{r4, pc}

000b765c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b765c:	b510      	push	{r4, lr}
   b765e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7662:	4604      	mov	r4, r0
   b7664:	4608      	mov	r0, r1
   b7666:	2100      	movs	r1, #0
   b7668:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b766c:	4b04      	ldr	r3, [pc, #16]	; (b7680 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b766e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7670:	2301      	movs	r3, #1
  _serial = serial;
   b7672:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7674:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7676:	4611      	mov	r1, r2
   b7678:	f7fe fe66 	bl	b6348 <HAL_USB_USART_Init>
}
   b767c:	4620      	mov	r0, r4
   b767e:	bd10      	pop	{r4, pc}
   b7680:	000b8bb0 	.word	0x000b8bb0

000b7684 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7684:	7c00      	ldrb	r0, [r0, #16]
   b7686:	2200      	movs	r2, #0
   b7688:	f7fe be66 	b.w	b6358 <HAL_USB_USART_Begin>

000b768c <_Z19acquireSerialBufferv>:
{
   b768c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b768e:	2214      	movs	r2, #20
{
   b7690:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7692:	2100      	movs	r1, #0
   b7694:	f000 fb96 	bl	b7dc4 <memset>
}
   b7698:	4620      	mov	r0, r4
   b769a:	bd10      	pop	{r4, pc}

000b769c <_Z16_fetch_usbserialv>:
{
   b769c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b769e:	4c0f      	ldr	r4, [pc, #60]	; (b76dc <_Z16_fetch_usbserialv+0x40>)
{
   b76a0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b76a2:	a803      	add	r0, sp, #12
   b76a4:	f7ff fff2 	bl	b768c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b76a8:	7821      	ldrb	r1, [r4, #0]
   b76aa:	f3bf 8f5b 	dmb	ish
   b76ae:	f011 0101 	ands.w	r1, r1, #1
   b76b2:	d10f      	bne.n	b76d4 <_Z16_fetch_usbserialv+0x38>
   b76b4:	4620      	mov	r0, r4
   b76b6:	9101      	str	r1, [sp, #4]
   b76b8:	f7fc fcfe 	bl	b40b8 <__cxa_guard_acquire>
   b76bc:	9901      	ldr	r1, [sp, #4]
   b76be:	b148      	cbz	r0, b76d4 <_Z16_fetch_usbserialv+0x38>
   b76c0:	aa03      	add	r2, sp, #12
   b76c2:	4807      	ldr	r0, [pc, #28]	; (b76e0 <_Z16_fetch_usbserialv+0x44>)
   b76c4:	f7ff ffca 	bl	b765c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b76c8:	4620      	mov	r0, r4
   b76ca:	f7fc fcfa 	bl	b40c2 <__cxa_guard_release>
   b76ce:	4805      	ldr	r0, [pc, #20]	; (b76e4 <_Z16_fetch_usbserialv+0x48>)
   b76d0:	f000 fb64 	bl	b7d9c <atexit>
	return _usbserial;
}
   b76d4:	4802      	ldr	r0, [pc, #8]	; (b76e0 <_Z16_fetch_usbserialv+0x44>)
   b76d6:	b008      	add	sp, #32
   b76d8:	bd10      	pop	{r4, pc}
   b76da:	bf00      	nop
   b76dc:	2003e700 	.word	0x2003e700
   b76e0:	2003e704 	.word	0x2003e704
   b76e4:	000b75e5 	.word	0x000b75e5

000b76e8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b76e8:	2200      	movs	r2, #0
   b76ea:	6840      	ldr	r0, [r0, #4]
   b76ec:	4611      	mov	r1, r2
   b76ee:	f7fe beb7 	b.w	b6460 <network_ready>

000b76f2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b76f2:	2200      	movs	r2, #0
   b76f4:	6840      	ldr	r0, [r0, #4]
   b76f6:	4611      	mov	r1, r2
   b76f8:	f7fe bed2 	b.w	b64a0 <network_listening>

000b76fc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b76fc:	2200      	movs	r2, #0
   b76fe:	6840      	ldr	r0, [r0, #4]
   b7700:	4611      	mov	r1, r2
   b7702:	f7fe bee5 	b.w	b64d0 <network_get_listen_timeout>

000b7706 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7706:	6840      	ldr	r0, [r0, #4]
   b7708:	2200      	movs	r2, #0
   b770a:	f7fe bed9 	b.w	b64c0 <network_set_listen_timeout>

000b770e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b770e:	6840      	ldr	r0, [r0, #4]
   b7710:	2200      	movs	r2, #0
   b7712:	f081 0101 	eor.w	r1, r1, #1
   b7716:	f7fe bebb 	b.w	b6490 <network_listen>

000b771a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b771a:	2300      	movs	r3, #0
   b771c:	6840      	ldr	r0, [r0, #4]
   b771e:	461a      	mov	r2, r3
   b7720:	4619      	mov	r1, r3
   b7722:	f7fe bead 	b.w	b6480 <network_off>

000b7726 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7726:	2300      	movs	r3, #0
   b7728:	6840      	ldr	r0, [r0, #4]
   b772a:	461a      	mov	r2, r3
   b772c:	4619      	mov	r1, r3
   b772e:	f7fe be9f 	b.w	b6470 <network_on>

000b7732 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7732:	2200      	movs	r2, #0
   b7734:	6840      	ldr	r0, [r0, #4]
   b7736:	4611      	mov	r1, r2
   b7738:	f7fe be82 	b.w	b6440 <network_connecting>

000b773c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b773c:	6840      	ldr	r0, [r0, #4]
   b773e:	2200      	movs	r2, #0
   b7740:	2102      	movs	r1, #2
   b7742:	f7fe be85 	b.w	b6450 <network_disconnect>

000b7746 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7746:	2300      	movs	r3, #0
   b7748:	6840      	ldr	r0, [r0, #4]
   b774a:	461a      	mov	r2, r3
   b774c:	f7fe be70 	b.w	b6430 <network_connect>

000b7750 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7750:	4b02      	ldr	r3, [pc, #8]	; (b775c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b7752:	2204      	movs	r2, #4
   b7754:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7756:	4a02      	ldr	r2, [pc, #8]	; (b7760 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7758:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b775a:	4770      	bx	lr
   b775c:	2003e718 	.word	0x2003e718
   b7760:	000b8be0 	.word	0x000b8be0

000b7764 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b7764:	b510      	push	{r4, lr}
   b7766:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b7768:	f000 fb74 	bl	b7e54 <strlen>
   b776c:	3801      	subs	r0, #1
   b776e:	1823      	adds	r3, r4, r0
   b7770:	4620      	mov	r0, r4
	while(i<j){
   b7772:	4283      	cmp	r3, r0
   b7774:	d906      	bls.n	b7784 <_Z11str_reversePc+0x20>
		c = *i;
   b7776:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b7778:	7819      	ldrb	r1, [r3, #0]
   b777a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b777e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b7782:	e7f6      	b.n	b7772 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b7784:	bd10      	pop	{r4, pc}

000b7786 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b7786:	b570      	push	{r4, r5, r6, lr}
   b7788:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b778a:	1e91      	subs	r1, r2, #2
   b778c:	2922      	cmp	r1, #34	; 0x22
   b778e:	d81d      	bhi.n	b77cc <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b7790:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b7792:	b930      	cbnz	r0, b77a2 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b7794:	4423      	add	r3, r4
            *ptr++ = '0';
   b7796:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b7798:	429d      	cmp	r5, r3
   b779a:	d210      	bcs.n	b77be <ultoa+0x38>
            *ptr++ = '0';
   b779c:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b77a0:	e7fa      	b.n	b7798 <ultoa+0x12>
            result.quot = a/radix;
   b77a2:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b77a6:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b77aa:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b77ac:	2809      	cmp	r0, #9
                *ptr += '0';
   b77ae:	bf94      	ite	ls
   b77b0:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b77b2:	3157      	addhi	r1, #87	; 0x57
   b77b4:	b2c9      	uxtb	r1, r1
   b77b6:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b77ba:	4630      	mov	r0, r6
	while(a){
   b77bc:	e7e9      	b.n	b7792 <ultoa+0xc>

	*ptr = '\0';
   b77be:	2300      	movs	r3, #0
	str_reverse(buffer);
   b77c0:	4620      	mov	r0, r4
	*ptr = '\0';
   b77c2:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b77c4:	f7ff ffce 	bl	b7764 <_Z11str_reversePc>
	return buffer;
   b77c8:	4620      	mov	r0, r4
}
   b77ca:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b77cc:	2000      	movs	r0, #0
   b77ce:	e7fc      	b.n	b77ca <ultoa+0x44>

000b77d0 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b77d0:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b77d2:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b77d4:	460c      	mov	r4, r1
   b77d6:	4615      	mov	r5, r2
	if(a<0){
   b77d8:	da0e      	bge.n	b77f8 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b77da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b77de:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b77e2:	bf14      	ite	ne
   b77e4:	4258      	negne	r0, r3
   b77e6:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b77e8:	2301      	movs	r3, #1
		*buffer = '-';
   b77ea:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b77ec:	462a      	mov	r2, r5
   b77ee:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b77f0:	f7ff ffc9 	bl	b7786 <ultoa>
	}
	return buffer;
}
   b77f4:	4620      	mov	r0, r4
   b77f6:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b77f8:	2301      	movs	r3, #1
   b77fa:	e7f9      	b.n	b77f0 <itoa+0x20>

000b77fc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b77fc:	4b01      	ldr	r3, [pc, #4]	; (b7804 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b77fe:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7800:	4770      	bx	lr
   b7802:	bf00      	nop
   b7804:	2003e488 	.word	0x2003e488

000b7808 <serialEventRun>:
{
   b7808:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b780a:	4b0b      	ldr	r3, [pc, #44]	; (b7838 <serialEventRun+0x30>)
   b780c:	b143      	cbz	r3, b7820 <serialEventRun+0x18>
   b780e:	f7ff ff45 	bl	b769c <_Z16_fetch_usbserialv>
   b7812:	6803      	ldr	r3, [r0, #0]
   b7814:	691b      	ldr	r3, [r3, #16]
   b7816:	4798      	blx	r3
   b7818:	2800      	cmp	r0, #0
   b781a:	dd01      	ble.n	b7820 <serialEventRun+0x18>
        serialEvent();
   b781c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7820:	4b06      	ldr	r3, [pc, #24]	; (b783c <serialEventRun+0x34>)
   b7822:	b143      	cbz	r3, b7836 <serialEventRun+0x2e>
   b7824:	f000 f97e 	bl	b7b24 <_Z22__fetch_global_Serial1v>
   b7828:	6803      	ldr	r3, [r0, #0]
   b782a:	691b      	ldr	r3, [r3, #16]
   b782c:	4798      	blx	r3
   b782e:	2800      	cmp	r0, #0
   b7830:	dd01      	ble.n	b7836 <serialEventRun+0x2e>
        serialEvent1();
   b7832:	f3af 8000 	nop.w
}
   b7836:	bd08      	pop	{r3, pc}
	...

000b7840 <_post_loop>:
{
   b7840:	b508      	push	{r3, lr}
	serialEventRun();
   b7842:	f7ff ffe1 	bl	b7808 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7846:	f7fe fbdf 	bl	b6008 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b784a:	4b01      	ldr	r3, [pc, #4]	; (b7850 <_post_loop+0x10>)
   b784c:	6018      	str	r0, [r3, #0]
}
   b784e:	bd08      	pop	{r3, pc}
   b7850:	2003e728 	.word	0x2003e728

000b7854 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7854:	4805      	ldr	r0, [pc, #20]	; (b786c <_Z33system_initialize_user_backup_ramv+0x18>)
   b7856:	4a06      	ldr	r2, [pc, #24]	; (b7870 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7858:	4906      	ldr	r1, [pc, #24]	; (b7874 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b785a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b785c:	1a12      	subs	r2, r2, r0
   b785e:	f000 faa3 	bl	b7da8 <memcpy>
    __backup_sram_signature = signature;
   b7862:	4b05      	ldr	r3, [pc, #20]	; (b7878 <_Z33system_initialize_user_backup_ramv+0x24>)
   b7864:	4a05      	ldr	r2, [pc, #20]	; (b787c <_Z33system_initialize_user_backup_ramv+0x28>)
   b7866:	601a      	str	r2, [r3, #0]
}
   b7868:	bd08      	pop	{r3, pc}
   b786a:	bf00      	nop
   b786c:	2003f400 	.word	0x2003f400
   b7870:	2003f404 	.word	0x2003f404
   b7874:	000b8dd4 	.word	0x000b8dd4
   b7878:	2003f400 	.word	0x2003f400
   b787c:	9a271c1e 	.word	0x9a271c1e

000b7880 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7880:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7882:	2300      	movs	r3, #0
   b7884:	9300      	str	r3, [sp, #0]
   b7886:	461a      	mov	r2, r3
   b7888:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b788c:	f7fe fdbe 	bl	b640c <system_ctrl_set_result>
}
   b7890:	b003      	add	sp, #12
   b7892:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7898 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7898:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b789a:	8843      	ldrh	r3, [r0, #2]
   b789c:	2b0a      	cmp	r3, #10
   b789e:	d008      	beq.n	b78b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b78a0:	2b50      	cmp	r3, #80	; 0x50
   b78a2:	d10b      	bne.n	b78bc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b78a4:	4b09      	ldr	r3, [pc, #36]	; (b78cc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b78a6:	681b      	ldr	r3, [r3, #0]
   b78a8:	b14b      	cbz	r3, b78be <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b78aa:	b003      	add	sp, #12
   b78ac:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b78b0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b78b2:	f7ff ffe5 	bl	b7880 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b78b6:	b003      	add	sp, #12
   b78b8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b78bc:	2300      	movs	r3, #0
   b78be:	9300      	str	r3, [sp, #0]
   b78c0:	461a      	mov	r2, r3
   b78c2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b78c6:	f7fe fda1 	bl	b640c <system_ctrl_set_result>
}
   b78ca:	e7f4      	b.n	b78b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b78cc:	2003e724 	.word	0x2003e724

000b78d0 <module_user_init_hook>:
{
   b78d0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b78d2:	4812      	ldr	r0, [pc, #72]	; (b791c <module_user_init_hook+0x4c>)
   b78d4:	2100      	movs	r1, #0
   b78d6:	f7fe fe4b 	bl	b6570 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b78da:	4b11      	ldr	r3, [pc, #68]	; (b7920 <module_user_init_hook+0x50>)
   b78dc:	681a      	ldr	r2, [r3, #0]
   b78de:	4b11      	ldr	r3, [pc, #68]	; (b7924 <module_user_init_hook+0x54>)
   b78e0:	429a      	cmp	r2, r3
   b78e2:	4b11      	ldr	r3, [pc, #68]	; (b7928 <module_user_init_hook+0x58>)
   b78e4:	bf0c      	ite	eq
   b78e6:	2201      	moveq	r2, #1
   b78e8:	2200      	movne	r2, #0
   b78ea:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b78ec:	d001      	beq.n	b78f2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b78ee:	f7ff ffb1 	bl	b7854 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b78f2:	f7fe fb71 	bl	b5fd8 <HAL_RNG_GetRandomNumber>
   b78f6:	4604      	mov	r4, r0
    srand(seed);
   b78f8:	f000 fa6c 	bl	b7dd4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b78fc:	4b0b      	ldr	r3, [pc, #44]	; (b792c <module_user_init_hook+0x5c>)
   b78fe:	b113      	cbz	r3, b7906 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7900:	4620      	mov	r0, r4
   b7902:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7906:	2100      	movs	r1, #0
   b7908:	4808      	ldr	r0, [pc, #32]	; (b792c <module_user_init_hook+0x5c>)
   b790a:	f7fe fd89 	bl	b6420 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b790e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7912:	4807      	ldr	r0, [pc, #28]	; (b7930 <module_user_init_hook+0x60>)
   b7914:	2100      	movs	r1, #0
   b7916:	f7fe bd6f 	b.w	b63f8 <system_ctrl_set_app_request_handler>
   b791a:	bf00      	nop
   b791c:	000b77fd 	.word	0x000b77fd
   b7920:	2003f400 	.word	0x2003f400
   b7924:	9a271c1e 	.word	0x9a271c1e
   b7928:	2003e720 	.word	0x2003e720
   b792c:	00000000 	.word	0x00000000
   b7930:	000b7899 	.word	0x000b7899

000b7934 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7934:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7936:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7938:	d902      	bls.n	b7940 <pinAvailable+0xc>
    return false;
   b793a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b793c:	b002      	add	sp, #8
   b793e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7940:	f1a0 030b 	sub.w	r3, r0, #11
   b7944:	2b02      	cmp	r3, #2
   b7946:	d81a      	bhi.n	b797e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7948:	4c17      	ldr	r4, [pc, #92]	; (b79a8 <pinAvailable+0x74>)
   b794a:	7821      	ldrb	r1, [r4, #0]
   b794c:	f3bf 8f5b 	dmb	ish
   b7950:	f011 0101 	ands.w	r1, r1, #1
   b7954:	d10b      	bne.n	b796e <pinAvailable+0x3a>
   b7956:	4620      	mov	r0, r4
   b7958:	9101      	str	r1, [sp, #4]
   b795a:	f7fc fbad 	bl	b40b8 <__cxa_guard_acquire>
   b795e:	9901      	ldr	r1, [sp, #4]
   b7960:	b128      	cbz	r0, b796e <pinAvailable+0x3a>
   b7962:	4812      	ldr	r0, [pc, #72]	; (b79ac <pinAvailable+0x78>)
   b7964:	f7ff f914 	bl	b6b90 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7968:	4620      	mov	r0, r4
   b796a:	f7fc fbaa 	bl	b40c2 <__cxa_guard_release>
   b796e:	4b0f      	ldr	r3, [pc, #60]	; (b79ac <pinAvailable+0x78>)
   b7970:	7818      	ldrb	r0, [r3, #0]
   b7972:	f7fe fc89 	bl	b6288 <hal_spi_is_enabled>
   b7976:	2800      	cmp	r0, #0
   b7978:	d1df      	bne.n	b793a <pinAvailable+0x6>
  return true; // 'pin' is available
   b797a:	2001      	movs	r0, #1
   b797c:	e7de      	b.n	b793c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b797e:	2801      	cmp	r0, #1
   b7980:	d809      	bhi.n	b7996 <pinAvailable+0x62>
   b7982:	f000 f88f 	bl	b7aa4 <_Z19__fetch_global_Wirev>
   b7986:	2100      	movs	r1, #0
   b7988:	7c00      	ldrb	r0, [r0, #16]
   b798a:	f7fe fbd5 	bl	b6138 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b798e:	f080 0001 	eor.w	r0, r0, #1
   b7992:	b2c0      	uxtb	r0, r0
   b7994:	e7d2      	b.n	b793c <pinAvailable+0x8>
   b7996:	3809      	subs	r0, #9
   b7998:	2801      	cmp	r0, #1
   b799a:	d8ee      	bhi.n	b797a <pinAvailable+0x46>
   b799c:	f000 f8c2 	bl	b7b24 <_Z22__fetch_global_Serial1v>
   b79a0:	7c00      	ldrb	r0, [r0, #16]
   b79a2:	f7fe fcb9 	bl	b6318 <hal_usart_is_enabled>
   b79a6:	e7f2      	b.n	b798e <pinAvailable+0x5a>
   b79a8:	2003e624 	.word	0x2003e624
   b79ac:	2003e628 	.word	0x2003e628

000b79b0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b79b0:	2823      	cmp	r0, #35	; 0x23
{
   b79b2:	b538      	push	{r3, r4, r5, lr}
   b79b4:	4604      	mov	r4, r0
   b79b6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b79b8:	d80a      	bhi.n	b79d0 <pinMode+0x20>
   b79ba:	29ff      	cmp	r1, #255	; 0xff
   b79bc:	d008      	beq.n	b79d0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b79be:	f7ff ffb9 	bl	b7934 <pinAvailable>
   b79c2:	b128      	cbz	r0, b79d0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b79c4:	4629      	mov	r1, r5
   b79c6:	4620      	mov	r0, r4
}
   b79c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b79cc:	f7fe bb34 	b.w	b6038 <HAL_Pin_Mode>
}
   b79d0:	bd38      	pop	{r3, r4, r5, pc}

000b79d2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b79d2:	b538      	push	{r3, r4, r5, lr}
   b79d4:	4604      	mov	r4, r0
   b79d6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b79d8:	f7fe fb36 	bl	b6048 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b79dc:	28ff      	cmp	r0, #255	; 0xff
   b79de:	d010      	beq.n	b7a02 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b79e0:	2806      	cmp	r0, #6
   b79e2:	d804      	bhi.n	b79ee <digitalWrite+0x1c>
   b79e4:	234d      	movs	r3, #77	; 0x4d
   b79e6:	fa23 f000 	lsr.w	r0, r3, r0
   b79ea:	07c3      	lsls	r3, r0, #31
   b79ec:	d409      	bmi.n	b7a02 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b79ee:	4620      	mov	r0, r4
   b79f0:	f7ff ffa0 	bl	b7934 <pinAvailable>
   b79f4:	b128      	cbz	r0, b7a02 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b79f6:	4629      	mov	r1, r5
   b79f8:	4620      	mov	r0, r4
}
   b79fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b79fe:	f7fe bb2b 	b.w	b6058 <HAL_GPIO_Write>
}
   b7a02:	bd38      	pop	{r3, r4, r5, pc}

000b7a04 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b7a04:	b510      	push	{r4, lr}
   b7a06:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7a08:	f7fe fb1e 	bl	b6048 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b7a0c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b7a0e:	b2db      	uxtb	r3, r3
   b7a10:	2b01      	cmp	r3, #1
   b7a12:	d908      	bls.n	b7a26 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b7a14:	4620      	mov	r0, r4
   b7a16:	f7ff ff8d 	bl	b7934 <pinAvailable>
   b7a1a:	b120      	cbz	r0, b7a26 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b7a1c:	4620      	mov	r0, r4
}
   b7a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b7a22:	f7fe bb21 	b.w	b6068 <HAL_GPIO_Read>
}
   b7a26:	2000      	movs	r0, #0
   b7a28:	bd10      	pop	{r4, pc}

000b7a2a <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b7a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7a2e:	4690      	mov	r8, r2
   b7a30:	461f      	mov	r7, r3
   b7a32:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b7a34:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b7a36:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b7a38:	f1c4 0107 	rsb	r1, r4, #7
   b7a3c:	f1b8 0f00 	cmp.w	r8, #0
   b7a40:	d112      	bne.n	b7a68 <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b7a42:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b7a46:	f001 0101 	and.w	r1, r1, #1
   b7a4a:	4630      	mov	r0, r6
   b7a4c:	f7ff ffc1 	bl	b79d2 <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b7a50:	2101      	movs	r1, #1
   b7a52:	4628      	mov	r0, r5
   b7a54:	f7ff ffbd 	bl	b79d2 <digitalWrite>
    digitalWrite(clockPin, LOW);
   b7a58:	2100      	movs	r1, #0
   b7a5a:	4628      	mov	r0, r5
   b7a5c:	f7ff ffb9 	bl	b79d2 <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b7a60:	3c01      	subs	r4, #1
   b7a62:	d2e9      	bcs.n	b7a38 <shiftOut+0xe>
  }
}
   b7a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b7a68:	fa47 f104 	asr.w	r1, r7, r4
   b7a6c:	e7eb      	b.n	b7a46 <shiftOut+0x1c>

000b7a6e <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7a6e:	4770      	bx	lr

000b7a70 <_Z17acquireWireBufferv>:
{
   b7a70:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7a72:	4b0a      	ldr	r3, [pc, #40]	; (b7a9c <_Z17acquireWireBufferv+0x2c>)
   b7a74:	6003      	str	r3, [r0, #0]
   b7a76:	2301      	movs	r3, #1
{
   b7a78:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7a7a:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7a7c:	4908      	ldr	r1, [pc, #32]	; (b7aa0 <_Z17acquireWireBufferv+0x30>)
   b7a7e:	2020      	movs	r0, #32
   b7a80:	f000 f874 	bl	b7b6c <_ZnajRKSt9nothrow_t>
	};
   b7a84:	2520      	movs	r5, #32
   b7a86:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7a88:	4905      	ldr	r1, [pc, #20]	; (b7aa0 <_Z17acquireWireBufferv+0x30>)
	};
   b7a8a:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7a8c:	4628      	mov	r0, r5
   b7a8e:	f000 f86d 	bl	b7b6c <_ZnajRKSt9nothrow_t>
	};
   b7a92:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b7a96:	4620      	mov	r0, r4
   b7a98:	bd38      	pop	{r3, r4, r5, pc}
   b7a9a:	bf00      	nop
   b7a9c:	00010018 	.word	0x00010018
   b7aa0:	000b8c14 	.word	0x000b8c14

000b7aa4 <_Z19__fetch_global_Wirev>:
{
   b7aa4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7aa6:	4d0e      	ldr	r5, [pc, #56]	; (b7ae0 <_Z19__fetch_global_Wirev+0x3c>)
   b7aa8:	7829      	ldrb	r1, [r5, #0]
   b7aaa:	f3bf 8f5b 	dmb	ish
   b7aae:	f011 0401 	ands.w	r4, r1, #1
{
   b7ab2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7ab4:	d111      	bne.n	b7ada <_Z19__fetch_global_Wirev+0x36>
   b7ab6:	4628      	mov	r0, r5
   b7ab8:	f7fc fafe 	bl	b40b8 <__cxa_guard_acquire>
   b7abc:	b168      	cbz	r0, b7ada <_Z19__fetch_global_Wirev+0x36>
   b7abe:	4668      	mov	r0, sp
   b7ac0:	f7ff ffd6 	bl	b7a70 <_Z17acquireWireBufferv>
   b7ac4:	466a      	mov	r2, sp
   b7ac6:	4621      	mov	r1, r4
   b7ac8:	4806      	ldr	r0, [pc, #24]	; (b7ae4 <_Z19__fetch_global_Wirev+0x40>)
   b7aca:	f7fe fde3 	bl	b6694 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7ace:	4628      	mov	r0, r5
   b7ad0:	f7fc faf7 	bl	b40c2 <__cxa_guard_release>
   b7ad4:	4804      	ldr	r0, [pc, #16]	; (b7ae8 <_Z19__fetch_global_Wirev+0x44>)
   b7ad6:	f000 f961 	bl	b7d9c <atexit>
	return wire;
}
   b7ada:	4802      	ldr	r0, [pc, #8]	; (b7ae4 <_Z19__fetch_global_Wirev+0x40>)
   b7adc:	b007      	add	sp, #28
   b7ade:	bd30      	pop	{r4, r5, pc}
   b7ae0:	2003e72c 	.word	0x2003e72c
   b7ae4:	2003e730 	.word	0x2003e730
   b7ae8:	000b7a6f 	.word	0x000b7a6f

000b7aec <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7aec:	4770      	bx	lr
	...

000b7af0 <_Z20acquireSerial1Bufferv>:
{
   b7af0:	b538      	push	{r3, r4, r5, lr}
   b7af2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7af4:	2514      	movs	r5, #20
   b7af6:	462a      	mov	r2, r5
   b7af8:	2100      	movs	r1, #0
   b7afa:	f000 f963 	bl	b7dc4 <memset>
   b7afe:	8025      	strh	r5, [r4, #0]
   b7b00:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7b02:	4907      	ldr	r1, [pc, #28]	; (b7b20 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7b04:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7b06:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7b08:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7b0a:	f000 f82f 	bl	b7b6c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7b0e:	4904      	ldr	r1, [pc, #16]	; (b7b20 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7b10:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7b12:	4628      	mov	r0, r5
   b7b14:	f000 f82a 	bl	b7b6c <_ZnajRKSt9nothrow_t>
    };
   b7b18:	60e0      	str	r0, [r4, #12]
}
   b7b1a:	4620      	mov	r0, r4
   b7b1c:	bd38      	pop	{r3, r4, r5, pc}
   b7b1e:	bf00      	nop
   b7b20:	000b8c14 	.word	0x000b8c14

000b7b24 <_Z22__fetch_global_Serial1v>:
{
   b7b24:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7b26:	4d0e      	ldr	r5, [pc, #56]	; (b7b60 <_Z22__fetch_global_Serial1v+0x3c>)
   b7b28:	7829      	ldrb	r1, [r5, #0]
   b7b2a:	f3bf 8f5b 	dmb	ish
   b7b2e:	f011 0401 	ands.w	r4, r1, #1
{
   b7b32:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7b34:	d111      	bne.n	b7b5a <_Z22__fetch_global_Serial1v+0x36>
   b7b36:	4628      	mov	r0, r5
   b7b38:	f7fc fabe 	bl	b40b8 <__cxa_guard_acquire>
   b7b3c:	b168      	cbz	r0, b7b5a <_Z22__fetch_global_Serial1v+0x36>
   b7b3e:	a801      	add	r0, sp, #4
   b7b40:	f7ff ffd6 	bl	b7af0 <_Z20acquireSerial1Bufferv>
   b7b44:	aa01      	add	r2, sp, #4
   b7b46:	4621      	mov	r1, r4
   b7b48:	4806      	ldr	r0, [pc, #24]	; (b7b64 <_Z22__fetch_global_Serial1v+0x40>)
   b7b4a:	f7ff fd35 	bl	b75b8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7b4e:	4628      	mov	r0, r5
   b7b50:	f7fc fab7 	bl	b40c2 <__cxa_guard_release>
   b7b54:	4804      	ldr	r0, [pc, #16]	; (b7b68 <_Z22__fetch_global_Serial1v+0x44>)
   b7b56:	f000 f921 	bl	b7d9c <atexit>
    return serial1;
}
   b7b5a:	4802      	ldr	r0, [pc, #8]	; (b7b64 <_Z22__fetch_global_Serial1v+0x40>)
   b7b5c:	b007      	add	sp, #28
   b7b5e:	bd30      	pop	{r4, r5, pc}
   b7b60:	2003e744 	.word	0x2003e744
   b7b64:	2003e748 	.word	0x2003e748
   b7b68:	000b7aed 	.word	0x000b7aed

000b7b6c <_ZnajRKSt9nothrow_t>:
   b7b6c:	f7fc ba93 	b.w	b4096 <_Znaj>

000b7b70 <_ZSt25__throw_bad_function_callv>:
   b7b70:	b508      	push	{r3, lr}
   b7b72:	f7fe fce5 	bl	b6540 <abort>
	...

000b7b78 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b7b78:	4901      	ldr	r1, [pc, #4]	; (b7b80 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b7b7a:	f000 b8f9 	b.w	b7d70 <_ZNKSt9type_infoeqERKS_>
   b7b7e:	bf00      	nop
   b7b80:	000b8c30 	.word	0x000b8c30

000b7b84 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b7b84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b7b86:	2400      	movs	r4, #0
   b7b88:	2310      	movs	r3, #16
   b7b8a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b7b8e:	6803      	ldr	r3, [r0, #0]
   b7b90:	4615      	mov	r5, r2
   b7b92:	699e      	ldr	r6, [r3, #24]
   b7b94:	6812      	ldr	r2, [r2, #0]
   b7b96:	466b      	mov	r3, sp
   b7b98:	e9cd 4400 	strd	r4, r4, [sp]
   b7b9c:	47b0      	blx	r6
   b7b9e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7ba2:	f003 0306 	and.w	r3, r3, #6
   b7ba6:	2b06      	cmp	r3, #6
   b7ba8:	bf03      	ittte	eq
   b7baa:	9b00      	ldreq	r3, [sp, #0]
   b7bac:	602b      	streq	r3, [r5, #0]
   b7bae:	2001      	moveq	r0, #1
   b7bb0:	4620      	movne	r0, r4
   b7bb2:	b004      	add	sp, #16
   b7bb4:	bd70      	pop	{r4, r5, r6, pc}

000b7bb6 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b7bb6:	9800      	ldr	r0, [sp, #0]
   b7bb8:	4290      	cmp	r0, r2
   b7bba:	bf14      	ite	ne
   b7bbc:	2001      	movne	r0, #1
   b7bbe:	2006      	moveq	r0, #6
   b7bc0:	4770      	bx	lr
	...

000b7bc4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b7bc4:	b510      	push	{r4, lr}
   b7bc6:	4b03      	ldr	r3, [pc, #12]	; (b7bd4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7bc8:	6003      	str	r3, [r0, #0]
   b7bca:	4604      	mov	r4, r0
   b7bcc:	f000 f8cd 	bl	b7d6a <_ZNSt9type_infoD1Ev>
   b7bd0:	4620      	mov	r0, r4
   b7bd2:	bd10      	pop	{r4, pc}
   b7bd4:	000b8c70 	.word	0x000b8c70

000b7bd8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b7bd8:	b510      	push	{r4, lr}
   b7bda:	4604      	mov	r4, r0
   b7bdc:	f7ff fff2 	bl	b7bc4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7be0:	4620      	mov	r0, r4
   b7be2:	2108      	movs	r1, #8
   b7be4:	f7fc fa59 	bl	b409a <_ZdlPvj>
   b7be8:	4620      	mov	r0, r4
   b7bea:	bd10      	pop	{r4, pc}

000b7bec <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b7bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7bf0:	461f      	mov	r7, r3
   b7bf2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b7bf6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b7bfa:	4598      	cmp	r8, r3
   b7bfc:	4606      	mov	r6, r0
   b7bfe:	4615      	mov	r5, r2
   b7c00:	d107      	bne.n	b7c12 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7c02:	9907      	ldr	r1, [sp, #28]
   b7c04:	f000 f8b4 	bl	b7d70 <_ZNKSt9type_infoeqERKS_>
   b7c08:	b118      	cbz	r0, b7c12 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7c0a:	7165      	strb	r5, [r4, #5]
   b7c0c:	2000      	movs	r0, #0
   b7c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7c12:	4639      	mov	r1, r7
   b7c14:	4630      	mov	r0, r6
   b7c16:	f000 f8ab 	bl	b7d70 <_ZNKSt9type_infoeqERKS_>
   b7c1a:	2800      	cmp	r0, #0
   b7c1c:	d0f6      	beq.n	b7c0c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b7c1e:	2301      	movs	r3, #1
   b7c20:	f8c4 8000 	str.w	r8, [r4]
   b7c24:	7125      	strb	r5, [r4, #4]
   b7c26:	71a3      	strb	r3, [r4, #6]
   b7c28:	e7f0      	b.n	b7c0c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b7c2a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b7c2a:	b538      	push	{r3, r4, r5, lr}
   b7c2c:	4615      	mov	r5, r2
   b7c2e:	461c      	mov	r4, r3
   b7c30:	f000 f89e 	bl	b7d70 <_ZNKSt9type_infoeqERKS_>
   b7c34:	b120      	cbz	r0, b7c40 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b7c36:	2308      	movs	r3, #8
   b7c38:	60e3      	str	r3, [r4, #12]
   b7c3a:	2306      	movs	r3, #6
   b7c3c:	6025      	str	r5, [r4, #0]
   b7c3e:	7123      	strb	r3, [r4, #4]
   b7c40:	bd38      	pop	{r3, r4, r5, pc}

000b7c42 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b7c42:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7c44:	4605      	mov	r5, r0
   b7c46:	460c      	mov	r4, r1
   b7c48:	9201      	str	r2, [sp, #4]
   b7c4a:	461e      	mov	r6, r3
   b7c4c:	f000 f890 	bl	b7d70 <_ZNKSt9type_infoeqERKS_>
   b7c50:	b950      	cbnz	r0, b7c68 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7c52:	2e03      	cmp	r6, #3
   b7c54:	d808      	bhi.n	b7c68 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7c56:	6823      	ldr	r3, [r4, #0]
   b7c58:	9a01      	ldr	r2, [sp, #4]
   b7c5a:	695b      	ldr	r3, [r3, #20]
   b7c5c:	4629      	mov	r1, r5
   b7c5e:	4620      	mov	r0, r4
   b7c60:	b002      	add	sp, #8
   b7c62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7c66:	4718      	bx	r3
   b7c68:	b002      	add	sp, #8
   b7c6a:	bd70      	pop	{r4, r5, r6, pc}

000b7c6c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b7c6c:	b510      	push	{r4, lr}
   b7c6e:	4b03      	ldr	r3, [pc, #12]	; (b7c7c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b7c70:	6003      	str	r3, [r0, #0]
   b7c72:	4604      	mov	r4, r0
   b7c74:	f7ff ffa6 	bl	b7bc4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7c78:	4620      	mov	r0, r4
   b7c7a:	bd10      	pop	{r4, pc}
   b7c7c:	000b8cd0 	.word	0x000b8cd0

000b7c80 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b7c80:	b510      	push	{r4, lr}
   b7c82:	4604      	mov	r4, r0
   b7c84:	f7ff fff2 	bl	b7c6c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7c88:	4620      	mov	r0, r4
   b7c8a:	210c      	movs	r1, #12
   b7c8c:	f7fc fa05 	bl	b409a <_ZdlPvj>
   b7c90:	4620      	mov	r0, r4
   b7c92:	bd10      	pop	{r4, pc}

000b7c94 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7c94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7c96:	9f08      	ldr	r7, [sp, #32]
   b7c98:	4297      	cmp	r7, r2
   b7c9a:	4605      	mov	r5, r0
   b7c9c:	460e      	mov	r6, r1
   b7c9e:	4614      	mov	r4, r2
   b7ca0:	d00a      	beq.n	b7cb8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b7ca2:	68a8      	ldr	r0, [r5, #8]
   b7ca4:	6802      	ldr	r2, [r0, #0]
   b7ca6:	9708      	str	r7, [sp, #32]
   b7ca8:	6a15      	ldr	r5, [r2, #32]
   b7caa:	4631      	mov	r1, r6
   b7cac:	4622      	mov	r2, r4
   b7cae:	46ac      	mov	ip, r5
   b7cb0:	b003      	add	sp, #12
   b7cb2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7cb6:	4760      	bx	ip
   b7cb8:	4619      	mov	r1, r3
   b7cba:	9301      	str	r3, [sp, #4]
   b7cbc:	f000 f858 	bl	b7d70 <_ZNKSt9type_infoeqERKS_>
   b7cc0:	9b01      	ldr	r3, [sp, #4]
   b7cc2:	2800      	cmp	r0, #0
   b7cc4:	d0ed      	beq.n	b7ca2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b7cc6:	2006      	movs	r0, #6
   b7cc8:	b003      	add	sp, #12
   b7cca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7ccc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7ccc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7cd0:	460d      	mov	r5, r1
   b7cd2:	4619      	mov	r1, r3
   b7cd4:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7cd8:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b7cdc:	4681      	mov	r9, r0
   b7cde:	4617      	mov	r7, r2
   b7ce0:	4698      	mov	r8, r3
   b7ce2:	f000 f845 	bl	b7d70 <_ZNKSt9type_infoeqERKS_>
   b7ce6:	b190      	cbz	r0, b7d0e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b7ce8:	2d00      	cmp	r5, #0
   b7cea:	6034      	str	r4, [r6, #0]
   b7cec:	7137      	strb	r7, [r6, #4]
   b7cee:	db09      	blt.n	b7d04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b7cf0:	1961      	adds	r1, r4, r5
   b7cf2:	458a      	cmp	sl, r1
   b7cf4:	bf0c      	ite	eq
   b7cf6:	2106      	moveq	r1, #6
   b7cf8:	2101      	movne	r1, #1
   b7cfa:	71b1      	strb	r1, [r6, #6]
   b7cfc:	2000      	movs	r0, #0
   b7cfe:	b001      	add	sp, #4
   b7d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7d04:	3502      	adds	r5, #2
   b7d06:	d1f9      	bne.n	b7cfc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7d08:	2301      	movs	r3, #1
   b7d0a:	71b3      	strb	r3, [r6, #6]
   b7d0c:	e7f6      	b.n	b7cfc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7d0e:	4554      	cmp	r4, sl
   b7d10:	d106      	bne.n	b7d20 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7d12:	4659      	mov	r1, fp
   b7d14:	4648      	mov	r0, r9
   b7d16:	f000 f82b 	bl	b7d70 <_ZNKSt9type_infoeqERKS_>
   b7d1a:	b108      	cbz	r0, b7d20 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7d1c:	7177      	strb	r7, [r6, #5]
   b7d1e:	e7ed      	b.n	b7cfc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7d20:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7d24:	6803      	ldr	r3, [r0, #0]
   b7d26:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b7d2a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b7d2e:	69dc      	ldr	r4, [r3, #28]
   b7d30:	463a      	mov	r2, r7
   b7d32:	4643      	mov	r3, r8
   b7d34:	4629      	mov	r1, r5
   b7d36:	46a4      	mov	ip, r4
   b7d38:	b001      	add	sp, #4
   b7d3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7d3e:	4760      	bx	ip

000b7d40 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b7d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7d44:	4607      	mov	r7, r0
   b7d46:	460c      	mov	r4, r1
   b7d48:	4615      	mov	r5, r2
   b7d4a:	461e      	mov	r6, r3
   b7d4c:	f7ff ff6d 	bl	b7c2a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b7d50:	b948      	cbnz	r0, b7d66 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b7d52:	68b8      	ldr	r0, [r7, #8]
   b7d54:	6803      	ldr	r3, [r0, #0]
   b7d56:	699f      	ldr	r7, [r3, #24]
   b7d58:	462a      	mov	r2, r5
   b7d5a:	4633      	mov	r3, r6
   b7d5c:	4621      	mov	r1, r4
   b7d5e:	46bc      	mov	ip, r7
   b7d60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7d64:	4760      	bx	ip
   b7d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7d6a <_ZNSt9type_infoD1Ev>:
   b7d6a:	4770      	bx	lr

000b7d6c <_ZNKSt9type_info14__is_pointer_pEv>:
   b7d6c:	2000      	movs	r0, #0
   b7d6e:	4770      	bx	lr

000b7d70 <_ZNKSt9type_infoeqERKS_>:
   b7d70:	4281      	cmp	r1, r0
   b7d72:	b508      	push	{r3, lr}
   b7d74:	d00e      	beq.n	b7d94 <_ZNKSt9type_infoeqERKS_+0x24>
   b7d76:	6840      	ldr	r0, [r0, #4]
   b7d78:	7803      	ldrb	r3, [r0, #0]
   b7d7a:	2b2a      	cmp	r3, #42	; 0x2a
   b7d7c:	d00c      	beq.n	b7d98 <_ZNKSt9type_infoeqERKS_+0x28>
   b7d7e:	6849      	ldr	r1, [r1, #4]
   b7d80:	780b      	ldrb	r3, [r1, #0]
   b7d82:	2b2a      	cmp	r3, #42	; 0x2a
   b7d84:	bf08      	it	eq
   b7d86:	3101      	addeq	r1, #1
   b7d88:	f000 f852 	bl	b7e30 <strcmp>
   b7d8c:	fab0 f080 	clz	r0, r0
   b7d90:	0940      	lsrs	r0, r0, #5
   b7d92:	bd08      	pop	{r3, pc}
   b7d94:	2001      	movs	r0, #1
   b7d96:	e7fc      	b.n	b7d92 <_ZNKSt9type_infoeqERKS_+0x22>
   b7d98:	2000      	movs	r0, #0
   b7d9a:	e7fa      	b.n	b7d92 <_ZNKSt9type_infoeqERKS_+0x22>

000b7d9c <atexit>:
   b7d9c:	2300      	movs	r3, #0
   b7d9e:	4601      	mov	r1, r0
   b7da0:	461a      	mov	r2, r3
   b7da2:	4618      	mov	r0, r3
   b7da4:	f000 b85e 	b.w	b7e64 <__register_exitproc>

000b7da8 <memcpy>:
   b7da8:	440a      	add	r2, r1
   b7daa:	4291      	cmp	r1, r2
   b7dac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b7db0:	d100      	bne.n	b7db4 <memcpy+0xc>
   b7db2:	4770      	bx	lr
   b7db4:	b510      	push	{r4, lr}
   b7db6:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7dba:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7dbe:	4291      	cmp	r1, r2
   b7dc0:	d1f9      	bne.n	b7db6 <memcpy+0xe>
   b7dc2:	bd10      	pop	{r4, pc}

000b7dc4 <memset>:
   b7dc4:	4402      	add	r2, r0
   b7dc6:	4603      	mov	r3, r0
   b7dc8:	4293      	cmp	r3, r2
   b7dca:	d100      	bne.n	b7dce <memset+0xa>
   b7dcc:	4770      	bx	lr
   b7dce:	f803 1b01 	strb.w	r1, [r3], #1
   b7dd2:	e7f9      	b.n	b7dc8 <memset+0x4>

000b7dd4 <srand>:
   b7dd4:	b538      	push	{r3, r4, r5, lr}
   b7dd6:	4b10      	ldr	r3, [pc, #64]	; (b7e18 <srand+0x44>)
   b7dd8:	681d      	ldr	r5, [r3, #0]
   b7dda:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7ddc:	4604      	mov	r4, r0
   b7dde:	b9b3      	cbnz	r3, b7e0e <srand+0x3a>
   b7de0:	2018      	movs	r0, #24
   b7de2:	f7fe fb8d 	bl	b6500 <malloc>
   b7de6:	4602      	mov	r2, r0
   b7de8:	63a8      	str	r0, [r5, #56]	; 0x38
   b7dea:	b920      	cbnz	r0, b7df6 <srand+0x22>
   b7dec:	4b0b      	ldr	r3, [pc, #44]	; (b7e1c <srand+0x48>)
   b7dee:	480c      	ldr	r0, [pc, #48]	; (b7e20 <srand+0x4c>)
   b7df0:	2142      	movs	r1, #66	; 0x42
   b7df2:	f7fe fbb5 	bl	b6560 <__assert_func>
   b7df6:	490b      	ldr	r1, [pc, #44]	; (b7e24 <srand+0x50>)
   b7df8:	4b0b      	ldr	r3, [pc, #44]	; (b7e28 <srand+0x54>)
   b7dfa:	e9c0 1300 	strd	r1, r3, [r0]
   b7dfe:	4b0b      	ldr	r3, [pc, #44]	; (b7e2c <srand+0x58>)
   b7e00:	6083      	str	r3, [r0, #8]
   b7e02:	230b      	movs	r3, #11
   b7e04:	8183      	strh	r3, [r0, #12]
   b7e06:	2100      	movs	r1, #0
   b7e08:	2001      	movs	r0, #1
   b7e0a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7e0e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7e10:	2200      	movs	r2, #0
   b7e12:	611c      	str	r4, [r3, #16]
   b7e14:	615a      	str	r2, [r3, #20]
   b7e16:	bd38      	pop	{r3, r4, r5, pc}
   b7e18:	2003e488 	.word	0x2003e488
   b7e1c:	000b8d09 	.word	0x000b8d09
   b7e20:	000b8d20 	.word	0x000b8d20
   b7e24:	abcd330e 	.word	0xabcd330e
   b7e28:	e66d1234 	.word	0xe66d1234
   b7e2c:	0005deec 	.word	0x0005deec

000b7e30 <strcmp>:
   b7e30:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7e34:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7e38:	2a01      	cmp	r2, #1
   b7e3a:	bf28      	it	cs
   b7e3c:	429a      	cmpcs	r2, r3
   b7e3e:	d0f7      	beq.n	b7e30 <strcmp>
   b7e40:	1ad0      	subs	r0, r2, r3
   b7e42:	4770      	bx	lr

000b7e44 <strcpy>:
   b7e44:	4603      	mov	r3, r0
   b7e46:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7e4a:	f803 2b01 	strb.w	r2, [r3], #1
   b7e4e:	2a00      	cmp	r2, #0
   b7e50:	d1f9      	bne.n	b7e46 <strcpy+0x2>
   b7e52:	4770      	bx	lr

000b7e54 <strlen>:
   b7e54:	4603      	mov	r3, r0
   b7e56:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7e5a:	2a00      	cmp	r2, #0
   b7e5c:	d1fb      	bne.n	b7e56 <strlen+0x2>
   b7e5e:	1a18      	subs	r0, r3, r0
   b7e60:	3801      	subs	r0, #1
   b7e62:	4770      	bx	lr

000b7e64 <__register_exitproc>:
   b7e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7e68:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7f24 <__register_exitproc+0xc0>
   b7e6c:	4606      	mov	r6, r0
   b7e6e:	f8d8 0000 	ldr.w	r0, [r8]
   b7e72:	461f      	mov	r7, r3
   b7e74:	460d      	mov	r5, r1
   b7e76:	4691      	mov	r9, r2
   b7e78:	f000 f856 	bl	b7f28 <__retarget_lock_acquire_recursive>
   b7e7c:	4b25      	ldr	r3, [pc, #148]	; (b7f14 <__register_exitproc+0xb0>)
   b7e7e:	681c      	ldr	r4, [r3, #0]
   b7e80:	b934      	cbnz	r4, b7e90 <__register_exitproc+0x2c>
   b7e82:	4c25      	ldr	r4, [pc, #148]	; (b7f18 <__register_exitproc+0xb4>)
   b7e84:	601c      	str	r4, [r3, #0]
   b7e86:	4b25      	ldr	r3, [pc, #148]	; (b7f1c <__register_exitproc+0xb8>)
   b7e88:	b113      	cbz	r3, b7e90 <__register_exitproc+0x2c>
   b7e8a:	681b      	ldr	r3, [r3, #0]
   b7e8c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7e90:	6863      	ldr	r3, [r4, #4]
   b7e92:	2b1f      	cmp	r3, #31
   b7e94:	dd07      	ble.n	b7ea6 <__register_exitproc+0x42>
   b7e96:	f8d8 0000 	ldr.w	r0, [r8]
   b7e9a:	f000 f847 	bl	b7f2c <__retarget_lock_release_recursive>
   b7e9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7ea6:	b34e      	cbz	r6, b7efc <__register_exitproc+0x98>
   b7ea8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7eac:	b988      	cbnz	r0, b7ed2 <__register_exitproc+0x6e>
   b7eae:	4b1c      	ldr	r3, [pc, #112]	; (b7f20 <__register_exitproc+0xbc>)
   b7eb0:	b923      	cbnz	r3, b7ebc <__register_exitproc+0x58>
   b7eb2:	f8d8 0000 	ldr.w	r0, [r8]
   b7eb6:	f000 f838 	bl	b7f2a <__retarget_lock_release>
   b7eba:	e7f0      	b.n	b7e9e <__register_exitproc+0x3a>
   b7ebc:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7ec0:	f7fe fb1e 	bl	b6500 <malloc>
   b7ec4:	2800      	cmp	r0, #0
   b7ec6:	d0f4      	beq.n	b7eb2 <__register_exitproc+0x4e>
   b7ec8:	2300      	movs	r3, #0
   b7eca:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7ece:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7ed2:	6863      	ldr	r3, [r4, #4]
   b7ed4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7ed8:	2201      	movs	r2, #1
   b7eda:	409a      	lsls	r2, r3
   b7edc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7ee0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7ee4:	4313      	orrs	r3, r2
   b7ee6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7eea:	2e02      	cmp	r6, #2
   b7eec:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7ef0:	bf02      	ittt	eq
   b7ef2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7ef6:	4313      	orreq	r3, r2
   b7ef8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7efc:	6863      	ldr	r3, [r4, #4]
   b7efe:	f8d8 0000 	ldr.w	r0, [r8]
   b7f02:	1c5a      	adds	r2, r3, #1
   b7f04:	3302      	adds	r3, #2
   b7f06:	6062      	str	r2, [r4, #4]
   b7f08:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7f0c:	f000 f80e 	bl	b7f2c <__retarget_lock_release_recursive>
   b7f10:	2000      	movs	r0, #0
   b7f12:	e7c6      	b.n	b7ea2 <__register_exitproc+0x3e>
   b7f14:	2003e7e8 	.word	0x2003e7e8
   b7f18:	2003e75c 	.word	0x2003e75c
   b7f1c:	00000000 	.word	0x00000000
   b7f20:	000b6501 	.word	0x000b6501
   b7f24:	2003e4ec 	.word	0x2003e4ec

000b7f28 <__retarget_lock_acquire_recursive>:
   b7f28:	4770      	bx	lr

000b7f2a <__retarget_lock_release>:
   b7f2a:	4770      	bx	lr

000b7f2c <__retarget_lock_release_recursive>:
   b7f2c:	4770      	bx	lr

000b7f2e <link_code_end>:
	...

000b7f30 <dynalib_user>:
   b7f30:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b7f40:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b7f50:	7620 7269 7574 6c61 4100 7373 7265 6974      virtual.Asserti
   b7f60:	6e6f 6146 6c69 7275 2065 702a 705f 6e69     onFailure *p_pin
   b7f70:	3c20 2820 3233 2b20 3120 2936 4e00 206f      < (32 + 16).No 
   b7f80:	6843 6e61 6567 2d20 4320 6e61 6563 6c6c     Change - Cancell
   b7f90:	6e69 2067 4d43 0a44 7b00 6f22 226e 743a     ing CMD..{"on":t
   b7fa0:	7572 2c65 7322 7461 3a22 2c00 6222 6972     rue,"sat":.,"bri
   b7fb0:	3a22 2c00 6822 6575 3a22 7b00 6f22 226e     ":.,"hue":.{"on"
   b7fc0:	663a 6c61 6573 007d 6553 646e 6e69 2067     :false}.Sending 
   b7fd0:	6f43 6d6d 6e61 2064 6f74 4820 6575 5000     Command to Hue.P
   b7fe0:	5455 2f20 7061 2f69 2f00 696c 6867 7374     UT /api/./lights
   b7ff0:	002f 732f 6174 6574 4820 5454 2f50 2e31     /./state HTTP/1.
   b8000:	0031 6f48 7473 203a 4300 6e6f 6574 746e     1.Host: .Content
   b8010:	4c2d 6e65 7467 3a68 0020 6f43 746e 6e65     -Length: .Conten
   b8020:	2d74 7954 6570 203a 6574 7478 702f 616c     t-Type: text/pla
   b8030:	6e69 633b 6168 7372 7465 553d 4654 382d     in;charset=UTF-8
   b8040:	4600 6f72 206d 7548 0065 7753 7469 6863     .From Hue.Switch
   b8050:	4e4f 2520 2069 000a 3f3c 6d78 206c 6576     ON %i ..<?xml ve
   b8060:	7372 6f69 3d6e 3122 302e 2022 6e65 6f63     rsion="1.0" enco
   b8070:	6964 676e 223d 7475 2d66 2238 3e3f 733c     ding="utf-8"?><s
   b8080:	453a 766e 6c65 706f 2065 6d78 6e6c 3a73     :Envelope xmlns:
   b8090:	3d73 6822 7474 3a70 2f2f 6373 6568 616d     s="http://schema
   b80a0:	2e73 6d78 736c 616f 2e70 726f 2f67 6f73     s.xmlsoap.org/so
   b80b0:	7061 652f 766e 6c65 706f 2f65 2022 3a73     ap/envelope/" s:
   b80c0:	6e65 6f63 6964 676e 7453 6c79 3d65 6822     encodingStyle="h
   b80d0:	7474 3a70 2f2f 6373 6568 616d 2e73 6d78     ttp://schemas.xm
   b80e0:	736c 616f 2e70 726f 2f67 6f73 7061 652f     lsoap.org/soap/e
   b80f0:	636e 646f 6e69 2f67 3e22 733c 423a 646f     ncoding/"><s:Bod
   b8100:	3e79 753c 533a 7465 6942 616e 7972 7453     y><u:SetBinarySt
   b8110:	7461 2065 6d78 6e6c 3a73 3d75 7522 6e72     ate xmlns:u="urn
   b8120:	423a 6c65 696b 3a6e 6573 7672 6369 3a65     :Belkin:service:
   b8130:	6162 6973 6563 6576 746e 313a 3e22 423c     basicevent:1"><B
   b8140:	6e69 7261 5379 6174 6574 313e 2f3c 6942     inaryState>1</Bi
   b8150:	616e 7972 7453 7461 3e65 2f3c 3a75 6553     naryState></u:Se
   b8160:	4274 6e69 7261 5379 6174 6574 3c3e 732f     tBinaryState></s
   b8170:	423a 646f 3e79 2f3c 3a73 6e45 6576 6f6c     :Body></s:Envelo
   b8180:	6570 003e 4f50 5453 2f20 7075 706e 632f     pe>.POST /upnp/c
   b8190:	6e6f 7274 6c6f 622f 7361 6369 7665 6e65     ontrol/basiceven
   b81a0:	3174 4820 5454 2f50 2e31 0031 6f43 746e     t1 HTTP/1.1.Cont
   b81b0:	6e65 2d74 7954 6570 203a 6574 7478 782f     ent-Type: text/x
   b81c0:	6c6d 203b 6863 7261 6573 3d74 7475 2d66     ml; charset=utf-
   b81d0:	0038 4f53 5041 4341 4954 4e4f 203a 7522     8.SOAPACTION: "u
   b81e0:	6e72 423a 6c65 696b 3a6e 6573 7672 6369     rn:Belkin:servic
   b81f0:	3a65 6162 6973 6563 6576 746e 313a 5323     e:basicevent:1#S
   b8200:	7465 6942 616e 7972 7453 7461 2265 4300     etBinaryState".C
   b8210:	6e6f 656e 7463 6f69 3a6e 6b20 6565 2d70     onnection: keep-
   b8220:	6c61 7669 0065 7773 7469 6863 464f 2046     alive.switchOFF 
   b8230:	6925 0a20 3c00 783f 6c6d 7620 7265 6973     %i ..<?xml versi
   b8240:	6e6f 223d 2e31 2230 6520 636e 646f 6e69     on="1.0" encodin
   b8250:	3d67 7522 6674 382d 3f22 3c3e 3a73 6e45     g="utf-8"?><s:En
   b8260:	6576 6f6c 6570 7820 6c6d 736e 733a 223d     velope xmlns:s="
   b8270:	7468 7074 2f3a 732f 6863 6d65 7361 782e     http://schemas.x
   b8280:	6c6d 6f73 7061 6f2e 6772 732f 616f 2f70     mlsoap.org/soap/
   b8290:	6e65 6576 6f6c 6570 222f 7320 653a 636e     envelope/" s:enc
   b82a0:	646f 6e69 5367 7974 656c 223d 7468 7074     odingStyle="http
   b82b0:	2f3a 732f 6863 6d65 7361 782e 6c6d 6f73     ://schemas.xmlso
   b82c0:	7061 6f2e 6772 732f 616f 2f70 6e65 6f63     ap.org/soap/enco
   b82d0:	6964 676e 222f 3c3e 3a73 6f42 7964 3c3e     ding/"><s:Body><
   b82e0:	3a75 6553 4274 6e69 7261 5379 6174 6574     u:SetBinaryState
   b82f0:	7820 6c6d 736e 753a 223d 7275 3a6e 6542      xmlns:u="urn:Be
   b8300:	6b6c 6e69 733a 7265 6976 6563 623a 7361     lkin:service:bas
   b8310:	6369 7665 6e65 3a74 2231 3c3e 6942 616e     icevent:1"><Bina
   b8320:	7972 7453 7461 3e65 3c30 422f 6e69 7261     ryState>0</Binar
   b8330:	5379 6174 6574 3c3e 752f 533a 7465 6942     yState></u:SetBi
   b8340:	616e 7972 7453 7461 3e65 2f3c 3a73 6f42     naryState></s:Bo
   b8350:	7964 3c3e 732f 453a 766e 6c65 706f 3e65     dy></s:Envelope>
   b8360:	4900 546f 654e 7774 726f 006b 002c 2069     .IoTNetwork.,.i 
   b8370:	6d61 7420 7972 6e69 0a67 6f74 6720 7465     am trying.to get
   b8380:	6920 0a74 6f74 6567 6874 7265 0a00 000a      it.together....
   b8390:	4548 4c4c 0a4f 4f4c 4556 6200 7475 6f74     HELLO.LOVE.butto
   b83a0:	206e 2034 7369 7020 6572 7373 6465 000d     n 4 is pressed..
   b83b0:	4f44 5920 554f 4c0a 564f 2045 454d 003f     DO YOU.LOVE ME?.
   b83c0:	4857 5441 4420 204f 0a55 454e 4445 333c     WHAT DO U.NEED<3
   b83d0:	4200 7475 6f74 736e 6120 6572 6320 696c     .Buttons are cli
   b83e0:	6b63 4445 000d 4853 5455 4520 2052 4f44     ckED..SHUT ER DO
   b83f0:	4e57 000a 6573 7474 6e69 2067 6f63 6f6c     WN..setting colo
   b8400:	2072 666f 6220 6c75 2062 6925 7420 206f     r of bulb %i to 
   b8410:	6f63 6f6c 2072 3025 6936 000a 3931 2e32     color %06i..192.
   b8420:	3631 2e38 2e31 3033 3100 3239 312e 3836     168.1.30.192.168
   b8430:	312e 332e 0031 3931 2e32 3631 2e38 2e31     .1.31.192.168.1.
   b8440:	3233 3100 3239 312e 3836 312e 332e 0033     32.192.168.1.33.
   b8450:	3931 2e32 3631 2e38 2e31 3433                192.168.1.34.

000b845d <_ZL11hueUsername>:
   b845d:	514d 5a6c 697a 4f52 5730 6961 4d35 4d73     MQlZziRO0Wai5MsM
   b846d:	6c48 386c 4178 4155 7151 3877 5135 7272     Hll8xAUAQqw85Qrr
   b847d:	7438 334d 4637 5433                          8tM37F3T.

000b8486 <_ZL8hueHubIP>:
   b8486:	3931 2e32 3631 2e38 2e31 0035               192.168.1.5.

000b8492 <_ZL4font>:
   b8492:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b84a2:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b84b2:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b84c2:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b84d2:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b84e2:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b84f2:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b8502:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b8512:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b8522:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b8532:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b8542:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b8552:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b8562:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b8572:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b8582:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b8592:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b85a2:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b85b2:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b85c2:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b85d2:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b85e2:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b85f2:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b8602:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b8612:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b8622:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b8632:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b8642:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b8652:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b8662:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b8672:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b8682:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b8692:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b86a2:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b86b2:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b86c2:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b86d2:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b86e2:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b86f2:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b8702:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b8712:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b8722:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   b8732:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b8742:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b8752:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   b8762:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b8772:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   b8782:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   b8792:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   b87a2:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b87b2:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b87c2:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b87d2:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b87e2:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b87f2:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b8802:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   b8812:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   b8822:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   b8832:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   b8842:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   b8852:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   b8862:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   b8872:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   b8882:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   b8892:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   b88a2:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   b88b2:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   b88c2:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   b88d2:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   b88e2:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   b88f2:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   b8902:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   b8912:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   b8922:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   b8932:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   b8942:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   b8952:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   b8962:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   b8972:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   b8982:	0012 3c3c 3c3c 0000 0000 0000 0000          ..<<<<........

000b8990 <_ZTV12Adafruit_GFX>:
	...
   b89a0:	5335 000b 6a51 000b 40a1 000b 4ed5 000b     5S..Qj...@...N..
   b89b0:	4ffb 000b 5017 000b 4f93 000b 5031 000b     .O...P...O..1P..
   b89c0:	5067 000b 5083 000b                         gP...P..

000b89c8 <_ZTV16Adafruit_SSD1306>:
	...
   b89d0:	56c1 000b 5751 000b 5335 000b 6a51 000b     .V..QW..5S..Qj..
   b89e0:	56c5 000b 4ed5 000b 554d 000b 53dd 000b     .V...N..MU...S..
   b89f0:	4f93 000b 5031 000b 5067 000b 5083 000b     .O..1P..gP...P..

000b8a00 <CSWTCH.88>:
   b8a00:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   b8a10:	0050 0000                                   P...

000b8a14 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b8a1c <_ZTVN5spark13EthernetClassE>:
	...
   b8a24:	661f 000b 6615 000b 660b 000b 6601 000b     .f...f...f...f..
   b8a34:	65f5 000b 65e9 000b 692d 000b 6935 000b     .e...e..-i..5i..
   b8a44:	65dd 000b 65d5 000b 65cb 000b 65c1 000b     .e...e...e...e..
   b8a54:	6965 000b                                   ei..

000b8a58 <_ZTV7TwoWire>:
	...
   b8a60:	663d 000b 6687 000b 665f 000b 663f 000b     =f...f.._f..?f..
   b8a70:	6667 000b 666f 000b 6677 000b 667f 000b     gf..of..wf...f..

000b8a80 <_ZTV9IPAddress>:
	...
   b8a88:	67d1 000b 67c1 000b 67c3 000b 7061 0070     .g...g...g..app.

000b8a98 <_ZTVN5spark12NetworkClassE>:
	...
   b8aa0:	68ed 000b 68f7 000b 6901 000b 690b 000b     .h...h...i...i..
   b8ab0:	6915 000b 6921 000b 692d 000b 6935 000b     .i..!i..-i..5i..
   b8ac0:	693d 000b 6949 000b 6951 000b 695b 000b     =i..Ii..Qi..[i..
   b8ad0:	6965 000b                                   ei..

000b8ad4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b8ad4:	0800 1810 2820 3830 6977 6972 676e 7200     .... (08wiring.r
   b8ae4:	6365 2076 7265 6f72 2072 203d 6425 0000     ecv error = %d..

000b8af4 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8afc:	6fe9 000b 700d 000b 74f7 000b 701b 000b     .o...p...t...p..
   b8b0c:	6fed 000b                                   .o..

000b8b10 <_ZTV9TCPClient>:
	...
   b8b18:	4349 000b 437d 000b 6f65 000b 6f7f 000b     IC..}C..eo...o..
   b8b28:	738d 000b 6fa9 000b 7203 000b 6fdd 000b     .s...o...r...o..
   b8b38:	7295 000b 70d5 000b 7231 000b 7441 000b     .r...p..1r..At..
   b8b48:	71d1 000b 6fdf 000b 6f91 000b 7021 000b     .q...o...o..!p..
   b8b58:	70b5 000b 5925 252d 2d6d 6425 2554 3a48     .p..%Y-%m-%dT%H:
   b8b68:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b8b78 <_ZTV11USARTSerial>:
	...
   b8b80:	753f 000b 75ab 000b 7583 000b 6a51 000b     ?u...u...u..Qj..
   b8b90:	7553 000b 756f 000b 7561 000b 757d 000b     Su..ou..au..}u..
   b8ba0:	7541 000b 7545 000b                         Au..Eu..

000b8ba8 <_ZTV9USBSerial>:
	...
   b8bb0:	75e7 000b 764f 000b 7625 000b 6a51 000b     .u..Ov..%v..Qj..
   b8bc0:	7617 000b 75e9 000b 75f9 000b 7649 000b     .v...u...u..Iv..
   b8bd0:	7609 000b 75e1 000b                         .v...u..

000b8bd8 <_ZTVN5spark9WiFiClassE>:
	...
   b8be0:	7747 000b 773d 000b 7733 000b 76e9 000b     Gw..=w..3w...v..
   b8bf0:	7727 000b 771b 000b 692d 000b 6935 000b     'w...w..-i..5i..
   b8c00:	770f 000b 7707 000b 76fd 000b 76f3 000b     .w...w...v...v..
   b8c10:	6965 000b                                   ei..

000b8c14 <_ZSt7nothrow>:
	...

000b8c15 <_ZTSSt19_Sp_make_shared_tag>:
   b8c15:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b8c25:	6572 5f64 6174 0067 0000                     red_tag....

000b8c30 <_ZTISt19_Sp_make_shared_tag>:
   b8c30:	8c70 000b 8c15 000b                         p.......

000b8c38 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b8c38:	8cd0 000b 8c44 000b 8cf4 000b               ....D.......

000b8c44 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b8c44:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b8c54:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b8c64:	0045 0000                                   E...

000b8c68 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b8c68:	0000 0000 8c38 000b 7bc5 000b 7bd9 000b     ....8....{...{..
   b8c78:	7d6d 000b 7d6d 000b 7c43 000b 7b85 000b     m}..m}..C|...{..
   b8c88:	7c2b 000b 7bed 000b 7bb7 000b               +|...{...{..

000b8c94 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b8c94:	8cd0 000b 8ca0 000b 8c38 000b               ........8...

000b8ca0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b8ca0:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b8cb0:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b8cc0:	666e 456f 0000 0000                         nfoE....

000b8cc8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b8cc8:	0000 0000 8c94 000b 7c6d 000b 7c81 000b     ........m|...|..
   b8cd8:	7d6d 000b 7d6d 000b 7c43 000b 7b85 000b     m}..m}..C|...{..
   b8ce8:	7d41 000b 7ccd 000b 7c95 000b               A}...|...|..

000b8cf4 <_ZTISt9type_info>:
   b8cf4:	8c70 000b 8cfc 000b                         p.......

000b8cfc <_ZTSSt9type_info>:
   b8cfc:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b8d0c:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b8d1c:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   b8d2c:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   b8d3c:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   b8d4c:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   b8d5c:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   b8d6c:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000b8d79 <link_const_variable_data_end>:
   b8d79:	00          	.byte	0x00
	...

000b8d7c <link_constructors_location>:
   b8d7c:	000b4d7d 	.word	0x000b4d7d
   b8d80:	000b5fb9 	.word	0x000b5fb9
   b8d84:	000b65b1 	.word	0x000b65b1
   b8d88:	000b6629 	.word	0x000b6629
   b8d8c:	000b68dd 	.word	0x000b68dd
   b8d90:	000b6a3d 	.word	0x000b6a3d
   b8d94:	000b6b79 	.word	0x000b6b79
   b8d98:	000b6f41 	.word	0x000b6f41
   b8d9c:	000b74fd 	.word	0x000b74fd
   b8da0:	000b7751 	.word	0x000b7751

000b8da4 <link_constructors_end>:
	...
